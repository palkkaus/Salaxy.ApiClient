//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



/** Absences for a single Worker. */
export interface WorkerAbsences {
    /** Account ID for the worker whose absences are recorded. */
    workerId?: string | undefined;
    /** The employment relation id for the worker whose absences are recorded. */
    employmentId: string;
    /** Collection of absence periods. */
    periods?: AbsencePeriod[] | undefined;
    /** Basic information for the Worker. 
Automatically updated upon save based on WorkerId.
Mainly for the listings etc. */
    workerSnapshot?: Avatar | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Period of absence */
export interface AbsencePeriod {
    /** Period for the absance. */
    period?: DateRange | undefined;
    /** Cause / type of the absence */
    causeCode?: AbsenceCauseCode | undefined;
    /** If true, the absence is paid by the employer. */
    isPaid?: boolean | undefined;
    /** If true, annual leaves are accrued from the absence. If false, these days are deducted from the accrual.
By default, you may leave this null and it always follows the IsPaid. */
    isHolidayAccrual?: boolean | undefined;
    /** Amount of salary that is paid for the absense.
Currently not in use: Would be used in Incomes Register integration. */
    amount?: number | undefined;
    /** Additional information as recorded by the Employer. */
    notes?: string | undefined;
    /** Identifier in the source system is a key defined by a source system / partner system.
This is a pass-through string that is passed to the result calculations. */
    sourceId?: string | undefined;
}

/** Defines an avatar for an account, profile etc. - mainly the image that should be shown, names and short description */
export interface Avatar {
    /** Entity type: person/company */
    entityType?: LegalEntityType | undefined;
    /** First name or company name */
    firstName?: string | undefined;
    /** Last name, for companies, this should be null */
    lastName?: string | undefined;
    /** Display name. For a person this is 'FirstName LastName' (auto-created). */
    displayName?: string | undefined;
    /** Sortable name for ordered lists etc. For a person this is 'LastName, FirstName' (auto-created).
Depending on the data storage, this may be all-lowercase for easier sorting and search. */
    sortableName?: string | undefined;
    /** Type of the Avatar picture. */
    pictureType?: AvatarPictureType | undefined;
    /** Color - currently only used by type Icon */
    color?: string | undefined;
    /** Initials - currently only used by type Icon */
    initials?: string | undefined;
    /** URL of the picture if specified as picture (null in a case of type Icon) */
    url?: string | undefined;
    /** Short description of the user. 
This may be overriden by a context specific value by the business logic. */
    description?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Describes the range of dates from start to end and the number of days in between. */
export interface DateRange {
    /** Start date of the period */
    start?: Date | undefined;
    /** End date of the period. */
    end?: Date | undefined;
    /** Number of days in the range.
Depending of the context, this may be mathematical (end - start) or 
explicitly specified (typically working days).
Typically an integer, and calculations and UI's may choose to round it. */
    daysCount?: number | undefined;
    /** The collection of days contained in the DateRange if specified by the user.
Alternative to DaysCount. If set, should also set DaysCount for backward compatibility. */
    days?: Date[] | undefined;
}

export interface PageResultOfApiListItem {
    items?: ApiListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** The line item class for search and listing results. Use this class for building user interfaces. */
export interface ApiListItem {
    /** The payload type of the item. */
    type?: ApiListItemType | undefined;
    /** List item type of the item if the item supports a custom OData interface. */
    listType?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: { [key: string]: any; } | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Object that represents a Salaxy account. */
export interface AccountInIndex {
    /** Avatar for the account */
    avatar?: Avatar | undefined;
    /** Official id of the person or company. */
    officialId?: string | undefined;
    /** Email address. */
    email?: string | undefined;
    /** Telephone number. */
    telephone?: string | undefined;
    /** Bank account number (IBAN) */
    ibanNumber?: string | undefined;
}

/** An account for a Person - can be both Employer and Worker */
export interface PersonAccount {
    /** Information about the verification of the account. 
NOTE that this object may not be present in many method calls - this is because it contains confidential information. */
    identity?: Identity | undefined;
    /** Type of the last login - the user role */
    lastLoginAs?: WebSiteUserRole | undefined;
    /** Contact verification pin for securing contact address changes. */
    contactVerificationPin?: string | undefined;
    /** Entity type of the account.
Type PersonCreatedByEmployer means that the Worker has not yet signed into the system and there may be multiple instances of the same logical person (Official ID) - one for each employer. */
    entityType?: LegalEntityType | undefined;
    /** If true the object Account is and Employer account - it has the EmployerInfo object */
    isEmployer?: boolean | undefined;
    /** If true the object Account is and Worker account - it has the WorkerInfo object */
    isWorker?: boolean | undefined;
    /** If true, the account has been verified. Typically this means a digitally signed contract.
This means that the account also has an Identity object.
However, as the Identity object contains confidential information, it is not necessarily present in all method calls. */
    isVerified?: boolean | undefined;
    /** Avatar is the visual representation of the Account. */
    avatar?: Avatar | undefined;
    /** Contact information for the Account. */
    contact?: Contact | undefined;
    /** Language of the person/company. */
    language?: Language | undefined;
    /** Service model for the account. */
    serviceModelId?: string | undefined;
    /** Workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Identity is the official identity of an actor. This part is not freely editable as changing it requires signature or some other means. Identity is also often fetched from external sources such as govenment registries. */
export interface Identity {
    /** This is an official identifier of the actor:
Finnish HETU (Soc. sec. number) for a Person or Y-tunnus (Company ID for a company or association) */
    officialId?: string | undefined;
    /** This is an official name of the actor.
It originates from the YTJ or Bank authentication. */
    officialName?: string | undefined;
    /** First name OR company name */
    firstName?: string | undefined;
    /** Last name
Available only to real persons (as opposed to companies). */
    lastName?: string | undefined;
    /** The latest authorization contract that is the bases for this Identity */
    contract?: AuthorizationContract | undefined;
    /** Tha bank account number of the Worker - in Iban format. */
    ibanNumber?: string | undefined;
    /** Indicates whether the principal user of the customer is a politically exposed person or not. */
    isPep?: boolean | undefined;
    /** Mainly for company accounts, but in special cases for Persons,
this is the main Contact party and usually the signer for the account. */
    primaryContact?: ContractParty | undefined;
    /** List of roles which this account is member of. */
    roles?: Role[] | undefined;
    /** Latest contact, bank account or name update. */
    identityUpdatedAt?: Date | undefined;
    /** Latest KYC update, if done. */
    kycUpdatedAt?: Date | undefined;
}

/** Common contact information object for Person, Company, Location etc. */
export interface Contact {
    /** Contact e-mail address. Always lower invariant, trimmed and empty string set to null. */
    email?: string | undefined;
    /** Telephone number */
    telephone?: string | undefined;
    /** Street address */
    street?: string | undefined;
    /** Postal code */
    postalCode?: string | undefined;
    /** City or community (postitoimipaikka) */
    city?: string | undefined;
    /** This is the ISO code for country.
Currently, it should always be "fi". */
    countryCode?: string | undefined;
}

/** Defines the data that IWorkflowItem must provide. */
export interface WorkflowData {
    /** Workflow events for the item. */
    events?: WorkflowEvent[] | undefined;
}

/** Contract / authorization document that is the bases for Salaxy acting in behalf of this account */
export interface AuthorizationContract {
    /** Time when the contract was signed */
    signedAt?: Date | undefined;
    /** If true, there is a valid authorization - the account has been validated. */
    isSigned?: boolean | undefined;
    /** Type of the authorization */
    authorizationType?: AuthorizationType | undefined;
    /** A person or other party that authorized the current person. */
    authorizedBy?: Authority | undefined;
}

/** A signing party in a contract. */
export interface ContractParty {
    /** Identifier for the party: Currently always an account, but may be an external ID later. */
    id?: string | undefined;
    /** Avatar for the Party. 
Note that this is not automatically fetched by all methods: Especially when IsSelf is true. */
    avatar?: Avatar | undefined;
    /** Contact information - note that for most signatures, only E-mail and phone number are required. */
    contact?: Contact | undefined;
    /** True if Profile is the current Authorization.
If set to true, will set current Authorization as this contract party.
If set to false AND was previously true, will set the Profile properties null (unless explicitly set to something else) */
    isSelf?: boolean | undefined;
    /** Official ID if needed in signature */
    officialId?: string | undefined;
    /** Role of the person - justification for authorization */
    role?: string | undefined;
    /** True if the person has signed the contract. */
    isSigned?: boolean | undefined;
    /** Reserved for cases where there are several signees and each has a separate signature document. */
    signatureUrl?: string | undefined;
    /** Bank account IBAN number */
    iban?: string | undefined;
    /** Party type (Person or Prospect) */
    contractPartyType?: ContractPartyType | undefined;
    /** If true, contact is an employer */
    isEmployer?: boolean | undefined;
}

/** Event in the workflow */
export interface WorkflowEvent {
    /** Event-provider specific identifier for the event.
For deletable events, this should identify , but do NOT trust this to be 100% unique. */
    id?: string | undefined;
    /** Type of the event. This typically maps to parent-object specific enumeration. */
    type?: string | undefined;
    /** Message for backoffice purposes from the User or system that created the event. */
    message?: string | undefined;
    /** User Interface styling of the event: Indicates the severity for the end-user. */
    ui?: BootstrapStyle | undefined;
    /** Features for this event. */
    features?: WorkflowEventFeatures[] | undefined;
    /** UTC time for when the event occured. */
    time?: Date | undefined;
    /** User or system that created the event. */
    user?: string | undefined;
    /** Credential of the user which is responsible of the event. */
    assignedTo?: string | undefined;
    /** Record attached to this event. */
    record?: string | undefined;
}

/** A person or other party that authorized the current person. */
export interface Authority {
    /** Name of the authority. */
    name?: string | undefined;
    /** Telephone number of the person. This is currently optional.
Idea is to send SMS invitations in some scenarios. */
    telephone?: string | undefined;
    /** E-mail of the person. This is currently not used, but is expected to be used in the future. 
So fill it in as it was required unless you have very compelling reasons. */
    email?: string | undefined;
    /** Finnish Person ID is the key to signature. This is currently always required. */
    personalId?: string | undefined;
    /** The Palkkaus.fi Account ID. This is optional and should not be set if the ID is the same as the target account / Person. */
    accountId?: string | undefined;
    /** Date for the authorization. */
    authorizedAt?: Date | undefined;
}

/** A company account - note that this can also be an association etc. - something that has a Company ID. */
export interface CompanyAccount {
    /** Information about the verification of the account. 
NOTE that this object may not be present in many method calls - this is because it contains confidential information. */
    identity?: Identity | undefined;
    /** High level company type */
    companyType?: CompanyType | undefined;
    /** Entity type of the account.
Type PersonCreatedByEmployer means that the Worker has not yet signed into the system and there may be multiple instances of the same logical person (Official ID) - one for each employer. */
    entityType?: LegalEntityType | undefined;
    /** If true the object Account is and Employer account - it has the EmployerInfo object */
    isEmployer?: boolean | undefined;
    /** If true the object Account is and Worker account - it has the WorkerInfo object */
    isWorker?: boolean | undefined;
    /** If true, the account has been verified. Typically this means a digitally signed contract.
This means that the account also has an Identity object.
However, as the Identity object contains confidential information, it is not necessarily present in all method calls. */
    isVerified?: boolean | undefined;
    /** Avatar is the visual representation of the Account. */
    avatar?: Avatar | undefined;
    /** Contact information for the Account. */
    contact?: Contact | undefined;
    /** Language of the person/company. */
    language?: Language | undefined;
    /** Service model for the account. */
    serviceModelId?: string | undefined;
    /** Workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Represents a user credential in session: This credential is typically based on Claims and is availble without going to database. */
export interface SessionUserCredential {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** Unique identitier for the user ID coming from the Auth0 database: 
'[MethodText]|[ProviderId]', e.g. 'facebook|12345678901234567'
(Number may contain more characters - not sure for the exact cahracters count) */
    id?: string | undefined;
    /** Avatar object that contains the visual reresentation of the User account. */
    avatar?: Avatar | undefined;
    /** E-mail address if provided by the authentication provider. */
    email?: string | undefined;
    /** The ultimate authentication provider that authenticated the user, e.g. Facebook, Google. */
    authenticationMethod?: AuthenticationMethod | undefined;
}

/** User certificate. */
export interface Certificate {
    /** Certificate thumbprint. */
    thumbprint?: string | undefined;
    /** Certificate bytes Used in returning the certificate to the user as PFX or ZIP.
Not persisted. */
    bytes?: string | undefined;
    /** End user description for the certificate. */
    title?: string | undefined;
    /** Password for issuing a new certificate. Not persisted.
Also used for passing the CSR in request if it is passed as Base64 encoded text. Not persisted. */
    password?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Avatar for authorized account. */
export interface AuthorizedAvatar {
    /** Optional ID for partner authorization.
Used to restrict the authorization based on Partner data (typically user account, role etc.).
Current implementation compares this to partnerAccountId and allows acces only if the two match. */
    partnerKey?: string | undefined;
    /** The time when the authorization was done */
    authorizedAt?: Date | undefined;
    /** Scope for the account authorization.
The value of the scope  is expressed as a list of space-delimited, case-sensitive strings. */
    scope?: string | undefined;
    /** Entity type: person/company */
    entityType?: LegalEntityType | undefined;
    /** First name or company name */
    firstName?: string | undefined;
    /** Last name, for companies, this should be null */
    lastName?: string | undefined;
    /** Display name. For a person this is 'FirstName LastName' (auto-created). */
    displayName?: string | undefined;
    /** Sortable name for ordered lists etc. For a person this is 'LastName, FirstName' (auto-created).
Depending on the data storage, this may be all-lowercase for easier sorting and search. */
    sortableName?: string | undefined;
    /** Type of the Avatar picture. */
    pictureType?: AvatarPictureType | undefined;
    /** Color - currently only used by type Icon */
    color?: string | undefined;
    /** Initials - currently only used by type Icon */
    initials?: string | undefined;
    /** URL of the picture if specified as picture (null in a case of type Icon) */
    url?: string | undefined;
    /** Short description of the user. 
This may be overriden by a context specific value by the business logic. */
    description?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Account - either Person or Company - is a juridical entity Paying or receiving salaries, making contracts etc. It may be related to zero, one or multiple UserAccounts/Credentials. */
export interface AccountBase {
    /** Entity type of the account.
Type PersonCreatedByEmployer means that the Worker has not yet signed into the system and there may be multiple instances of the same logical person (Official ID) - one for each employer. */
    entityType?: LegalEntityType | undefined;
    /** If true the object Account is and Employer account - it has the EmployerInfo object */
    isEmployer?: boolean | undefined;
    /** If true the object Account is and Worker account - it has the WorkerInfo object */
    isWorker?: boolean | undefined;
    /** If true, the account has been verified. Typically this means a digitally signed contract.
This means that the account also has an Identity object.
However, as the Identity object contains confidential information, it is not necessarily present in all method calls. */
    isVerified?: boolean | undefined;
    /** Avatar is the visual representation of the Account. */
    avatar?: Avatar | undefined;
    /** Contact information for the Account. */
    contact?: Contact | undefined;
    /** Language of the person/company. */
    language?: Language | undefined;
    /** Service model for the account. */
    serviceModelId?: string | undefined;
    /** Workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Provides information about a new issued certificate. */
export interface IssuedCertificate {
    /** Certificate thumbprint: A unique identifier for the created certificate. */
    thumbprint?: string | undefined;
    /** Certificate bytes when the certifcate is a file. Currently PFX or ZIP. */
    bytes?: string | undefined;
    /** Certificate / public key as text (PEM) if provided by the generation process. */
    cert?: string | undefined;
    /** Private key as text (PEM) if provided by the generation process. */
    key?: string | undefined;
}

/** Defines an accounting target (system), CoA and ruleset that maps the calculation to the CoA (Chart of Accounts). */
export interface AccountingTarget {
    /** Information and configuration related to the system where the accounting data is to be sent. */
    info?: AccountingTargetInfo | undefined;
    /** The rule set that defines the Chart of Accounts and the mapping of salary payment to it. */
    ruleSet?: AccountingRuleSet | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Specifies the general information of the behavior of Accounting target: Especially the channel and the related properties. */
export interface AccountingTargetInfo {
    /** Basic information and visualization for the accounting target.
Avatar provides the visualization and the name for the target.
E-mail may be used in sending of the material and telephone in contacting the accounting target.
IBAN number has no use. */
    target?: AccountInIndex | undefined;
    /** Channel is the technical transport mechanism to accounting software */
    channel?: AccountingChannel | undefined;
    /** The default export method for exports: whether automatic or manual. */
    method?: ExportMethod | undefined;
    /** If specified, defines the available methods in manual exports. */
    availableMethods?: ExportMethod[] | undefined;
    /** The default export format for tabular (csv, excel) data. */
    format?: string | undefined;
    /** Accounting channel specific data (default settings) for the accounting target setup. */
    data?: { [key: string]: any; } | undefined;
}

/** Ruleset containing required tabular logic (rules) and accounts for creating accounting entries. */
export interface AccountingRuleSet {
    /** Template to which this ruleset is based on. */
    templateId?: string | undefined;
    /** Accounts which are used in the tabular logic for creating accounting entries. */
    accounts?: AccountingRuleSetAccount[] | undefined;
    /** Optional target Chart of Accounts: All the accounts in the target system, not just the ones in use. */
    targetCoA?: AccountingRuleSetAccount[] | undefined;
    /** Tabular logic for creating accounting entries. */
    rows?: AccountingRuleSetRow[] | undefined;
}

/** Single account with number, grouping and default text. */
export interface AccountingRuleSetAccount {
    /** Id for the account. */
    id?: string | undefined;
    /** Boolean indicating if the account is non-removable template. */
    isReadOnly?: boolean | undefined;
    /** Account number. */
    account?: string | undefined;
    /** Text for the account. */
    text?: string | undefined;
}

/** Contains a single row of the tabular logic for creating accounting entries. */
export interface AccountingRuleSetRow {
    /** Id for the row. */
    id?: string | undefined;
    /** Entry group: income type or total type. */
    entryCodeGroup?: string | undefined;
    /** A single code in the code group: single income type code or total row type. */
    entryCode?: string | undefined;
    /** Boolean indicating if the row is non-removable template. */
    isReadOnly?: boolean | undefined;
    /** Boolean indicating if the row is in use. */
    enabled?: boolean | undefined;
    /** Boolean indicating whether the system should make an accounting entry based on this row. */
    isIncluded?: boolean | undefined;
    /** Id of the debit account. */
    debitId?: string | undefined;
    /** Grouping text for the account.
If the account has a grouping defined, it will be listed as a separate row group. */
    debitGrouping?: string | undefined;
    /** Id of the credit account. */
    creditId?: string | undefined;
    /** Grouping text for the account.
If the account has a grouping defined, it will be listed as a separate row group. */
    creditGrouping?: string | undefined;
    /** Additional flags for directing the logic for creating accounting entry based on given entries. */
    flags?: string[] | undefined;
}

export interface PageResultOfAccountingTargetListItem {
    items?: AccountingTargetListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of Accounting targets. */
export interface AccountingTargetListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: AccountingTargetStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: AccountingTargetData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Accounting Target specific business data for index. */
export interface AccountingTargetData {
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Channel is the technical transport mechanism to accounting software */
    channel?: AccountingChannel | undefined;
    /** The default export method for exports: whether automatic or manual. */
    method?: ExportMethod | undefined;
    /** Available methods in manual exports (comma separated string). */
    availableMethods?: string | undefined;
    /** The default export format for tabular (csv, excel) data. */
    format?: string | undefined;
    /** Template to which this is based on. */
    templateId?: string | undefined;
}

/** Request model for Assertion demo */
export interface AssertionDemoCertificateRequest {
    /** Certificate bytes as Base64String */
    certificateBytes?: string | undefined;
    /** Certificate password for signing. */
    password?: string | undefined;
    /** Account to impersonate as: Will be set as sub in the token. */
    subject?: string | undefined;
    /** Potential proxy (partner) account that is in between the current user and the subject.
Will be set as salaxy_proxy_act in the token. */
    proxyActor?: string | undefined;
    /** E-mail for the user / credential that is using the system.
Will be set as salaxy_user.email. */
    userEmail?: string | undefined;
}

/** Response model for Assertion demo */
export interface AssertionDemoCertificateResponse {
    /** Token as string */
    token?: string | undefined;
    /** Token decoded for deisplay purposes. */
    tokenDecoded?: any | undefined;
    /** If there is an error creating hte certificate, it is displayed here. */
    error?: string | undefined;
}

/** Contains lists of beneficial owners and other beneficiaries of the company. */
export interface BeneficialOwners {
    /** Additional info about the owned company, e.g. the total number of shares. */
    ownedCompanyDetails?: OwnedCompanyInfo | undefined;
    /** List of beneficial owners of the company. */
    owners?: BeneficialOwner[] | undefined;
    /** List of other beneficiaries than beneficial owners of the company */
    beneficiaries?: Beneficiary[] | undefined;
    /** The workflow data for manual editing and approval purposes. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Contains additional info of the owned company. */
export interface OwnedCompanyInfo {
    /** Total count of shares. */
    totalNumberOfShares?: number | undefined;
}

/** Name and ids of the owner and the number/percent of shares. */
export interface BeneficialOwner {
    /** Owned number of shares. */
    numberOfShares?: number | undefined;
    /** Owned percent of shares. */
    percentOfShares?: number | undefined;
    /** Address. */
    address?: string | undefined;
    /** Avatar for the account */
    avatar?: Avatar | undefined;
    /** Official id of the person or company. */
    officialId?: string | undefined;
    /** Email address. */
    email?: string | undefined;
    /** Telephone number. */
    telephone?: string | undefined;
    /** Bank account number (IBAN) */
    ibanNumber?: string | undefined;
}

/** Other beneficiary of the company than beneficial owner. */
export interface Beneficiary {
    /** Nationality of the beneficiary. */
    nationality?: string | undefined;
    /** Avatar for the account */
    avatar?: Avatar | undefined;
    /** Official id of the person or company. */
    officialId?: string | undefined;
    /** Email address. */
    email?: string | undefined;
    /** Telephone number. */
    telephone?: string | undefined;
    /** Bank account number (IBAN) */
    ibanNumber?: string | undefined;
}

/** Calculation correction with state. */
export interface CalculationCorrection {
    /** Editable API calculation. */
    calculation?: CorrectionCalculation | undefined;
    /** State of the calculation. */
    state?: string | undefined;
    /** Snapshot details for save. */
    snapshot?: SnapshotInput | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Extensions to Corrections */
export interface CorrectionCalculation {
    /** Pricing model */
    pricingModel?: PricingModel | undefined;
    /** Fixed fee */
    fixedFee?: number | undefined;
    /** Customer payments info. */
    cfa?: CalcCfa | undefined;
    /** The employer object for this calculation.
Typically, you do not need to set this before the actual payment process. */
    employer?: CalcEmployer | undefined;
    /** The Worker (employee) that has performed the work. */
    worker?: CalcWorker | undefined;
    /** Information about the workflow and state of the calculation. */
    workflow?: CalcWorkflow | undefined;
    /** The main salary element. 
Alternatively the salary can be set in the Rows object - this will be the only way to set multiple salary rows (not yet supported). */
    salary?: Salary | undefined;
    /** Set of rows that make up the salary calculation:
Expenses, Benefits, deductions etc. Note that side costs are not rows. */
    rows?: UserDefinedRow[] | undefined;
    /** DEPRECIATED: Usecase will be replacing this functionality in a next major release.
The Framework Agreement (TES) parameters that affect the framework based side costs etc. of this calculation */
    framework?: TesParameters | undefined;
    /** A usecase for creating and editing salary calculations.
In practice, a usecase is either a user interface or a microservice that provides a salary calculation
and it may be implemented outside Salaxy.
Provides the possibility to store useacase specific data as part of calculation.
NOTE: This functionality will replace Framework property in a next major release. */
    usecase?: UsecaseData | undefined;
    /** The results of the calculation. In the API, this is a read-only object. */
    result?: CalculationResult | undefined;
    /** Information about the work that is not directly related to calculating salary and expenses. */
    info?: CalcInfo | undefined;
    /** Sharing of the calculation. This object cannot be modified directly, 
use specialized methods in Calculations service. */
    sharing?: CalculationSharing | undefined;
    /** Contains calculation specific data for accounting (both cost and financial accounting). */
    accounting?: CalculationAccounting | undefined;
    /** Worktime data that is stored as part of Salary calculation:
work days, absences, holidays and holiday accrual.
In the future may also contain relevant part of timesheet data (work hours). */
    worktime?: CalcWorktime | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Input data for calculation snapshot. */
export interface SnapshotInput {
    /** Reason code for the snapshot. */
    reasonCode?: number | undefined;
    /** Severity code for snapshot case. */
    severityCode?: number | undefined;
    /** Free form description. */
    description?: string | undefined;
    /** Categories for the snapshot case. */
    categories?: string[] | undefined;
}

/** Cfa allocations. */
export interface CalcCfa {
    /** The date and time of allocation.
This is always UTC. */
    updatedAt?: Date | undefined;
    /** The worker net salary which is booked to the customer funds account. */
    net?: number | undefined;
    /** The tax amount which is booked to the  customer funds account. */
    tax?: number | undefined;
    /** The pension amount which is booked to the  customer funds account. */
    pension?: number | undefined;
    /** The Palkkaus service which is booked to the  customer funds account. */
    service?: number | undefined;
    /** The Palkkaus fee which is booked to the  customer funds account. */
    fee?: number | undefined;
    /** The total payment booked to the  customer funds account. */
    readonly total?: number | undefined;
}

/** Employer of a calculation */
export interface CalcEmployer {
    /** Display image information and type of employer.
NOTE: Recalculate-method retains the values for display purposes if AccountId or IsSelf is not set.
This is mainly for demo and testing in anonymous mode.
However, in storage methods, the value is reset based on values of AccountId or IsSelf
even if they are not set: Anything stored in Avatar will be ignored. */
    avatar?: Avatar | undefined;
    /** The Palkkaus.fi Account identifier for the Employer. */
    accountId?: string | undefined;
    /** True if Profile is the current Authorization.
If set to true, will set current Authorization as this contract party.
This overrides any value in AccountId, so be sure to switch this back to false if this is switchable.
Setting to False does not have any immediate effect. */
    isSelf?: boolean | undefined;
    /** Current address of the employer.
Please note that this is a read only field. */
    contact?: Contact | undefined;
    /** Official id of the person or company.
Please note that this is a read only field. */
    officialId?: string | undefined;
}

/** Worker object for the current calculation */
export interface CalcWorker {
    /** Palkkaus.fi Account Id for the worker.
Alternatively you can set the Payment data with the required infromation */
    accountId?: string | undefined;
    /** Employment Id for the worker. */
    employmentId?: string | undefined;
    /** Data that is needed for salary payment.
This object may be null if AccountId has been set. 
Also, if AccountId has been set, these properties will be ignored: 
The Worker will decide on payment properties herself. */
    paymentData?: CalcWorkerPaymentData | undefined;
    /** Display image and properties of the Worker. 
Based on either the AccountId or PaymentData */
    avatar?: Avatar | undefined;
    /** True if Profile is the currently Account
If set to true, will set current Account as this contract party.
This overrides any value in AccountId, so be sure to switch this back to false if this is switchable.
Setting to False does not have any immediate effect. */
    isSelf?: boolean | undefined;
    /** Date of birth for the Worker - this affects the side costs. 
Please also set the DateOfBirthAccuracy, if you set this property.
If PaymentData or AccountId lead to a valid Social security number, it will override any age set here. */
    dateOfBirth?: Date | undefined;
    /** Accuracy of the date of birth
If PaymentData or AccountId lead to a valid Social security number, it will override any age set here. */
    dateOfBirthAccuracy?: DateOfBirthAccuracy | undefined;
    /** New Widthholding tax logic that is based on separately stored tax cards. */
    tax?: CalcTax | undefined;
    /** Current address of the worker.
Please note that this is a read only field. */
    contact?: Contact | undefined;
}

/** Defines the properties of salary calculation workflow - typically the workflow from draft to Payment. */
export interface CalcWorkflow {
    /** Status of the calculation from Draft to PaymentSucceeded */
    status?: CalculationStatus | undefined;
    /** Time when this calculation was paid (if it was paid) to Palkkaus service. */
    paidAt?: Date | undefined;
    /** Time when the salary was paid by Palkkaus service. */
    salaryPaidAt?: Date | undefined;
    /** The estimated date when the salary is withdrawable by the worker. */
    salaryDate?: Date | undefined;
    /** The requested date for the SalaryDate from the employer. */
    requestedSalaryDate?: Date | undefined;
    /** Defines the re-setting of the salary date in the calculation re-calculation. */
    salaryDateKind?: SalaryDateKind | undefined;
}

/** Defines the main salary that is the bases for the calculation */
export interface Salary {
    /** Type of the salary being calculated */
    kind: SalaryKind;
    /** Amount of e.g. hours, months for the salary. Default is 1. */
    amount?: number | undefined;
    /** Price of one unit - e.g. hour, month. */
    price: number;
    /** E.g. hour, month. Typically this parameter can be left empty/null and the unit is set according to type. */
    unit?: string | undefined;
    /** Optional message for the salary row that is shown in reports. If null, will be set according to type. */
    message?: string | undefined;
    /** If set to true, will calculate the household deduction. Applies only to natural persons - as oppsed to companies. */
    isHouseholdDeductible?: boolean | undefined;
    /** If tax IsHouseholdDeductible is set to true, please also select the category (categories). 
Note that "OwnPropety" is a default, it does not need to be set: Only set RelativesProperty if necessary. */
    taxDeductionCategories?: TaxDeductionWorkCategories | undefined;
}

/** This is a user defined calculation row as opposed to CalculationRow that may be either based on a user defined row or generated by the system based on e.g. TES parameters. */
export interface UserDefinedRow {
    /** Zero based row index that can be used to match the row to result rows or when deleting.
NOTE: The Row ID is given values on the fly so setting this will not have any effect at the moment.
It may reorder the entries in later implementations. */
    rowIndex?: number | undefined;
    /** Logical type of the row */
    rowType?: CalculationRowType | undefined;
    /** Description text of the row that is shown in reports. If null, will be set according to type. */
    message?: string | undefined;
    /** Count for the row - default is one */
    count?: number | undefined;
    /** Price for the row */
    price?: number | undefined;
    /** Unit for the row. Guessed based on the RowType and count, but you are better off setting it to be sure. */
    unit?: CalculationRowUnit | undefined;
    /** Source of the calculation row - affects how the row is handled in editing / recalculation scenarios. */
    source?: CalculationRowSource | undefined;
    /** Identifier in the source system is a key defined by a source system / partner system.
This is a pass-through string that is passed to the result calculations. */
    sourceId?: string | undefined;
    /** Accounting related data for the row. */
    accounting?: RowAccounting | undefined;
    /** Period if different than the Period of calculation.
Will be reported to the National Incomes registry, but also affect some other calculations.
Note that this property may be (and by default is) null. */
    period?: DateRange | undefined;
    /** Usecase specific data */
    data?: { [key: string]: any; } | undefined;
}

/** Captures the collection of parameters that different Framework agreements (TES) have. */
export interface TesParameters {
    /** Type of the work framework */
    type?: FrameworkAgreement | undefined;
    /** Subtype when one framework has several options */
    subType?: TesSubtype | undefined;
    /** Marker that the payments defined by framework agreement are included in the salary (will not be added by the calculation). */
    isTesIncludedInSalary?: boolean | undefined;
    /** Number of days may affect calculation of different payments calculated based on a Framework agreement */
    numberOfDays?: number | undefined;
    /** Travel expences per day */
    dailyTravelExpenses?: number | undefined;
    /** The amount of kilometers travelled by day - used to define the amount of travel expenses in aomse framework agreements. */
    dailyTravelExpensesKm?: number | undefined;
    /** Daily expenses amount */
    dailyExpenses?: number | undefined;
    /** If true will calculate the Finnish child care subsidy */
    isYksityisenHoidonTuki?: boolean | undefined;
    /** Amount of Finnish child care subsidy */
    yksityisenHoidonTukiAmount?: number | undefined;
}

/** A usecase for creating and editing salary calculations and other . In practice, a usecase is either a user interface or a microservice that provides the bases for the object. Provides the possibility to store useacase specific data as part of object. NOTE: For Calculations, this functionality will replace TesParameters in the 3.0 version. */
export interface UsecaseData {
    /** Key for the usecase based on which it is resolved. 
Later, this may resolve to a user interface, microservice or a to manifest registering one.
For now, just use a unique string starting with a domain you own. */
    uri?: string | undefined;
    /** A short label of that can be shown to the end user. */
    label?: string | undefined;
    /** Optional description of the use case for the end user.
Shown in detail views when explaining the logic of the usecase. */
    description?: string | undefined;
    /** Usecase specific data */
    data?: { [key: string]: any; } | undefined;
}

export interface CalculationResult {
    /** Calculation totals that are common to both Worker and Employer. */
    totals?: TotalCalculationDTO | undefined;
    /** Rows that are compatible with Incomes Register (tulorekisteri) process.
These are available only for calculations paid after 7.2.2019 (TODO: estimation as of writing). */
    irRows?: IrRow[] | undefined;
    /** The calculation from the Employer point-of-view */
    employerCalc?: EmployerCalculationDTO | undefined;
    /** The calculation from the Worker point-of-view */
    workerCalc?: WorkerCalculationDTO | undefined;
    /** The result rows. Note that this collection also contains the main Salary entry as one of the rows. */
    rows?: ResultRow[] | undefined;
    /** Responsibilities of Employer and parameters that affect those responsibilities. */
    responsibilities?: IEmployerResponsibilities | undefined;
    /** The validation result for the current calculation.
Please note that this is not serialized into the data storage. */
    validation?: ApiValidation | undefined;
}

/** Informational object that stores data about the salary calculation / payment that is not directly related to calculating the salary. */
export interface CalcInfo {
    /** Start date of the work */
    workStartDate?: Date | undefined;
    /** End date of the work */
    workEndDate?: Date | undefined;
    /** Description of the work for reporting purposes. Max 32 chars. */
    workDescription?: string | undefined;
    /** Message from worker to employer - when worker sends the salary calculation to the employer. */
    workerMessage?: string | undefined;
    /** Message which will be displayed in the payslip. */
    salarySlipMessage?: string | undefined;
    /** Payment reference number in payment service */
    paymentId?: string | undefined;
    /** Original Payment reference number */
    originalPaymentId?: string | undefined;
    /** Channel that is used for payment. */
    paymentChannel?: PaymentChannel | undefined;
    /** Application id for invoicing etc. purposes. */
    applicationId?: string | undefined;
    /** The MessageThread Id, if this calculation is referred in a message thread. */
    messageThreadId?: string | undefined;
    /** Assumed earnings payment report date for the report. */
    reportDate?: Date | undefined;
    /** Notes related to the payment and other backoffice operations: 
For example the justification why the sum is in calculation vs. Paytrail payment. */
    backofficeNotes?: string | undefined;
    /** Occupation classification, used at least for Accident insurance purposes, but may be used for other reporting. 
For Finnish Salaries use the Statistics Finland 
"Classification of Occupations 2010" (TK10): https://www.stat.fi/meta/luokitukset/ammatti/017-2018-05-15/index_en.html */
    occupationCode?: string | undefined;
    /** Secondary occupation classification. Some earnings payment reports may require two occupation codes. */
    occupationCode2?: string | undefined;
    /** Calculated pension insurance payment date. */
    pensionPaymentDate?: Date | undefined;
    /** Pension insurance reference number. */
    pensionPaymentRef?: string | undefined;
    /** Pension insurance payment specifier. */
    pensionPaymentSpecifier?: string | undefined;
    /** The Payroll Id, if this calculation is part of a Payroll list. */
    payrollId?: string | undefined;
    /** Cost center for reporting purposes. */
    costCenter?: string | undefined;
    /** Identifier of the worker in a source system. Used in imports etc.
This is automatically set from the source id of the employment. */
    workerSourceId?: string | undefined;
    /** Identifier of the calculation in a source system. Used in imports etc. */
    sourceId?: string | undefined;
}

/** Defines the properties related to sharing and sending of the calculation. */
export interface CalculationSharing {
    /** Type of sharing for this calculation. */
    type?: SharingUriType | undefined;
    /** Sharing uri. */
    uri?: string | undefined;
    /** Email address to which the calculation was shared last time. */
    lastSharedTo?: string | undefined;
    /** Email address which the calculation was shared as cc last time. */
    lastSharedCc?: string | undefined;
    /** Last shared message to the employer */
    lastSharedMessage?: string | undefined;
}

/** Contains calculation specific data for accounting (both cost and financial accounting). */
export interface CalculationAccounting {
    /** Special flags for account number mapping. */
    accountNumberFlags?: string[] | undefined;
    /** Values for cost accounting dimensions */
    dimensions?: CostAccountingDimension[] | undefined;
}

/** Worktime data that is stored as part of Salary calculation: work days, absences, holidays and holiday accrual. In the future may also contain relevant part of timesheet data (work hours). */
export interface CalcWorktime {
    /** Specification for the holiday calculation */
    holidaySpec?: HolidaySpecificationForYear | undefined;
    /** Employment period that is updated from employment at each recalculation (as opposed to holiday specification). */
    employmentPeriod?: DateRange | undefined;
    /** Parameters related to Monthly salary.
Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested. */
    monthly?: CalcMonthlyData | undefined;
    /** Parameters related to Hourly or Performance based salary.
Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested. */
    hourly?: CalcHourlyData | undefined;
    /** Parameters related to Holiday Bonus. */
    bonus?: CalcHolidayBonus | undefined;
    /** Number of days of non-paid absences. 
These are deducted from the Monthly salary, not from Hourly salary at the moment. */
    absencesDays?: number | undefined;
    /** Number of days of paid absences,  e.g. paid sick leave. */
    readonly paidAbsencesDays?: number | undefined;
    /** Periods of 'absences' which are paid, e.g. paid sick leave. 
These are deducted from the Monthly salary, not from Hourly salary at the moment.
Additionally corresponding row type e.g. MonthlySickLeave is added. */
    paidAbsencesPeriods?: AbsencePeriod[] | undefined;
    /** Accruals for each calendar month in this calculation. */
    accruals?: MonthlyHolidayAccrual[] | undefined;
    /** Number of paid Leave days that is paid in this salary calculation / for this period. */
    leavesDays?: number | undefined;
    /** Price for a single holiday day */
    leavesDailySalary?: number | undefined;
    /** Describes the working days in the period.
Currently, uses the DaysCount, but later the full days array will be taken to use.
This includes the absence days (divider in AbsencesDaySalary). */
    workDays?: DateRange | undefined;
}

/** The required information for paying the Salary to Worker. */
export interface CalcWorkerPaymentData {
    /** First name of the person. */
    firstName?: string | undefined;
    /** Last name / Surname of the person. */
    lastName?: string | undefined;
    /** Gets the Social security number the way the user set it in input.
HOWEVER: The getter will change the string to upper invariant/trim and if the last character is "*", it will be replaced by calculated checksum. */
    socialSecurityNumber?: string | undefined;
    /** Social security number if valid or null */
    readonly socialSecurityNumberValid?: string | undefined;
    /** IBAN number for the Bank account */
    ibanNumber?: string | undefined;
    /** Contact e-mail address. */
    email?: string | undefined;
    /** Telephone number */
    telephone?: string | undefined;
}

/** Tax card information stored as part of the Calculation object */
export interface CalcTax {
    /** Identifier for a stored tax card if one is applied to this calculation.
System updates the TaxCardId automatically in Recalculate / Save if it finds a better candidate
and also updates the Snapshot. */
    taxcardId?: string | undefined;
    /** Snapshot of the tax card for salary slip etc. purposes.
Updated in Recalculate / Save based on TaxCardId */
    snapshot?: TaxcardSnapshot | undefined;
    /** Possibility to set a fixed widthholding tax amount for this calculation regardless of 
the percentage etc. in the tax card. */
    fixedTaxAmount?: number | undefined;
    /** The API returns true if there is a valid taxcard for the PaidAt date for this calculation
or if FixedTaxAmount is set for th calculation. */
    isValid?: boolean | undefined;
    /** Calculated widthholding tax. Note that this is an estimation until the calculation is actually paid.
Also, if the salary is not paid as cash (e.g. fringe benefits), there may not be enough money to make the full deduction. */
    estimatedTax?: number | undefined;
    /** A flag that during last recalculation, there was a new shared taxcard that was waiting approval. */
    hasNewSharedCard?: boolean | undefined;
    /** Tax percent that is used in visualization. This is mainly used in Unit testing and anonymous calcultors.
Not used in real paid calculations. This is percent. I.e. for 50% set 50, not 0.5.
If PaymentData or AccountId lead to a valid tax card type and percent, or if there is FixedTaxAmount, this value is not used. */
    taxPercentForVisualization?: number | undefined;
}

/** Provides row specific data for accounting (both cost and financial accounting). */
export interface RowAccounting {
    /** Percent for VAT calculation expressed as decimal: 24% is 0.24. */
    vatPercent?: number | undefined;
    /** Total VAT amount splitted by VAT rates.
Please note, that if both {Palkkaus.Model.Calc.RowAccounting.VatPercent} and the {Palkkaus.Model.Calc.RowAccounting.VatEntries} with some entries given,
the {Palkkaus.Model.Calc.RowAccounting.VatEntries} are applied.
Please note that this is null by default. */
    vatEntries?: VatEntry[] | undefined;
    /** Special flags for account number mapping. */
    accountNumberFlags?: string[] | undefined;
    /** Values for cost accounting dimensions */
    dimensions?: CostAccountingDimension[] | undefined;
}

/** Calculates the total numbers - the ones that are common to Employer and worker. */
export interface TotalCalculationDTO {
    /** The total pension payment for this calculation */
    pension?: number | undefined;
    /** The total unemployment payment sum. */
    unemployment?: number | undefined;
    /** The total of all calculation rows */
    total?: number | undefined;
    /** The base salary without overtime and other such additions that are part of gross salary. */
    totalBaseSalary?: number | undefined;
    /** Gross salary is the salary including additions like overtime, but not benefits or expenses */
    totalGrossSalary?: number | undefined;
    /** Taxable salary is the salary from the taxation point of view - includes some benefits. */
    totalTaxable?: number | undefined;
    /** Deduction from TotalTaxable to tax at source calculation. */
    taxAtSourceDeduction?: number | undefined;
    /** DEPRICATED: This is now the same as TotalPensionInsuranceBase. For other social insurances, you may want to use 
TotalUnemploymentInsuranceBase, TotalHealthInsuranceBase or TotalAccidentInsuranceBase, */
    totalSocialSecurityBase?: number | undefined;
    /** Base income for calculating the Pension insurance contributions. */
    totalPensionInsuranceBase?: number | undefined;
    /** Base income for calculating the Unemployment insurance contributions. */
    totalUnemploymentInsuranceBase?: number | undefined;
    /** Base income for calculating the Health insurance contributions. */
    totalHealthInsuranceBase?: number | undefined;
    /** Base income for calculating the Accident insurance contributions. */
    totalAccidentInsuranceBase?: number | undefined;
    /** Tax free expenses. */
    totalExpenses?: number | undefined;
    /** Total sum of rows that are paid through Salaxy Customer Funds account.
This is the Gross sum before side costs, deductions etc., but it is not Gross salary as it includes expenses etc. */
    totalPayable?: number | undefined;
}

/** Business level modeling corresponding to WageReportsToIRTypes Transaction. Also contains additional data for accounting and integration purposes. */
export interface IrRow {
    /** Type of the row - basically describes the source for this row: 
Either Manual (default) or Usecase logic, which may be legacy / API v02 or new / API v03. */
    type?: IrRowSourceType | undefined;
    /** Description text of the row that is shown in reports. */
    message?: string | undefined;
    /** Count for the row. Default is one. */
    count?: number | undefined;
    /** Price for the row. */
    price?: number | undefined;
    /** Simple multiplication: Count * Price - no other logic. Not used as Input. */
    total?: number | undefined;
    /** Unit for the row. If specified as Undefined, set by the server-logic based on row type etc. */
    unit?: Unit | undefined;
    /** Details for the National Incomes registry */
    irData?: IrDetails | undefined;
    /** Details from Salaxy internal calulcation point-of-view (logic not in IR). */
    calcData?: IrRowCalculationProperties | undefined;
    /** Earnings period if different than the report period.
Note that this property may be (and by default is) null. */
    earningPeriod?: DateRange | undefined;
    /** Accounting related data for the row. */
    accounting?: RowAccounting | undefined;
    /** Usecase specific data */
    data?: { [key: string]: any; } | undefined;
}

/** Models the business logic of Employer side of the calculation. For documentation, see the IEmployerCalculation interface. */
export interface EmployerCalculationDTO {
    /** All side cost: The mandatory side costs + Palkkaus and partner fees */
    allSideCosts?: number | undefined;
    /** The final cost after household decuction from the tax authorities:
Add to the payment the deductions (paid by employer) and deduct House hold deduction (later potentially other such subsidies) */
    finalCost?: number | undefined;
    /** Household deduction that the tax man will reimburse in taxation.
This is an estimation: There is minimum and maximum limits etc. */
    householdDeduction?: number | undefined;
    /** The mandatory side costs are Pension (TyEL), Social secuirty and Unemployment insurance. */
    mandatorySideCosts?: number | undefined;
    /** The Palkkaus.fi fee including potential partner fees. */
    palkkaus?: number | undefined;
    /** Extra service charge in addition to Palkkaus fee. */
    service?: number | undefined;
    /** The part of the Pension that Employer pays */
    pension?: number | undefined;
    /** The social security payment- paid as part of taxation (ennakonpidätys). */
    socialSecurity?: number | undefined;
    /** Total payment that is Paid to Palkkaus.fi */
    totalPayment?: number | undefined;
    /** Total payment using pre Insiders register calculation logic.
DEPRICATED: This is provided for special scenarios and may be removed without warning */
    totalPaymentLegacy?: number | undefined;
    /** Total salary cost is the paid salary, deductions and side costs, but not expenses. */
    totalSalaryCost?: number | undefined;
    /** The part of the unemployment insurance that the employer pays */
    unemployment?: number | undefined;
    /** Total deductions that are made from the payment that is paid to Palkkaus and then to Worker */
    totalDeductions?: number | undefined;
    /** Union payment if it is deducted from the final figure */
    deductionUnionPayment?: number | undefined;
    /** Pension payments, when paid directly by the Employer - not by Palkkaus.fi */
    deductionPensionSelfPayment?: number | undefined;
    /** Unemployment insurance (TVR) payments, when paid directly by the Employer - not by Palkkaus.fi */
    deductionUnemploymentSelfPayment?: number | undefined;
    /** Salary advance - this part has already been paid. */
    deductionSalaryAdvance?: number | undefined;
    /** Foreclosure that has already been paid by the employer. */
    deductionForeclosure?: number | undefined;
    /** Tax and social security payments, when paid directly by the Employer - not by Palkkaus.fi */
    deductionTaxAndSocialSecuritySelfPayment?: number | undefined;
    /** Worker salary and expense payments, when paid directly by the Employer - not by Palkkaus.fi */
    deductionWorkerSelfPayment?: number | undefined;
    /** Foreclosure that Palkkaus.fi pays in behalf of employer. */
    foreclosureByPalkkaus?: number | undefined;
    /** Other deductions that are deducted from the net salary. */
    deductionOtherDeductions?: number | undefined;
}

/** The Worker side of the calculation. SalarySlip is largely written based on this calculation. */
export interface WorkerCalculationDTO {
    /** The benefits as valued by the tax authority. */
    benefits?: number | undefined;
    /** All the items that are deducted from the salary (this is also the order if there is not enough payable money):
SalaryAdvance + Tax + Pension + UnemploymentInsurance + UnionPayment + OtherDeductions */
    deductions?: number | undefined;
    /** The payment that is made to the Worker based on salary after all deductions.
Does not include expenses. */
    salaryPayment?: number | undefined;
    /** The salary advance that was paid to the Worker */
    salaryAdvance?: number | undefined;
    /** The foreclosure that been deducted from the salary by the employer. */
    foreclosure?: number | undefined;
    /** Ennakonpidätys: The taxes that were deducted from the worker salary. */
    tax?: number | undefined;
    /** Lähdevero: The tax at source that were deducted from the worker salary. */
    taxAtSource?: number | undefined;
    /** Net salary after tax - before worker foreclosure or deductions of the side costs */
    salaryAfterTax?: number | undefined;
    /** Net salary after tax and foreclosure. */
    salaryAfterTaxAndForeclosure?: number | undefined;
    /** Part of the Pension that is taken from the Worker side of the salary. */
    pension?: number | undefined;
    /** Workers part of the unemployment insurance. */
    unemploymentInsurance?: number | undefined;
    /** The social security payment. NOT paid as a part of tax withhold . */
    socialSecurity?: number | undefined;
    /** The union payment that is deducted from the Worker salarya s per workers request. */
    unionPayment?: number | undefined;
    /** Widthholding tax: The original calulated version - there might not be enough money to finally pay this. */
    fullTax?: number | undefined;
    /** Tax at source: The original calulated version - there might not be enough money to finally pay this. */
    fullTaxAtSource?: number | undefined;
    /** The salary advance that was paid to the Worker
The original calulated version - there might not be enough money to finally pay this. */
    fullSalaryAdvance?: number | undefined;
    /** Part of the Pension that is taken from the Worker side of the salary.
The original calulated version - there might not be anough money to finally pay this. */
    fullPension?: number | undefined;
    /** Workers part of the unemployment insurance.
The original calulated version - there might not be anough money to finally pay this. */
    fullUnemploymentInsurance?: number | undefined;
    /** The social security payment. NOT paid as a part of tax withhold .
The original calculted version. */
    fullSocialSecurity?: number | undefined;
    /** The union payment that is deducted from the Worker salarya s per workers request. */
    fullUnionPayment?: number | undefined;
    /** The sum that is at the end paid to the Worker:
Salary payment + expenses */
    totalWorkerPayment?: number | undefined;
    /** Total payment using pre Insiders register calculation logic.
DEPRICATED: This is provided for special scenarios and may be removed without warning */
    totalWorkerPaymentLegacy?: number | undefined;
    /** The side costs that are deducted from the Worker salary according to law:
Pension, Unemployment and Union payment. Tax is not included in this number.
This is not an official number, really used in the charts etc. */
    workerSideCosts?: number | undefined;
    /** Other deductions that are deducted from the net salary.
The original calulated version - there might not be enough money to finally deduct this. */
    fullOtherDeductions?: number | undefined;
    /** Part of the other deductions that are deducted from the net salary. */
    otherDeductions?: number | undefined;
    /** Prepaid expenses that are deducted from the expenses to be paid to the worker.
The original calulated version - there might not be enough money to finally deduct this. */
    fullPrepaidExpenses?: number | undefined;
    /** Part of the prepaid expenses that are deducted from the expenses. */
    prepaidExpenses?: number | undefined;
}

/** Defines a Calculation row in the calculation results */
export interface ResultRow {
    /** Row index that matches this row to a user defined row (which is zero-based).
If the row is generated by calculation business logic (e.g. based on framework agreement), the index is -1. */
    userRowIndex?: number | undefined;
    /** Logical type of the row */
    rowType?: CalculationRowType | undefined;
    /** Source of the calculation row - affects how the row is handled in editing / recalculation scenarios. */
    rowSource?: CalculationRowSource | undefined;
    /** Description text of the row that is shown in reports. If null, will be set according to type. */
    message?: string | undefined;
    /** Count for the row - default is one */
    count?: number | undefined;
    /** Price for the row */
    price?: number | undefined;
    /** Unit for the row */
    unit?: CalculationRowUnit | undefined;
    /** Total for the row - always Price * Count */
    total?: number | undefined;
    /** Base salary (Peruspalkka) is the monthly salary or total salary without addiotions (overtime, holidays etc.) */
    totalBaseSalary?: number | undefined;
    /** Gross salary (Bruttopalkka) is "real" salary including the additions (overtime, holidays etc.) but not benefits. */
    totalGrossSalary?: number | undefined;
    /** Taxable income (Ennakonpidätyksen alainen ansio) is the salary from taxation point-of-view. It is basically the Gross Salary plus benefits. */
    totalTaxable?: number | undefined;
    /** Social Security Base (Sosiaaliturvan alainen ansio) is typically the same as TotalTaxable, 
but e.g. child care subsidy (yksityisen hoidon tuki) is handled differently. */
    totalSocialSecurityBase?: number | undefined;
    /** Taxfree expenses compensation */
    totalExpenses?: number | undefined;
    /** Deductions from the salary: Union payment, Advance, Foreclosure */
    totalDeduction?: number | undefined;
    /** Identifier in the source system is a key defined by a source system / partner system.
This is a pass-through string that is kept as-is in the Salaxy system. */
    sourceId?: string | undefined;
    /** Period if different than the Period of calculation.
Will be reported to the National Incomes registry, but also affect some other calculations.
Note that this property may be (and by default is) null. */
    period?: DateRange | undefined;
    /** Accounting related data for the row. */
    accounting?: RowAccounting | undefined;
    /** Usecase specific data */
    data?: { [key: string]: any; } | undefined;
}

/** Parameters that affect the calculation. EmployerResponsibilities is historical name - currentlty to object holds also other properties that are not well described as responsibilities. These based on the EmployerGroups selection or properties of the Employer and Worker snapshots as well as this Calculation */
export interface IEmployerResponsibilities {
    /** Employer groups that are set on Example calculations.
These will be replaced by properties from Worker / Employer when these persons are set. */
    employerGroups?: EmployerGroups | undefined;
    /** Pension is not paid if the salary to this Worker is less than a certain amount in a month (about 60€)
or worker is less than 17 or more than 64 years old. */
    readonly noPensionPayment?: boolean | undefined;
    /** If worker is less than 16 or more than 67, social secuiry payment is not paid */
    readonly noSocialSecurity?: boolean | undefined;
    /** If Worker is less than 17 or more than 64, TVR is not paid.
Also if the Employer has no accident insurance. */
    readonly noTvr?: boolean | undefined;
    /** The name of the Pension company because this affects the Pension percentage used in the calculation (only in contract situation).
It also needs to be shown in the reports. */
    readonly pensionCompany?: PensionCompany | undefined;
    /** Pension discount percent. */
    readonly pensionDiscountPercent?: number | undefined;
    /** Customer specific pension percent. */
    readonly pensionPercent?: number | undefined;
    /** Company for the current insurance */
    readonly insuranceCompany?: InsuranceCompany | undefined;
    /** Percent for calculating the estimate for the accident insurance amount to pay. */
    readonly insurancePercent?: number | undefined;
    /** Percent for calculating the estimate for the group life insurance amount to pay. */
    readonly groupLifeInsurancePercent?: number | undefined;
    /** Accident insurance contract number. */
    readonly insuranceContractNumber?: string | undefined;
    /** If the Worker is from 53 to 62 years old, more of the Pension payment 
is deducted from the Worker side of the salary (less for the Employer).
NOTE: People from 63 to 67 years pay the same amount as 17-52 years old. */
    readonly pensionOldAgePayment?: boolean | undefined;
    /** The employer should have a Pension contract (not a temporary employer).
It does not necessarily mean that the user has a contract yet.
NOTE: At the moment, this is not used for calculation - only in the Side costs visualizer tool. */
    readonly pensionRegularEmployer?: boolean | undefined;
    /** If true, the employer has a Pension contract and makes the payments 
in a monthly schedule which means that Pension interest is calculated for the 20th of the next month.
Currently, this is only enabled to Etera - other companies will follow. */
    readonly isPensionMonthlyContract?: boolean | undefined;
    /** If true, the employer pays the Unemployment insurance directly to TVR.
As of writing, this is true for all companies and with calculations starting 1.8.2018,
false for households or calculations before the date. */
    readonly unemploymentSelfPayment?: boolean | undefined;
    /** The assumed salary payment date from the worker perspective.
The system calculates the nearest possible salary date if no any salary date has been given by the
employer. If given, the system confirms the given date.
This date affects the yearly percents used in the salary calculation. */
    readonly calculationPaymentDate?: Date | undefined;
    /** The age range that is used in the business logic that determines the employer responsibilities.
This property replaces the EmployerGroups.AgeRange that was previous get/set. 
This is based on WorkerDateOfBirth and CalculationPaymentDate. */
    readonly pensionAgeRange?: AgeRange | undefined;
    /** Date of birth for the Worker - this affects the side costs. 
Please also set the DateOfBirthAccuracy, if you set this property.
If SocialSecurityNumber is set, it will override any value set here. */
    readonly workerDateOfBirth?: Date | undefined;
    /** Accuracy of the date of birth
If SocialSecurityNumber is set, it will override any value set here. */
    readonly workerDateOfBirthAccuracy?: DateOfBirthAccuracy | undefined;
    /** Pension calculation type. */
    pensionCalculation?: PensionCalculation | undefined;
    /** Rules (e.g. effect of monthly lower limit) for pension calculation. */
    pensionRule?: PensionRule | undefined;
    /** Type of the employment relation */
    employmentType?: EmploymentRelationType | undefined;
    /** Taxcard type from the employment point of view. */
    employmentTaxcard?: EmploymentRelationTaxcard | undefined;
    /** Worker's preferred salary payment method: bank account, external etc. */
    salaryPaymentMethod?: EmploymentRelationSalaryPaymentMethod | undefined;
    /** Type of additional income earner data by National Incomer Register classification . If several types apply, all of them should be selected. */
    irIncomeEarnerTypes?: IncomeEarnerType[] | undefined;
    /** Sub organization code for the Incomes Registry. */
    readonly subOrgCode?: string | undefined;
    /** Employment registration code for Incomes Registry. */
    employmentRegCode?: string | undefined;
    /** Tax and social security payments are paid directly by the Employer - not by Palkkaus.fi */
    readonly taxAndSocialSecuritySelfPayment?: boolean | undefined;
    /** Worker salary and expense payments are paid directly by the Employer - not by Palkkaus.fi */
    readonly workerSelfPayment?: boolean | undefined;
    /** Pension payments are paid directly by the Employer - not by Palkkaus.fi */
    readonly pensionSelfPayment?: boolean | undefined;
    /** Pension insurance contract number. */
    readonly pensionContractNumber?: string | undefined;
    /** Status for indicating whether the total amount of paid salaries exceeds the thresold for higher unemployment insurance percent. */
    readonly unemploymentPayrollLimitStatus?: UnemploymentPayrollLimitStatus | undefined;
    /** Options for the delivery of the payslip to the worker. */
    readonly salarySlipDeliveryMethods?: WorkerSalarySlipDeliveryMethod[] | undefined;
}

/** Common base class / interface for data validation. */
export interface ApiValidation {
    /** If true, the data is valid - no errors. */
    readonly isValid?: boolean | undefined;
    /** If true, has required fields missing data. */
    readonly hasAllRequiredFields?: boolean | undefined;
    /** Validation errors on invalid field values. 
Note that required fields missing error messages are not here. Only the invalid values. */
    readonly errors?: ApiValidationError[] | undefined;
}

/** Id of the cost accounting dimension with optional percentage for shared costs. */
export interface CostAccountingDimension {
    /** Dimension Id. */
    id?: string | undefined;
    /** Cost accounting dimension value id. */
    value?: string | undefined;
    /** Sharing percent for the dimension. */
    percent?: number | undefined;
}

/** Extends the Holiday specification with the properties of employment relation that are required for a specific year. */
export interface HolidaySpecificationForYear {
    /** Wage basis for a Holiday Year.
When this is changed, you need to make a rerun to the previous calculations in the holiday year.
NOTE: This is not in HolidaySpecification because, the same value is stored in Employment relation. */
    wageBasis?: WageBasis | undefined;
    /** Employment period for the purposes of holiday calculation (annual leave accrual).
When this is changed, you need to make a rerun to the previous calculations in the holiday year. */
    employmentPeriod?: DateRange | undefined;
    /** Defines how the holidays are handled for the worker. */
    code?: HolidayCode | undefined;
    /** Defines the number of holidays that the worker is entitled per month worked.
If the value is set to 0 (default), the number is 2 for first year and 2,5 thereafter as defined in the law.
To actually se the daysPerMonth to zero, use code value other than Permanent14Days or Permanent35Hours. */
    accrualFixed?: number | undefined;
    /** Holiday compensation as percent of salary (11.5% is 0.115) */
    compensation?: number | undefined;
    /** Method for paying holiday bonus in this salary calculation. */
    bonusMethod?: HolidayBonusPaymentMethod | undefined;
    /** Holiday bonus for the worker (lomaraha, lomaltapaluuraha).
Typically 0.5 for 50%. */
    bonus?: number | undefined;
}

/** Period recalculation parameters that are related to Monthly salary. Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested. */
export interface CalcMonthlyData {
    /** If true the Monthly (weekly) calculation is being applied to absences and holidays. */
    isMonthly?: boolean | undefined;
    /** Monthly salary in holiday and absences calculation.
Typically, the same as the actual monthly calculation, but may be modified. */
    monthlySalary?: number | undefined;
    /** Price for a single absence day. Typically based on MonthlySalary, but may be modified. */
    absencesDaySalary?: number | undefined;
}

/** Holiday calculation based on hourly salary OR performance based salaries. May also contain other data related to working hours. */
export interface CalcHourlyData {
    /** If true, the hourly / performance based calculation is applied. */
    isHourly?: boolean | undefined;
}

/** Holiday Bonus data that is stored into a Salary calculation. */
export interface CalcHolidayBonus {
    /** Number of yearly leave days. This is for the purposes of calculating the Bonus, 
so this is yearly salary days, not the complete saldo (including StartSaldo). */
    yearlyLeaveDays?: number | undefined;
    /** Total yearly holiday salary for the purposes of holiday bonus. */
    totalHolidaySalary?: number | undefined;
    /** The sum of holiday bonus that has already been paid this year.
The payment is never so big that this would become more than BonusTotalHolidaySalary 
(by this calculation - the limit can be exceeded manually). */
    alreadyPaid?: number | undefined;
}

/** Holiday Accrual for a calendar month in releation to a calculation. */
export interface MonthlyHolidayAccrual {
    /** First day of month for the holiday month */
    month?: Date | undefined;
    /** Holiday accrual for this month.
Note that -1 is indication that accrual should not be updated for this particylar month.
There is no possiblity for negative accrual. */
    daysAccrued?: number | undefined;
    /** Number of absence days used in the calculation. */
    absencesDays?: number | undefined;
    /** Work days in determining the accrual for the month in 14 days rule. */
    workDays?: number | undefined;
    /** Work hours in determining the accrual fot the month in 35 hour rule. */
    workHours?: number | undefined;
}

/** Basic information about the taxcard: This object has the information printed in SalarySlip etc. but not the full salaries paid to the taxcard etc. */
export interface TaxcardSnapshot {
    /** Year that the tax card is valid for. Typically this means from February of this year to January of the following. */
    forYear: number;
    /** Validity for the taxcard as expressed in the card.
Note that the end date may not be reliable if new taxcard has replaced this one. */
    validity?: DateRange | undefined;
    /** Tax percent as percent. I.e. for 50% set 50, not 0.5. */
    taxPercent?: number | undefined;
    /** Income up to which the TaxPercent can be used.
Any income above the limit is taxed with ExcessTaxPercent. */
    incomeLimit?: number | undefined;
    /** Cumulative income on the taxcard - including this calculation.
Note that with shared taxcards, this may include income from other employers. */
    cumulativeIncome?: number | undefined;
    /** Tax percentage that is used in calculating the widthholding tax for the part of income above the IncomeLimit.
This is percent. I.e. for 50% set 50, not 0.5. */
    taxPercent2?: number | undefined;
    /** A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created. */
    taxPercentMin?: number | undefined;
    /** TaxPercentMin set by owner of the card.
This overrides the tax percent min set by the taxcard sharer. */
    taxPercentMinOwned?: number | undefined;
    /** The income type of the taxacard if fetched from the tax authorities taxcard API. */
    incomeType?: TaxcardApiIncomeType | undefined;
    /** Type of the taxcard as of 2019, when the taxcards logic was simplified by the Finnish tazx authorities. */
    kind?: TaxcardKind | undefined;
    /** Uri to the file copy of the tax card. 
Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results. */
    fileUri?: string | undefined;
    /** Uri to the preview image of the tax card. 
Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results. */
    previewUri?: string | undefined;
    /** Explicit value of when the item was last checked. At the moment, updated in API fetches only, but may be used later for other checks.
Undefined value is 1.1.2000 */
    lastChecked?: Date | undefined;
}

/** For VAT breakdown of a receipt (ALV-erittely) represents a single VAT rate and the revenue and tax with that rate. */
export interface VatEntry {
    /** Tax amount of specific VAT rate in euro.
This value is mandatory, if the collection of VatEntries contains more than one item. */
    tax?: number | undefined;
    /** Applied VAT rate. This is always mandatory. */
    vatRate?: VatRate | undefined;
    /** Tax as percent of Net sales (0-1). Currently just informative, but may later be used for Custom non-standard VAT rates. */
    taxPercent?: number | undefined;
    /** Gross sales for specific VAT rate including the tax (VAT).
This value is mandatory, if the collection of VatEntries contains more than one item. */
    gross?: number | undefined;
    /** Net sales for specific VAT rate excluding the tax (VAT).
This value is mandatory, if the collection of VatEntries contains more than one item. */
    net?: number | undefined;
}

/** Reporting details to Incomes registry (Tulorekisteri). */
export interface IrDetails {
    /** The number code in Incomes Register. */
    code?: number | undefined;
    /** Boolean flags that can be set on transaction. */
    flags?: IrFlags[] | undefined;
    /** Defines the exceptions to Insurance / Sidecost defaults that are set by the row type. */
    insuranceExceptions?: IrInsuranceExceptions[] | undefined;
    /** Daily allowance code. */
    dailyAllowance?: AllowanceCode[] | undefined;
    /** Set this to true if meak benefit is of tax value - false if it si not.
The value should be null if the row is not mealBenefit. */
    mealBenefitIsTaxValue?: boolean | undefined;
    /** Provides the additional data needed for car benefit. */
    carBenefit?: CarBenefit | undefined;
    /** If true, report zero amount to IR. */
    noTransactionAmount?: boolean | undefined;
}

/** Details from Salaxy internal calulcation point-of-view (logic not in IR). */
export interface IrRowCalculationProperties {
    /** Grouping for reports etc. */
    grouping?: CalcGroup | undefined;
    /** Defines the behavior of the row in Salaxy calculation process. */
    behavior?: CalculationFlag[] | undefined;
}

/** Employer groups that are set on Example calculations. These will be replaced by properties from Worker / Employer */
export interface EmployerGroups {
    /** If true, the Employer is a private person.
Otherwise Company or Unknown. */
    isPrivatePerson?: boolean | undefined;
}

/** Validation errors used in API output. */
export interface ApiValidationError {
    /** Full path to Name of the property / field (Member name in JSON).
This may be null/empty for type General. */
    key?: string | undefined;
    /** High level type: Specifies the relation to object and its Member. */
    type: ApiValidationErrorType;
    /** Validation error message in the requested language. */
    msg: string;
    /** Validation error long description in the requested language. */
    description?: string | undefined;
    /** Some error providers may have a unique technical code for error or validator */
    code?: string | undefined;
}

/** Car benefit Mandatory data group, if the income type is "Car benefit". This data group may not be used with other income types. */
export interface CarBenefit {
    /** Car benefit type */
    carBenefitCode?: CarBenefitCode | undefined;
    /** Car age group */
    ageGroupCode?: AgeGroupCode | undefined;
    /** Odometer reading

The value must be greater than or equal to 0 */
    kilometers?: number | undefined;
    /** Car emissions value

The car emissions value must be greater than or equal to 0, and smaller than or
equal to 100. The car emissions value can only be reported if the payment date
or other reporting date is in 2022–2025. */
    emissionsValue?: number | undefined;
}

export interface PageResultOfCalculationListItem {
    items?: CalculationListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of calculations in the user interface. It contains all essential information of the calculation and is basis for searching, filtering and sorting. */
export interface CalculationListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: CalculationStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: CalculationData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Calculation specific business data for index. */
export interface CalculationData {
    /** A flag indicating if the requested date for the SalaryDate has been set.
If the date has been set, the value of the flag is 'SALA'. */
    requestedSalaryDate?: string | undefined;
    /** The sum that is at the end paid to the Worker:
Salary payment + expenses */
    workerPayment?: number | undefined;
    /** The total pension payment for this calculation. */
    pensionPayment?: number | undefined;
    /** The taxes that were deducted from the worker salary a paid as part of taxation. */
    taxPayment?: number | undefined;
    /** The social security payment- paid as part of taxation. */
    socialSecurityPayment?: number | undefined;
    /** Status of the calculation from the end-user point-of-view. */
    status?: CalculationStatus | undefined;
    /** Payroll id. */
    payrollId?: string | undefined;
    /** Employment id. */
    employmentId?: string | undefined;
    /** Use case uri. */
    usecaseUri?: string | undefined;
    /** The MessageThread Id, if this calculation is referred in a message thread. */
    messageThreadId?: string | undefined;
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Work start date. */
    workStartDate?: Date | undefined;
    /** Work end date. */
    workEndDate?: Date | undefined;
    /** Payment channel. */
    paymentChannel?: PaymentChannel | undefined;
    /** Taxable salary is the salary from the taxation point of view - includes some benefits. */
    totalTaxable?: number | undefined;
}

/** Document in the document flow. */
export interface DocumentFlowItem {
    /** Existing business object in the document flow. */
    item?: IApiListItem | undefined;
    /** Child items, for example invoices for the calculation. */
    children?: DocumentFlowItem[] | undefined;
}

/** Interface for the line item for search and listing results. */
export interface IApiListItem {
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed. */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Pricing partner information. */
    partner?: string | undefined;
}

/** Calculation is the most important model in the Palkkaus.fi API. We suggest you open the separately provided documentation and especially the class diagram to understand the whole model in detail. */
export interface Calculation {
    /** The employer object for this calculation.
Typically, you do not need to set this before the actual payment process. */
    employer?: CalcEmployer | undefined;
    /** The Worker (employee) that has performed the work. */
    worker?: CalcWorker | undefined;
    /** Information about the workflow and state of the calculation. */
    workflow?: CalcWorkflow | undefined;
    /** The main salary element. 
Alternatively the salary can be set in the Rows object - this will be the only way to set multiple salary rows (not yet supported). */
    salary?: Salary | undefined;
    /** Set of rows that make up the salary calculation:
Expenses, Benefits, deductions etc. Note that side costs are not rows. */
    rows?: UserDefinedRow[] | undefined;
    /** DEPRECIATED: Usecase will be replacing this functionality in a next major release.
The Framework Agreement (TES) parameters that affect the framework based side costs etc. of this calculation */
    framework?: TesParameters | undefined;
    /** A usecase for creating and editing salary calculations.
In practice, a usecase is either a user interface or a microservice that provides a salary calculation
and it may be implemented outside Salaxy.
Provides the possibility to store useacase specific data as part of calculation.
NOTE: This functionality will replace Framework property in a next major release. */
    usecase?: UsecaseData | undefined;
    /** The results of the calculation. In the API, this is a read-only object. */
    result?: CalculationResult | undefined;
    /** Information about the work that is not directly related to calculating salary and expenses. */
    info?: CalcInfo | undefined;
    /** Sharing of the calculation. This object cannot be modified directly, 
use specialized methods in Calculations service. */
    sharing?: CalculationSharing | undefined;
    /** Contains calculation specific data for accounting (both cost and financial accounting). */
    accounting?: CalculationAccounting | undefined;
    /** Worktime data that is stored as part of Salary calculation:
work days, absences, holidays and holiday accrual.
In the future may also contain relevant part of timesheet data (work hours). */
    worktime?: CalcWorktime | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Parameters that are changing yearly. This class is made for the change of the year and it is typically updated in December. It is not for recording longer history of numbers. */
export interface YearlyChangingNumbers {
    /** Year for numbers. */
    readonly year?: number | undefined;
    /** Returns yearly sidecosts. */
    readonly sideCosts?: YearlySideCosts | undefined;
    /** Returns holidays for the year. */
    holidays?: Holidays | undefined;
}

/** Encapsulates yearly side costs into one class. */
export interface YearlySideCosts {
    /** Unemployment insurance payment percent - Employer */
    readonly unemploymentEmployerPercent?: number | undefined;
    /** Unemployment insurance payment percent - Large Employer */
    readonly unemploymentHigherEmployerPercent?: number | undefined;
    /** Unemployment insurance payment percent - deducted from Worker */
    readonly unemploymentWorkerPercent?: number | undefined;
    /** Unemployment insurance payment percent for partial owner worker - deducted from Worker */
    readonly unemploymentPartialOwnerWorkerPercent?: number | undefined;
    /** Pension payment income limit per month */
    readonly tyelIncomeLimit?: number | undefined;
    /** Pension payment base percentage */
    readonly tyelBasePercent?: number | undefined;
    /** Pension payment base percentage - deducted from Worker salary */
    readonly tyelWorkerPercent?: number | undefined;
    /** Pension payment base percentage - deducted from 53-62 year old Worker */
    readonly tyel53Percent?: number | undefined;
    /** Pension contract employer six month limit */
    readonly tyelContractEmployerLimit?: number | undefined;
    /** Social Security payment for employer (SAVA-maksu) */
    readonly socSecPercent?: number | undefined;
    /** Illness Insurance care percent that is withhold from the Worker. (vakuutetun sairausvakuutusmaksu: päivärahamaksu + sairaanhoitomaksu */
    readonly illnessInsurancePercent?: number | undefined;
    /** Medical care contribution of the employee's health insurance contribution. */
    readonly healthInsuranceMedicalCareContribution?: number | undefined;
    /** Daily allowance contribution of the employee's health insurance contribution. */
    readonly healthInsuranceDailyAllowanceContribution?: number | undefined;
    /** Tax free daily allowance for full day approved by tax authorities. */
    readonly taxFreeDailyAllowance?: number | undefined;
    /** Tax free daily allowance for half day approved by tax authorities. */
    readonly taxFreeDailyHalfAllowance?: number | undefined;
    /** Tax free meal allowance approved by tax authorities. */
    readonly taxFreeMealAllowance?: number | undefined;
    /** Tax free bicycle benefit approved by tax authorities. */
    readonly taxFreeBicycleBenefit?: number | undefined;
    /** Tax free subsidised sommute benefit approved by tax authorities. */
    readonly taxFreeSubsidisedCommute?: number | undefined;
    /** Tax free milage allowance approved by tax authorities. */
    readonly taxFreeKmAllowance?: number | undefined;
    /** Union payment: Rakennusliitto, A (typical) */
    readonly unionPaymentRaksaA?: number | undefined;
    /** Union payment: Rakennusliitto, AO and TA */
    readonly unionPaymentRaksaAoTa?: number | undefined;
    /** ALV-% for the fee. */
    readonly palkkausVatPercent?: number | undefined;
    /** ALV-% for the fee. */
    readonly palkkausVatRate?: VatRate | undefined;
    /** Household deduction */
    readonly householdDeduction?: number | undefined;
    /** Household deduction */
    readonly householdDeductionExtended?: number | undefined;
    /** Household deduction max amount */
    readonly householdDeductionMaxAmount?: number | undefined;
    /** Household deduction max amount */
    readonly householdDeductionMaxAmountExtended?: number | undefined;
    /** Tax deduction categories, which extend the deduction. */
    readonly householdDeductionCategoriesExtended?: TaxDeductionWorkCategories[] | undefined;
    /** Household deduction deductible */
    readonly householdDeductionDeductible?: number | undefined;
    /** Meal benefit for catering contract */
    readonly mealBenefitCateringContract?: number | undefined;
    /** Meal benefit for institute */
    readonly mealBenefitInstitute?: number | undefined;
    /** Meal benefit for restaurant worker */
    readonly mealBenefitRestaurantWorker?: number | undefined;
    /** Meal benefit for teacher */
    readonly mealBenefitTeacher?: number | undefined;
    /** Meal ticket lower limit */
    readonly mealTicketLowerLimit?: number | undefined;
    /** Meal ticket upper limit */
    readonly mealTicketUpperLimit?: number | undefined;
    /** Taxable-% of meal ticket */
    readonly mealTicketTaxable?: number | undefined;
    /** Foreclosure: protected portion. */
    readonly protectedPortionBase?: number | undefined;
    /** Foreclosure: protected portion for each dependant. */
    readonly protectedPortionDependant?: number | undefined;
}

export interface HolidayDate {
    date?: Date | undefined;
    holiday?: Holiday | undefined;
    readonly holidayGroups?: HolidayGroup[] | undefined;
    localName?: string | undefined;
    name?: string | undefined;
}

/** Holidays for the entire year. */
export interface YearlyHolidays {
    /** Year for the holidays. */
    readonly year?: number | undefined;
    /** Holidays for the year. */
    readonly holidays?: holidays | undefined;
}

/** Data that is needed for determening PeriodRecalculationParams and thus at the end recalculating holidays and absences to a calculation. */
export interface PeriodRecalculationData {
    /** The salary calculation that should be recalculated. */
    calc?: Calculation | undefined;
    /** Holiday year with holidays that should be added as salary rows.
If not provided, holidays are not calculated. */
    holidayYear?: HolidayYear | undefined;
    /** Absences that should be deducted from monthly salary.
If not provided, absences are not calculated. */
    absences?: WorkerAbsences | undefined;
}

/** Holiday year is in Finland from April to end of march. This is the time from which the holidays for the following summer and year are determined. */
export interface HolidayYear {
    /** Year as integer. This value is required when inserting and cannot be edited later. 
Period will be set accordingly, or adjusted in case it is set below. */
    year: number;
    /** Salaxy ID of the worker. This value is required when inserting and cannot be edited later.
WorkerSnapshot is automatically updated upon save. */
    workerId?: string | undefined;
    /** The employment relation for the worker whose holidays are managed. */
    employmentId: string;
    /** The holiday period for the year: Should always be 2.5.[Year]-30.4.[Year+1] */
    period?: DateRange | undefined;
    /** Specifies how the holidays are handled.
If the Spec.Code is Undefined in Save, the contents is fetched from the current employment relation. */
    spec?: HolidaySpecificationForYear | undefined;
    /** Accrual of holidays (lomakirjanpito). */
    accrual?: HolidayAccrual | undefined;
    /** Payments related to Annual Leaves (holidays). */
    leaves?: AnnualLeaves | undefined;
    /** Basic information for the Worker. 
Automatically updated upon save based on WorkerId.
Mainly for the listings etc. */
    workerSnapshot?: Avatar | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Yearly log for Holiday accrual. */
export interface HolidayAccrual {
    /** Holiday accrual entries during the period. */
    months?: HolidayAccrualEntry[] | undefined;
    /** The period for holiday accrual.
This is also the period of the holiday year that the Worker is Employed,
i.e. it may be shorter than HolidayYear Period if the employment relation 
begins or ends within the holiday year. */
    period?: DateRange | undefined;
    /** Default accrual for months where the Accrual occurs.
When Holiday year is recalculated, this is determined either from Employment Period or AccrualFixed if set. */
    defaultAccrual?: number | undefined;
    /** Start saldo from the previous year. */
    startSaldo?: number | undefined;
    /** Total for the current year. This does not include Start saldo. */
    readonly total?: number | undefined;
    /** End saldo from the previous year. This is Total + Start Saldo. */
    readonly endSaldo?: number | undefined;
}

/** Data about the annual leaves planned and used during the holiday year. */
export interface AnnualLeaves {
    /** Planned annual leaves. */
    planned?: AnnualLeave[] | undefined;
    /** Paid or otherwise handled annual leaves.
PRELIMINARY: This property is under revision - it may be moved or renamed without being a breaking change. */
    paid?: AnnualLeavePayment[] | undefined;
}

/** Entry in the Yearly Holiday Accrual list. */
export interface HolidayAccrualEntry {
    /** Index of the month from 0-11 for easier iteration.
This is also the real identifier of the month when editing the entries through API.
Months 4-12 are index 0-8 and month 1-3 are index 9-11 */
    index?: number | undefined;
    /** First day of month for the holiday month */
    month?: Date | undefined;
    /** Days added to holiday Accrual: Typically days per month. */
    daysAccrued?: number | undefined;
    /** Source of the holiday accrual. */
    source?: HolidayAccrualSource | undefined;
    /** Identier of the calculation if Kind */
    calcId?: string | undefined;
    /** Additional information as recorded by the Employer. */
    notes?: string | undefined;
}

/** A planned annual Leave - not sure whether it will kept or is it just planned */
export interface AnnualLeave {
    /** Identifies a single leave. */
    id?: string | undefined;
    /** The planned holiday period. */
    period?: DateRange | undefined;
    /** Additional information as recorded by the Employer. */
    notes?: string | undefined;
}

/** Payment related to annual leave: holiday salary, bonus and compensation */
export interface AnnualLeavePayment {
    /** Type of the payment entry */
    kind?: AnnualLeavePaymentKind | undefined;
    /** The reference date: Typically the Paid at date.
The items are typically sorted based on this. */
    date?: Date | undefined;
    /** Days of holidays that are paid or compensated */
    holidayDays?: number | undefined;
    /** Salary that is paid for holidays */
    holidaySalary?: number | undefined;
    /** Compensation that is paid for holidays not kept. */
    holidayCompensation?: number | undefined;
    /** Bonus for either Holiday Salary or Compensation. */
    holidayBonus?: number | undefined;
    /** If the payment is defined by a calculation, stores the calculation ID. */
    calcId?: string | undefined;
    /** Identifies a single leave. */
    id?: string | undefined;
    /** The planned holiday period. */
    period?: DateRange | undefined;
    /** Additional information as recorded by the Employer. */
    notes?: string | undefined;
}

/** Represents a calendar event in iCalendar compatible way. */
export interface CalendarEvent {
    /** Type of object that stores the event recurrence.
Type of CalendarEvent is stored separately into the database and all properties can be edited.
For other types, you need edit the original object (Calculation, Payload etc.) */
    payloadType?: ApiItemType | undefined;
    /** The part of the data that provides the compliance to iCalendar VEVENT data model defined in RFC 5545, 
not including the properties that are standard in Salaxy (e.g. id/uid, createdAt etc.). */
    event?: CalendarVEvent | undefined;
    /** Occurence information based on the event. */
    occurenceInfo?: CalendarEventOccurenceInfo | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Stores the calendar even data that is compatible with RFC 5545 VEVENT component. */
export interface CalendarVEvent {
    /** Unique identifier: This is the ID of the parent. */
    uid?: string | undefined;
    /** Timestamp for the item: This may be important for processing of items to some calendar items, hence stored separately from other dates. */
    timeStamp?: Date | undefined;
    /** The start date/time of the event.
NOTE, unlike in iCalendar, in our model Start is always required and then either End or Duration is used to determine the duration. */
    start?: string | undefined;
    /** The end date/time of the event.
Note that if Duration is set, it will override this property whenever saved or recalculated. */
    end?: string | undefined;
    /** The duration of the event. 
Note that if set to something else than null / zero, this property will always override the End date/datetime. */
    duration?: string | undefined;
    /** Returns true if the event is an all-day event: Start and End are dates ("yyyy-MM-dd"), not date-times ("yyyy-MM-ddThh:mm:ss"). */
    isAllDay?: boolean | undefined;
    /** The event status as defined in https://tools.ietf.org/html/rfc5545#section-3.8.1.11
or in Salaxy process. Other statuses default to undefined. */
    status?: CalendarEventStatus | undefined;
    /** Short, one-line summary: Text that is typically shown in calendar views. */
    summary?: string | undefined;
    /** Categorization of the event */
    categories?: string[] | undefined;
    /** The attendees for the event. */
    attendees?: CalendarAttendee[] | undefined;
    /** The Alarms (notifications) and other Actions (scripts) related to the event. */
    actions?: CalendarAction[] | undefined;
    /** Priority is specified as an integer in the range 0 to 9.
A value of 0 specifies an undefined priority.
A value of 1 is the highest priority, 1-4=HIGH, 5=MEDIUM/Normal and 6-9=LOW.
Negative values may be used by admin functions (not through API) to set priority overrides. */
    priority?: number | undefined;
    /** The full description text. */
    description?: string | undefined;
    /** Attachments for calendar events. */
    attachments?: CalendarAttachment[] | undefined;
    /** The recurrence rules as specified in iCalendar: https://tools.ietf.org/html/rfc5545#section-3.3.10 and https://tools.ietf.org/html/rfc5545#section-3.8.5.3
E.g. "FREQ=DAILY;INTERVAL=10;COUNT=5" */
    recurrenceRules?: string[] | undefined;
    /** Constant recurrence dates specified by RDATE in iCalendar */
    recurrenceDates?: Date[] | undefined;
    /** Exception dates specified by EXDATE in iCalendar */
    exceptionDates?: Date[] | undefined;
    /** When imported from external system, this contains the original Uid. Null for items created by Salaxy. */
    originalUid?: string | undefined;
}

/** Information about the occurences of the calendar event when the event was last stored into the storage. */
export interface CalendarEventOccurenceInfo {
    /** If true, the event is a recurring */
    isRecurring?: boolean | undefined;
    /** First occurence of the event */
    occurencesStart?: string | undefined;
    /** Last occurence of the event. Please note that only max 1 year from today is calculated. */
    occurencesEnd?: string | undefined;
    /** Next occurences (max 100) */
    next?: CalendarOccurence[] | undefined;
    /** Dictionary of executed actions. */
    executedActions?: { [key: string]: string; } | undefined;
}

/** Describes the calendar attendees in an avatar-visualization compatible way. */
export interface CalendarAttendee {
    /** Account or Credentials uri IF the attendee is a Palkkaus.fi account. Otherwise null. */
    uri?: string | undefined;
    /** The display name of the attendee (CN) */
    displayName?: string | undefined;
    /** The E-mail address of the person */
    email?: string | undefined;
    /** Entity type: person/company. In calendar attendees, defaults to Person. */
    entityType?: LegalEntityType | undefined;
    /** Type of the Avatar picture. */
    pictureType?: AvatarPictureType | undefined;
    /** Color - currently only used by type Icon */
    color?: string | undefined;
    /** Initials - used by PictureType Icon */
    initials?: string | undefined;
    /** URL of the picture if specified as picture (null in a case of type Icon) */
    url?: string | undefined;
}

/** Salaxy calendar action is an extension to iCalendar Alarms: It supports the standard alarms: Display, Email and Audio, but also salaxy action scripts. */
export interface CalendarAction {
    /** Unique identifier in the Salaxy context. */
    id?: string | undefined;
    /** Action type */
    type?: CalendarActionType | undefined;
    /** Summary text for the action. Subject for E-mail */
    summary?: string | undefined;
    /** Description text for the action. Body text for Email, Notification message for Display. */
    description?: string | undefined;
    /** Attendees are E-mail receivers for Email Alert and potentially Display notifications in the future. 
Script actions may also later use them when credentials, accounts or similar are needed fro execution. */
    attendees?: CalendarAttendee[] | undefined;
    /** Attachment files for the action. Attachments for E-mail. */
    attachments?: CalendarAttachment[] | undefined;
    /** The duration trigger. Either this or TriggerDateTime must specified. */
    triggerDuration?: string | undefined;
    /** The fixed date-time trigger. Only used if, Duration is not available.
NOTE that Salaxy implements this feature a bit differently than rfc-5545: The spec says that for a repeating event, 
the alarm should trigger only once (+repeat), but current Salaxy implementation would trigger the alarm the amount of items. */
    triggerDateTime?: Date | undefined;
    /** If specified, the action repeats number of times (in addition to the initial trigger) specified in this parameter with RepeatDuration values.
If Repeat is more than 0, also RepeatDuration must be specified. */
    repeat?: number | undefined;
    /** Time between the repeats aftern the initial repeat. */
    repeatDuration?: string | undefined;
}

/** Attachment for calendar event or Action/Alarm. */
export interface CalendarAttachment {
    /** URI of the attachment. This is the default way of specifying attachments.
TODO: Check if the Uri data type works in API. If not, switch to string. */
    uri?: string | undefined;
    /** Attachment as inline data. Encoded with ValueEncoding. */
    data?: string | undefined;
    /** The file format type / mime type (e.g. "text/plain"). */
    formatType?: string | undefined;
    /** Encoding for the inline data.
TODO: Consider making read-only. */
    valueEncoding?: string | undefined;
}

/** Occurence of a calendar event */
export interface CalendarOccurence {
    /** Identifier of the event that produces this occurence */
    eventId?: string | undefined;
    /** Summary text for occurence. Max 255 characters. */
    summary?: string | undefined;
    /** Categorization of the event */
    categories?: string[] | undefined;
    /** Indicates that the time of the recurrence is irrelevant: Just display the date.
NOTE that in Occurences, when IsAllDay=true, the End is the date when occurence ends (typically same as Start), not the next day as in VEVENT. */
    isAllDay?: boolean | undefined;
    /** If true, the occurence is based on a recurrence rule. */
    isRecurring?: boolean | undefined;
    /** The start date/time of the event as ISO 8601 Date ("yyyy-MM-dd") or DateTime ("s"/"yyyy-MM-ddThh:mm:ss") without timezone.
Value should be Date when IsAllDay is true and DateTime, when it is false. */
    start?: string | undefined;
    /** The end date/time of the event as ISO 8601 Date ("yyyy-MM-dd") or DateTime ("s"/"yyyy-MM-ddThh:mm:ss") without timezone.
Value should be Date when IsAllDay is true and DateTime, when it is false. */
    end?: string | undefined;
    /** The duration of the event. */
    duration?: string | undefined;
    /** Collection of action occurences for this event occurence. */
    actions?: CalendarActionOccurence[] | undefined;
}

/** Occurence of an Action (Alarm in iCalendar) within a Calendar occurence. */
export interface CalendarActionOccurence {
    /** Identifier of the event that produces this action occurence */
    eventId?: string | undefined;
    /** Identifier of the action that produces this occurence */
    actionId?: string | undefined;
    /** Action type */
    type?: CalendarActionType | undefined;
    /** The date/date-time this action is executed. */
    start?: Date | undefined;
    /** Indicates that the time of the recurrence (start) is irrelevant: Just display the date. */
    isAllDay?: boolean | undefined;
    /** Summary text for occurence. Max 255 characters. */
    summary?: string | undefined;
}

export interface PageResultOfCalendarEventListItem {
    items?: CalendarEventListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of calendar events in the search index. */
export interface CalendarEventListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: CalendarEventStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: CalendarEventData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Calendar event specific business data for index. */
export interface CalendarEventData {
    /** The start date/time of the event. */
    start?: string | undefined;
    /** The end date/time of the event. */
    end?: string | undefined;
    /** The duration of the event. */
    duration?: string | undefined;
    /** Recurrence rules as a CRLF separted string. */
    rRules?: string | undefined;
    /** Returns true if the event is a recurring event: RRules or Recurrence dates.. */
    isRecurring?: boolean | undefined;
    /** Returns true if the event is an all-day event. */
    isAllDay?: boolean | undefined;
    /** Priority is specified as an integer in the range 0 to 9.
A value of 0 specifies an undefined priority.
A value of 1 is the highest priority, 1-4=HIGH, 5=MEDIUM/Normal and 6-9=LOW.
Negative values may be used by admin functions (not through API) to set priority overrides. */
    priority?: number | undefined;
    /** Status as string */
    status?: string | undefined;
}

/** Customer invoice is an invoice from Palkkaus / Salaxy to Customer / Partner: Invoice for the usage of service. */
export interface CustomerInvoice {
    /** Header-level information about the invoice. */
    info?: CustomerInvoiceInfo | undefined;
    /** The data that is the bases for invoicing e.g. calculations, monthly active users etc. */
    bases?: CustomerInvoicingBases[] | undefined;
    /** If not null, contains a final invoice in Laskupiste format. */
    invoice?: LaskupisteInvoice | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Header level data for the customer invoices. */
export interface CustomerInvoiceInfo {
    /** Status of this invoice entry. */
    status?: CustomerInvoiceStatus | undefined;
    /** Count of companies (end-customers) in this invoice. */
    companyCount?: number | undefined;
}

/** Represents the data that is the bases for invoicing e.g. calculations, monthly active users etc. */
export interface CustomerInvoicingBases {
    id?: string | undefined;
    date?: string | undefined;
    product?: string | undefined;
    companyId?: string | undefined;
    partnerId?: string | undefined;
    amount?: number | undefined;
    meta?: { [key: string]: any; } | undefined;
}

export interface LaskupisteInvoice {
    id?: number | undefined;
    customerId?: number | undefined;
    currency?: string | undefined;
    orderedDate?: string | undefined;
    invoiceNumber?: number | undefined;
    invoiceName?: string | undefined;
    rows?: LaskupisteInvoiceRow[] | undefined;
    invoiceState?: string | undefined;
}

/** Single invoice row for Laskupiste */
export interface LaskupisteInvoiceRow {
    productId?: number | undefined;
    name?: string | undefined;
    amount?: number | undefined;
    amountType?: string | undefined;
    unitPrice?: number | undefined;
    vatPercent?: number | undefined;
    specifier?: string | undefined;
    specifierType?: string | undefined;
    meta?: { [key: string]: any; } | undefined;
}

export interface PageResultOfCustomerInvoiceListItem {
    items?: CustomerInvoiceListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of Customer invoices. Customer invoices are service invoices from Palkkaus / Salaxy to customers and partners. */
export interface CustomerInvoiceListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: CustomerInvoiceStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: CustomerInvoiceListItemData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Customer Invoice specific business data for index. */
export interface CustomerInvoiceListItemData {
    /** Number of end-companies in the invoice. */
    companyCount?: number | undefined;
}

/** Dataset models some arbitrary data that is store in storage. This is any data that is not "strongly modeled", for example: Imports from / exports to external systems, reports, data analyses and control data for batch processes. */
export interface Dataset {
    /** Editable metadata info about a dataset. */
    info?: DatasetInfo | undefined;
    /** The payload of the dataset: The objects or tables that are stored. */
    data?: DatasetDataObject[] | undefined;
    /** Usecase is data related to the source and processing of the Employment data outside the Salaxy backend service / system.
Typically, Usecase data would be processed by an external system that has originally created the 
Employment Relation (Worker / Employee in many systems). E.g. expenses system, hourly reporting system. */
    usecase?: UsecaseData | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Editable metadata info about a dataset. */
export interface DatasetInfo {
    /** Status of the dataset. */
    status?: DatasetStatus | undefined;
    /** End-user friendly label that describes the dataset in listings etc. */
    label?: string | undefined;
    /** The logical type / purpose of the dataset. */
    type?: DatasetType | undefined;
}

export interface DatasetDataObject {
    /** Technical name (unique key) for the data object */
    name?: string | undefined;
    /** User friendly label. */
    label?: string | undefined;
    /** Schema document that contains the schema. */
    schemaDoc?: string | undefined;
    /** Identifier / path to the schema that defines the data structure for the content. */
    schema?: string | undefined;
    /** If true, the schema should be interpreted as an array (display in table by default). */
    isArray?: boolean | undefined;
    /** Data payload / content of the object. */
    content?: any[] | undefined;
    /** Potential validation data for content.
Note that in many scenarios, validation may not be done / may not be serialized to storage so this property may be null. */
    validation?: ApiValidation | undefined;
    /** Defines one or multiple views for the dataset object. Typically this is fields to include / exclude from
the views and definitions on how the views should be formatted / edited.
First view is considered the default view and some UI's will only support that one view. */
    views?: DatasetView[] | undefined;
}

/** Defines a view, typically an array view, for a dataset. */
export interface DatasetView {
    /** Properties / columns that should be shown in the view.
These may be either simple column names or property paths (e.g. "personalInfo.avatar.sortableName") for hierarchical objects. */
    include?: string[] | undefined;
    /** Properties / columns that should be shown excluded from the view.
Exclusion is used only if Include is not set and it is applied to the "default view":
Default view depends on the renderer, but it is typically just the first level of a hierarchical view,
so exclude values are typically just simple column / property names, not property paths. */
    exclude?: string[] | undefined;
}

export interface PageResultOfDatasetListItem {
    items?: DatasetListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of datasets. */
export interface DatasetListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: DatasetStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: DatasetListItemData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Dataset specific business data for index. */
export interface DatasetListItemData {
    /** Key for the usecase based on which it is resolved. 
Later, this may resolve to a user interface, microservice or a to manifest registering one.
For now, just use a unique string starting with a domain you own. */
    usecaseUri?: string | undefined;
}

/** Employment relation: The relation between Employer and Worker as well as the personal info of the worker. */
export interface Employment {
    /** General information about the Employment relation. */
    info?: EmploymentRelationInfo | undefined;
    /** Describes the work that is being performed in this Employment Relation. */
    work?: WorkDescription | undefined;
    /** Contains values that are needed when creating an employment, but where changing is restricted in the future:
E.g. names and personalId are required when creating a new employment, but once a calculation is created (or at least paid),
editing of theses is no longer possible. See the editing rules for individual properties. */
    identity?: EmploymentIdentity | undefined;
    /** Properties of the employment for international situations: Working abroad or foreign worker. */
    international?: EmploymentRelationInternational | undefined;
    /** Contacts stored in the employment. */
    contacts?: ContactAdvanced[] | undefined;
    /** Usecase is data related to the source and processing of the Employment data outside the Salaxy backend service / system.
Typically, Usecase data would be processed by an external system that has originally created the 
Employment Relation (Worker / Employee in many systems). E.g. expenses system, hourly reporting system. */
    usecase?: UsecaseData | undefined;
    /** Defines how the holidays are specified to this Worker. */
    holidays?: HolidaySpecification | undefined;
    /** Contains read-only personal information for the worker typically managed by the Worker account:
Names, personal ID and contact. Currently, this data is edited in Person or WorkerAccount containers, not in the employment relation. */
    personalInfo?: AccountInIndex | undefined;
    /** If true, the Worker has registered and maintains his / her own personal info.
If false, the Worker account is created and still maintained by the Employer. */
    isRegistered?: boolean | undefined;
    /** Workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** General information about the Employment relation. */
export interface EmploymentRelationInfo {
    /** The Account ID of the Worker if Worker */
    workerAccountId?: string | undefined;
    /** Identifier in a source system. Used in imports etc. */
    sourceId?: string | undefined;
    /** User friendly employment relation type that is used to set other more technical types and Incomes Registry properties. */
    type?: EmploymentRelationType | undefined;
    /** The bank account number for salary payment. */
    ibanNumber?: string | undefined;
    /** Type of additional income earner data by National Incomer Register classification . If several types apply, all of them should be selected. */
    irIncomeEarnerTypes?: IncomeEarnerType[] | undefined;
    /** Type for the pension insurance. */
    pensionCalculation?: PensionCalculation | undefined;
    /** Rules (e.g. effect of monthly lower limit) for pension calculation. */
    pensionRule?: PensionRule | undefined;
    /** The id of the pension company. */
    pensionCompany?: PensionCompany | undefined;
    /** The pension contract number. */
    pensionContractNumber?: string | undefined;
    /** The id of the insurance company. */
    insuranceCompany?: InsuranceCompany | undefined;
    /** The accident insurance contract number. */
    insuranceContractNumber?: string | undefined;
    /** Taxcard type from the employment point of view. */
    taxcard?: EmploymentRelationTaxcard | undefined;
    /** Status of this employment relationship */
    status?: EmploymentRelationStatus | undefined;
    /** Worker's preferred salary payment method: bank account, external etc. */
    salaryPaymentMethod?: EmploymentRelationSalaryPaymentMethod | undefined;
    /** Start date of the Employment Relation. */
    startDate?: Date | undefined;
    /** End date of the Employment Relation. */
    endDate?: Date | undefined;
    /** Duration of the employment. If true, the employment relation is for a fixed term.
Otherwise (which is the default) the employment relation continues until further notice. */
    isFixedTerm?: boolean | undefined;
    /** Indicates that the employment relation has been terminated.
Saving with this status also makes the employment relation Archived. */
    isTerminated?: boolean | undefined;
    /** Employment registration code for Incomes Registry. */
    employmentRegCode?: string | undefined;
}

/** Describes the work that is being performed - mainly for Employment relation purposes. */
export interface WorkDescription {
    /** Free text description of the work that is being performed. */
    description?: string | undefined;
    /** Occupation classification, used at least for Accident insurance purposes, but may be used for other reporting. 
For Finnish Salaries use the Statistics Finland 
"Classification of Occupations 2010" (TK10): https://www.stat.fi/meta/luokitukset/ammatti/017-2018-05-15/index_en.html */
    occupationCode?: string | undefined;
    /** Secondary occupation classification. Some earnings payment reports may require two occupation codes. */
    occupationCode2?: string | undefined;
    /** Contains default calculation rows for the worker.
Typically used for setting for example monthly salary or hourly salary price for workers. */
    salaryDefaults?: UserDefinedRow[] | undefined;
    /** Default bases for wage. */
    wageBasis?: WageBasis | undefined;
    /** Number of hours per month defined in the employment contract. */
    monthlyHours?: number | undefined;
    /** Contains calculation specific data for accounting (both cost and financial accounting). */
    accounting?: CalculationAccounting | undefined;
}

/** Contains values that are needed when creating an employment, but where changing is restricted in the future: E.g. names and personalId are required when creating a new employment, but once a calculation is created (or at least paid), editing of theses is no longer possible. See the editing rules for individual properties. */
export interface EmploymentIdentity {
    /** First name of the Worker. Value is required when creating a new employment, it cannot be modified after initial create:
Instead you should just delete the Worker (only allowed if no paid salaries etc.) and create a new one. */
    firstName?: string | undefined;
    /** Last name of the worker. Editing rules are the same as with FirstName. */
    lastName?: string | undefined;
    /** Personal ID (hetu) of the worker (currently required). Editing rules are the same as with FirstName. */
    personalId?: string | undefined;
    /** Avatar picture. If set, this is used in avatar instead of Initials (automatic FirstName/LastName) and color.
May be changed until the Worker registers to the service. After this, the Worker can upload their own image or choose to remove the image. */
    avatarImg?: string | undefined;
    /** Avatar color for visual icon together with initials. Use web compatible rgb values, e.g. "#FF00FF" or "rgb(255, 0, 255)".
Editing rules are the same as with AvatarImg. */
    color?: string | undefined;
    /** Language of the user in user interfaces and print-outs (most significantly the salary slip).
Editing rules are the same as with AvatarImg. */
    language?: Language | undefined;
}

/** Properties of the employment for international situations: Working abroad or foreign worker. */
export interface EmploymentRelationInternational {
    /** Country of residence for non-recident of Finland (rajatusti verovelvollinen) */
    country?: Country | undefined;
    /** Identifier for non-recident of Finland in the country of residence.
Type of the identifier is specified in IdType. */
    foreignId?: string | undefined;
    /** Type of ForeignId. */
    idType?: InternationalIdentifier | undefined;
    /** The non-resident taxcard (or percent without taxcard) that is used if the taxcard in Employment.Info.Taxcard is set to TaxAtSource. */
    taxAtSource?: TaxAtSource | undefined;
    /** Types of social security for international situations. */
    socialSecurity?: InternationalSocialSecurityType | undefined;
    /** Exceptions to standard social security cases. */
    socialSecurityExceptions?: InternationalSocialSecurityException[] | undefined;
}

/** Advanced contact information with strongly typed country and type information. */
export interface ContactAdvanced {
    /** Type of contact when specification allows several contacts. */
    type?: ContactType | undefined;
    /** Contact e-mail address. Always lower invariant, trimmed and empty string set to null. */
    email?: string | undefined;
    /** Telephone number */
    telephone?: string | undefined;
    /** Street address */
    street?: string | undefined;
    /** Postal code */
    postalCode?: string | undefined;
    /** City or community (postitoimipaikka) */
    city?: string | undefined;
    /** Country as defined as */
    country?: Country | undefined;
    /** Name of the country as free text if Country is Other. */
    countryOtherName?: string | undefined;
}

/** Specifies how the holidays are handled for this Worker. */
export interface HolidaySpecification {
    /** Defines how the holidays are handled for the worker. */
    code?: HolidayCode | undefined;
    /** Defines the number of holidays that the worker is entitled per month worked.
If the value is set to 0 (default), the number is 2 for first year and 2,5 thereafter as defined in the law.
To actually se the daysPerMonth to zero, use code value other than Permanent14Days or Permanent35Hours. */
    accrualFixed?: number | undefined;
    /** Holiday compensation as percent of salary (11.5% is 0.115) */
    compensation?: number | undefined;
    /** Method for paying holiday bonus in this salary calculation. */
    bonusMethod?: HolidayBonusPaymentMethod | undefined;
    /** Holiday bonus for the worker (lomaraha, lomaltapaluuraha).
Typically 0.5 for 50%. */
    bonus?: number | undefined;
}

/** The information about tax at source, typically from  non-resident taxcard (lähdeverokortti) for non-residents. */
export interface TaxAtSource {
    /** Tax percent. As of writing, this is 35% by default and 15% for athletes and performingg artists,
but the percentage may change and bust be checked from the taxcard (or legistlattion if there is no card available). */
    percent?: number | undefined;
    /** Monthly deduction (e.g. 510 €/month) if one can be used for this card. */
    deductionMonthly?: number | undefined;
    /** Daily deduction (e.g. 17 €/day) if one can be used for this card. */
    deductionDaily?: number | undefined;
}

export interface PageResultOfEmploymentListItem {
    items?: EmploymentListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of employment relations in the user interface. */
export interface EmploymentListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: EmploymentRelationStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: EmploymentData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Employment specific business data for index. */
export interface EmploymentData {
    /** Type for the pension insurance. */
    pensionCalculation?: PensionCalculation | undefined;
    /** Taxcard type from the employment point of view. */
    taxcard?: EmploymentRelationTaxcard | undefined;
    /** Type of the employment relation */
    type?: EmploymentRelationType | undefined;
    /** Start date of the Employment Relation. */
    startDate?: Date | undefined;
    /** End date of the Employment Relation. */
    endDate?: Date | undefined;
    /** Duration of the employment. If true, the employment relation is for a fixed term.
Otherwise (which is the default) the employment relation continues until further notice. */
    isFixedTerm?: boolean | undefined;
    /** Indicates that the employment relation has been terminated.
This is the value stored in the database as opposed to */
    isTerminated?: boolean | undefined;
    /** The search logic returns the active state of the employment here in relation to queried date (or today).
Note that you cannot query based on this dynamic parameter: All values in the search index are null. */
    isActive?: boolean | undefined;
}

/** Employing relation info for the worker. */
export interface EmployingRelation {
    /** Employer avatar */
    employer?: AccountInIndex | undefined;
    /** Contact information for the report. Typically the employer, but may be something else.
By desing, the contact information is not filled in for Private Person employers. */
    contact?: Contact | undefined;
    /** Relevant and public employer settings. */
    settings?: EmployingRelationSettings | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Settings for the employing relation. */
export interface EmployingRelationSettings {
    /** Cost accounting settings for employing relation. */
    costAccounting?: EmployingRelationCostAccounting | undefined;
}

/** Cost accounting settings in the employing relation. */
export interface EmployingRelationCostAccounting {
    /** Cost accounting dimensions */
    dimensions?: CostAccountingDimensionDefinition[] | undefined;
}

/** Cost accounting dimension definition. */
export interface CostAccountingDimensionDefinition {
    /** Id for the dimension. */
    id?: string | undefined;
    /** Default label for the dimension entry. */
    label?: string | undefined;
    /** Hierarchial object containing selection options for dimension values. */
    options?: CostAccountingDimensionOption[] | undefined;
    /** If true, multiple values can be set to the dimension and the costs are shared between dimension values. */
    allowCostSharing?: boolean | undefined;
    /** Defines the visible scopes of the dimension. For example, Scope.Row shows the dimension on row level only. */
    scope?: CostAccountingDimensionScope | undefined;
}

/** Selectable cost accounting dimension value. */
export interface CostAccountingDimensionOption {
    /** Value for the option. */
    value?: string | undefined;
    /** Description of the value. */
    text?: string | undefined;
    /** For option hiearchies, list of child options. */
    children?: CostAccountingDimensionOption[] | undefined;
    /** Defines the visible scopes of the dimension values. For example, Scope.Row shows the dimension value on row level only.
The default is, that the scope is not defined and that the value is visible everywhere. */
    scope?: CostAccountingDimensionScope | undefined;
}

/** The BlobFile stores metadata about miscellaneous BLOB-files that are stored to the system. For example Receipts and Authorizations. */
export interface BlobFile {
    id?: string | undefined;
    /** The logical container - first level folder for the file. */
    container?: BlobRepository | undefined;
    /** Strongly typed logical type of the file. For user files, this is a sub folder. */
    type?: BlobFileType | undefined;
    /** File type (mime type etc.) based on the ending of the file name.
Null for folders. */
    readonly fileType?: FileType | undefined;
    /** A user friendly name that can be used in listings.
In the upload scenarios this is usually the original file name when uploaded. 
It is not necessarily unique. No path information */
    userFriendlyName?: string | undefined;
    /** Technical file name in storage.  In practical terms, this is the relative path
excluding the container part "/[container]/". 
I.e. this property is without the starting slash "/". 
It must be unique and is used for Uri.
For user files this is constructed "[Username]/[Type]/[UniqueFileName].[xxx]" */
    filePath?: string | undefined;
    /** Full unique URI in the storage */
    blobUri?: string | undefined;
    /** If created, contains uri to a PNG image for preview purposes. */
    previewUri?: string | undefined;
    updatedAt?: Date | undefined;
    /** The length of the file in bytes. */
    length?: number | undefined;
    /** If true, this is a collection (folder in file system) */
    isCollection?: boolean | undefined;
    metadata?: BlobFileMetadata | undefined;
    /** The workflow data for manual editing and approval purposes. */
    workflowData?: WorkflowData | undefined;
}

export interface FileType {
    extension?: string | undefined;
    mimeType?: string | undefined;
    isImage?: boolean | undefined;
    readonly isText?: boolean | undefined;
}

/** Metadata related to blob files as a strongly typed object. */
export interface BlobFileMetadata {
    /** Whether the document is digitally signed (or manually checked as being signed).
At the time of writing, this is used only for AuthorizationPdf documents. */
    isSigned?: boolean | undefined;
    /** Logical date for the file. E.g. first of the month for a monthly report. */
    logicalDate?: string | undefined;
    /** Subtype is internal typing within a BlobFileType. This may or may not be a sub-folder.
There is no enumeration on File level - there may be one under services specific to one BlobFileType. */
    subType?: string | undefined;
    /** Avatar object related to the report.
For example for the salary payments this is the other party (employer or worker) */
    avatar?: Avatar | undefined;
    /** Identifier of the original calculation etc. business object. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation. */
    payment?: number | undefined;
    /** Arbitrary metadata. */
    data?: { [key: string]: any; } | undefined;
}

export interface PageResultOfFileListItem {
    items?: FileListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of reports in the user interface. It contains all essential information of the report and is basis for searching, filtering and sorting. */
export interface FileListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: FileData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Report specific business data for index. */
export interface FileData {
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Number of workers in the report. */
    workerCount?: number | undefined;
    /** Number of calculations in the report. */
    calculationCount?: number | undefined;
    /** Official id for the report. */
    officialId?: string | undefined;
    /** A user friendly name that can be used in listings.
In the upload scenarios this is usually the original file name when uploaded. 
It is not necessarily unique. No path information */
    userFriendlyName?: string | undefined;
    /** Technical file name in storage.  In practical terms, this is the relative path
excluding the container part "/[container]/". 
I.e. this property is without the starting slash "/". 
It must be unique and is used for Uri.
For user files this is constructed "[Username]/[Type]/[UniqueFileName].[xxx]" */
    filePath?: string | undefined;
}

/** Household yearly data. */
export interface HouseholdYear {
    /** Year for the salaries */
    year?: number | undefined;
    /** Status of the household deduction process. */
    processingStatus?: HouseholdYearProcessingStatus | undefined;
    /** Status of user feedback. */
    status?: HouseholdYearStatus | undefined;
    /** Free text from the account holder to Salaxy backoffice. */
    userFeedbackText?: string | undefined;
    /** Time when the feedback was given. */
    userFeedbackTime?: Date | undefined;
    /** Amount of accident insurance paid during this year as reported by the user
This is relevant for households for Household deduction: 
This amount can be deducted from the yearly salaries and needs to be reported to tax authorities. */
    insuranceAmount?: number | undefined;
    /** Name of the spouse with who the household deduction is split */
    spouseName?: string | undefined;
    /** Finnish Personal ID of the spouse with who the household deduction is split */
    spousePersonalId?: string | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

export interface PageResultOfHouseholdYearListItem {
    items?: HouseholdYearListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents household yearly deduction data. */
export interface HouseholdYearListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: HouseholdYearStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: HouseholdYearData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Household year specific business data for index. */
export interface HouseholdYearData {
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
}

/** Result item of the EInvoice address query. */
export interface EInvoiceAddress {
    /** Name for the company. */
    receiverName?: string | undefined;
    /** Official id of the company. */
    receiverOfficialId?: string | undefined;
    /** Receiver EInvoice address of company. */
    receiver?: string | undefined;
    /** Intermediator id for this receiver address. */
    intermediator?: string | undefined;
    /** Intermediator name for this receiver address. */
    intermediatorName?: string | undefined;
}

/** API worker import object. The API uses this object for mass operations for creating or assuring the worker employment relations in the system. */
export interface WorkerImport {
    /** Company number in the the trade register (Y-tunnus). 
Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
Also, the international VAT format is allowed: FI12345678
This field is optional and defaults to the company number of the current account. */
    officialId?: string | undefined;
    /** Additional parameters for import. Defaults to string. */
    parameters?: { [key: string]: any; } | undefined;
    /** Item for import. */
    item?: WorkerAccount | undefined;
    /** Validation for the import */
    validation?: ApiValidation | undefined;
    /** Result object of the import. */
    result?: ApiImportResultOfString | undefined;
}

/** Account data that is relevant for a Worker. */
export interface WorkerAccount {
    /** Tha bank account number of the Worker - in Iban format. */
    ibanNumber?: string | undefined;
    /** If created (and still owned) by an employer, this is the AccountOwnerId of the employer who created this account. */
    employerId?: string | undefined;
    /** The Person ID of the worker if known. */
    officialPersonId?: string | undefined;
    /** Age range that is relevant to workers salary calculation and/or employment.
Set this especially if OfficialPersonId is not set. 
If OfficialPersonId is valid, this property is always set based on it. */
    ageRange?: AgeRange | undefined;
    /** Current Employment Relation: The data that is owned by the Employer about the Worker 
even if the Worker has registered and created an account.
If employer has several Employment Relations, this is the one that is marked as Primary. */
    employment?: WorkerAccountEmployment | undefined;
    /** Provides validation errors currently only in Save operations,
but potentially in the future also in detail/list views. */
    validation?: ApiValidation | undefined;
    /** The unique id for the employment. This does not change within one employment. */
    employmentId?: string | undefined;
    /** Entity type of the account.
Type PersonCreatedByEmployer means that the Worker has not yet signed into the system and there may be multiple instances of the same logical person (Official ID) - one for each employer. */
    entityType?: LegalEntityType | undefined;
    /** If true the object Account is and Employer account - it has the EmployerInfo object */
    isEmployer?: boolean | undefined;
    /** If true the object Account is and Worker account - it has the WorkerInfo object */
    isWorker?: boolean | undefined;
    /** If true, the account has been verified. Typically this means a digitally signed contract.
This means that the account also has an Identity object.
However, as the Identity object contains confidential information, it is not necessarily present in all method calls. */
    isVerified?: boolean | undefined;
    /** Avatar is the visual representation of the Account. */
    avatar?: Avatar | undefined;
    /** Contact information for the Account. */
    contact?: Contact | undefined;
    /** Language of the person/company. */
    language?: Language | undefined;
    /** Service model for the account. */
    serviceModelId?: string | undefined;
    /** Workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Result of the import. Both status and possible item are returned. */
export interface ApiImportResultOfString {
    /** Status of the import */
    status?: ApiImportStatus | undefined;
    /** Result object of the import. Defaults to id of the imported object. */
    item?: string | undefined;
}

/** Employment Relation as it is shown as part of WorkerAccount. */
export interface WorkerAccountEmployment {
    /** Type of the employment relation */
    type?: EmploymentRelationType | undefined;
    /** Type of additional income earner data by National Incomer Register classification . If several types apply, all of them should be selected. */
    irIncomeEarnerTypes?: IncomeEarnerType[] | undefined;
    /** Describes the work that is being performed in this Employment Relation. */
    work?: WorkDescription | undefined;
    /** Defines how the holidays are specified to this Worker. */
    holidays?: HolidaySpecification | undefined;
    /** Usecase is data related to the source and processing of the Employment data outside the Salaxy backend service / system.
Typically, Usecase data would be processed by an external system that has originally created the 
Employment Relation (Worker / Employee in many systems). E.g. expenses system, hourly reporting system. */
    usecase?: UsecaseData | undefined;
    /** Type for the pension insurance. */
    pensionCalculation?: PensionCalculation | undefined;
    /** Rules (e.g. effect of monthly lower limit) for pension calculation. */
    pensionRule?: PensionRule | undefined;
    /** The id of the pension company. */
    pensionCompany?: PensionCompany | undefined;
    /** The pension contract number. */
    pensionContractNumber?: string | undefined;
    /** The id of the insurance company. */
    insuranceCompany?: InsuranceCompany | undefined;
    /** The accident insurance contract number. */
    insuranceContractNumber?: string | undefined;
    /** Taxcard type from the employment point of view. */
    taxcard?: EmploymentRelationTaxcard | undefined;
    /** Worker's salary payment method, bank account, external etc. */
    salaryPaymentMethod?: EmploymentRelationSalaryPaymentMethod | undefined;
    /** Start date of the Employment Relation. */
    startDate?: Date | undefined;
    /** End date of the Employment Relation. */
    endDate?: Date | undefined;
    /** Duration of the employment. If true, the employment relation is for a fixed term.
Otherwise (which is the default) the employment relation continues until further notice. */
    isFixedTerm?: boolean | undefined;
    /** Indicates that the employment relation has been terminated.
Saving with this status also makes the employment relation Archived. */
    isTerminated?: boolean | undefined;
    /** If true, the worker is the same person as the actual signed owner of the account. */
    isAccountOwner?: boolean | undefined;
    /** Identifier in a source system. Used in imports etc. */
    sourceId?: string | undefined;
    /** Employment registration code for Incomes Registry. */
    employmentRegCode?: string | undefined;
}

/** API company import object. The API uses this object for mass operations for creating or assuring the customer companies in the system. */
export interface CompanyImport {
    /** Company number in the the trade register (Y-tunnus). 
Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
Also, the international VAT format is allowed: FI12345678
This field is optional and defaults to the company number of the current account. */
    officialId?: string | undefined;
    /** Additional parameters for import. Defaults to string. */
    parameters?: { [key: string]: any; } | undefined;
    /** Item for import. */
    item?: AssureCompanyAccountRequest | undefined;
    /** Validation for the import */
    validation?: ApiValidation | undefined;
    /** Result object of the import. */
    result?: ApiImportResultOfPartnerCompanyAccountInfo | undefined;
}

/** Request to assure that a company account exists: Either an account is returned or an account stub (non-verified) will be created. */
export interface AssureCompanyAccountRequest {
    /** Company number in the the trade register (Y-tunnus). 
Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
Also, the international VAT format is allowed: FI12345678 */
    officialId: string;
    /** The account identifier at the partner site. 
If present, this ID is used to restrict the authorization to one account at partner site only. */
    partnerAccountId?: string | undefined;
    /** Contact e-mail */
    email?: string | undefined;
    /** Telephone number for the contact person */
    telephone?: string | undefined;
    /** First name of the contact person */
    contactFirstName?: string | undefined;
    /** Last name of the contact person */
    contactLastName?: string | undefined;
    /** The primary partner account for the new company to create.
If the company already exists and has given authorization to the primary partner, and does not have any primary partner, the primary partner will be set.
Please note, that the calling account must have the authorization to the primary partner account, or
be the primary partner itself. */
    proxyPartner?: string | undefined;
    /** Language preference. */
    language?: Language | undefined;
}

/** Result of the import. Both status and possible item are returned. */
export interface ApiImportResultOfPartnerCompanyAccountInfo {
    /** Status of the import */
    status?: ApiImportStatus | undefined;
    /** Result object of the import. Defaults to id of the imported object. */
    item?: PartnerCompanyAccountInfo | undefined;
}

/** Information about a Customer account for a Partner */
export interface PartnerCompanyAccountInfo {
    /** Account Id */
    accountId?: string | undefined;
    /** Account Id formatted for dispaly to end user */
    accountIdFormatted?: string | undefined;
    /** Avatar for display information */
    avatar?: Avatar | undefined;
    /** If true, the account has a verified owner. */
    isVerified?: boolean | undefined;
    /** If true, the current user (the partner) is authorized to access the account */
    isAuthorized?: boolean | undefined;
    /** The partner account ID to which the access is currently restricted. */
    partnerAccountId?: string | undefined;
}

/** Import object for E-invoice delivery. */
export interface EInvoicingRequest {
    /** Company number in the the trade register (Y-tunnus). 
Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
Also, the international VAT format is allowed: FI12345678
This field is optional and defaults to the company number of the current account. */
    officialId?: string | undefined;
    /** Additional parameters for import. Defaults to string. */
    parameters?: { [key: string]: any; } | undefined;
    /** Item for import. */
    item?: string | undefined;
    /** Validation for the import */
    validation?: ApiValidation | undefined;
    /** Result object of the import. */
    result?: ApiImportResultOfObject | undefined;
}

/** Result of the import. Both status and possible item are returned. */
export interface ApiImportResultOfObject {
    /** Status of the import */
    status?: ApiImportStatus | undefined;
    /** Result object of the import. Defaults to id of the imported object. */
    item?: any | undefined;
}

/** API calculation import object. The API uses this object for mass operations for adding calculations to a new or existing payroll object. If the calculation object does not contain a valid payroll-ID, a new payroll will be created. Returns payroll ID. */
export interface CalculationImport {
    /** Company number in the the trade register (Y-tunnus). 
Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
Also, the international VAT format is allowed: FI12345678
This field is optional and defaults to the company number of the current account. */
    officialId?: string | undefined;
    /** Additional parameters for import. Defaults to string. */
    parameters?: { [key: string]: any; } | undefined;
    /** Item for import. */
    item?: Calculation | undefined;
    /** Validation for the import */
    validation?: ApiValidation | undefined;
    /** Result object of the import. */
    result?: ApiImportResultOfString | undefined;
}

/** API worker check object. The API uses this object for checking the existence of a worker with employment. */
export interface WorkerCheck {
    /** Company number in the the trade register (Y-tunnus). 
Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
Also, the international VAT format is allowed: FI12345678
This field is optional and defaults to the company number of the current account. */
    officialId?: string | undefined;
    /** Item id to check.
This can be external ID, official ID or Salaxy ID. */
    id?: string | undefined;
    /** Validation for the import */
    validation?: ApiValidation | undefined;
    /** Result object of the import. */
    result?: ApiCheckResultOfWorkerAccountOf | undefined;
}

/** Result of the check. Both status and possible item are returned. */
export interface ApiCheckResultOfWorkerAccountOf {
    /** Status of the check */
    status?: ApiCheckStatus | undefined;
    /** Result object of the check. Defaults to null. */
    item?: WorkerAccount[] | undefined;
}

/** Import object for invoice creation. */
export interface InvoicingRequest {
    /** Company number in the the trade register (Y-tunnus). 
Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
Also, the international VAT format is allowed: FI12345678
This field is optional and defaults to the company number of the current account. */
    officialId?: string | undefined;
    /** Additional parameters for import. Defaults to string. */
    parameters?: { [key: string]: any; } | undefined;
    /** Item for import. */
    item?: string | undefined;
    /** Validation for the import */
    validation?: ApiValidation | undefined;
    /** Result object of the import. */
    result?: ApiImportResultOfInvoiceOf | undefined;
}

/** Result of the import. Both status and possible item are returned. */
export interface ApiImportResultOfInvoiceOf {
    /** Status of the import */
    status?: ApiImportStatus | undefined;
    /** Result object of the import. Defaults to id of the imported object. */
    item?: Invoice[] | undefined;
}

/** Invoice for the pending payment in the business system. For example, a salary gross payment created for the salary calculation and delivered as an e-invoice to the employer. For example, a salary net payment, created for the employer which is self paying the net payment to the worker. */
export interface Invoice {
    /** Group indicator.
Invoices with the same group id can be paid in the same batch. */
    group?: string | undefined;
    /** Invoice header details. */
    header?: InvoiceHeader | undefined;
    /** Invoice recipient details. */
    recipient?: InvoiceRecipient | undefined;
    /** Invoice payer details. */
    payer?: InvoicePayer | undefined;
    /** List of invoice rows. */
    rows?: InvoiceRow[] | undefined;
    /** Invoice data in XML or json format. */
    content?: string | undefined;
    /** Invoice in pdf format. */
    pdf?: string | undefined;
    /** The workflow data for manual editing and approval purposes. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Header for the invoice */
export interface InvoiceHeader {
    /** Payment reference (e.g. RF0710010831).
Please note that in salary payment scenarios, this is not necessarily unique. */
    referenceNumber?: string | undefined;
    /** Invoice Date. */
    date?: Date | undefined;
    /** Due date for the invoice. */
    dueDate?: Date | undefined;
    /** The date for the actual period for which this invoice is done.
For salaries, this is salary date, for monthly / quarterly payments, this is the first day of period. */
    logicalDate?: Date | undefined;
    /** Total amount for the invoice excluding VAT. */
    totalExVat?: number | undefined;
    /** Total payable amount for the invoice including VAT. */
    total?: number | undefined;
    /** Already paid amount of the invoice.
This is applicable only for some periodic invoices, like tax invoices, which may be paid in parts. */
    totalPaid?: number | undefined;
    /** The free text that is displayed / sent with the invoice.
May have multiple lines. */
    message?: string | undefined;
    /** Channel that is used for paying the invoice. */
    channel?: PaymentChannel | undefined;
    /** Invoice type. */
    type?: InvoiceType | undefined;
    /** The external ID is used for matching the executed payment from the 3rd party system
to the pending payment in the Palkkaus system. */
    externalId?: string | undefined;
    /** The current notified status of the invoice in external system. */
    status?: InvoiceStatus | undefined;
    /** The time when the object status was last updated. */
    statusAt?: Date | undefined;
    /** List of business object ids (typically calculations) on which the payment is based on. */
    businessObjects?: string[] | undefined;
    /** The count of paid business objects (typically calculations) which the invoices is based on.
This is applicable only for some periodic invoices, like tax invoices, which may be paid in parts. */
    paidBusinessObjectsCount?: number | undefined;
    /** Period for the Invoice: Work period, month / quarter of sidecosts etc. */
    period?: DateRange | undefined;
    /** The payment type of the invoice. If the payment channel does not support the requested payment type (e.g. Salary),
it should set here the payment type that it used (e.g. Default).
Payment channel should also expect new types to be introduced, without that being a breaking change.
Currently, we expect Default always be supported. */
    paymentType?: InvoicePaymentType | undefined;
}

/** Payment receiver party of the invoice. */
export interface InvoiceRecipient {
    /** The full name of the payment receiver for payment purposes. */
    fullName?: string | undefined;
    /** The International Bank Account Number of the receiver. */
    iban?: string | undefined;
    /** This is an official identifier of the party: Finnish Personal Id (HETU) for a Person or Company Id (Y-tunnus) for a company or association.
WARNING: This is currently needed for Finvoice only (https://www.finanssiala.fi/finvoice/Sivut/default.aspx). As such we consider removing it from persons. 
Please inform if you use this property! */
    officialId?: string | undefined;
    /** Identifier in a source system. Used in imports etc. */
    sourceId?: string | undefined;
    /** Optional contact info. Not available for all recipients. */
    contact?: Contact | undefined;
    /** The ultimate beneficiary of the money: 
This may be a Palkkaus.fi Worker Account (Avatar id is not null)
or some other entity: Tax authorities, pension company etc. (Avatar id is null).
Typically beneficiary is the same as Iban, OfficialId, FullName and Contact in this object,
but this is not true in edge cases (e.g. customer funds account). */
    beneficiary?: AccountInIndex | undefined;
}

/** Payment payer party of the invoice. */
export interface InvoicePayer {
    /** Avatar is the visual representation of the party. */
    avatar?: Avatar | undefined;
    /** Contact information for the party. */
    contact?: Contact | undefined;
    /** Official identifier of the party:
Finnish HETU (Soc. sec. number) for a Person or Y-tunnus (Company ID for a company or association). */
    officialId?: string | undefined;
    /** Optional ID for identifying the party in the third party system.
This is the same partner key that is given as part of Single Sign-On process. */
    partnerKey?: string | undefined;
}

/** Row for the invoice */
export interface InvoiceRow {
    /** Article Identifier is given by seller, EAN etc.
In the case of Salaxy salaries, this is CalculationRowType. */
    articleId?: string | undefined;
    /** Name of the product or service.
In the case of Salaxy salaries, this is language versioned text of CalculationRowType. */
    articleName?: string | undefined;
    /** Message (RowFreeText in Finvoice) is the message is mainly designed for accounting systems. */
    message?: string | undefined;
    /** Count (DeliveredQuantity in Finvoice) is the quantity of product or service. */
    count?: number | undefined;
    /** Price including VAT (UnitPriceVatIncludedAmount, Yksikköhinta verollinen) */
    price?: number | undefined;
    /** Price of one product or service without Vat (UnitPriceAmount, Yksikköhinta veroton). 
Yksikköhinta voidaan ilmoittaa myös verollisena UnitPriceVatIncludedAmount- elementissä laskutuskäytännön ja verottajan ALV-ohjeistuksen mukaan. */
    priceExVat?: number | undefined;
    /** Vat percent related to the product or service (RowVatRatePercent, Alv%)
Please note that eg. 24% is valued as 0.24 */
    vatPercent?: number | undefined;
    /** Row total excluding VAT (RowVatExcludedAmount, Yhteensä veroton) */
    totalExVat?: number | undefined;
    /** Row total with VAT (RowAmount, Yhteensä verollinen) */
    total?: number | undefined;
    /** Suggested account number (RowNormalProposedAccountIdentifier). */
    accountingAccountNumber?: string | undefined;
    /** Textual code for accounting mapping (RowProposedAccountText, Raportointikoodi).
In Finvoice: "Accounting information agreed between seller and buyer." */
    accountingCode?: string | undefined;
    /** Business object id (typically calculation) on which the row is based on. */
    businessObject?: string | undefined;
}

/** Check object for invoice settings. */
export interface InvoiceSettingsCheck {
    /** Company number in the the trade register (Y-tunnus). 
Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
Also, the international VAT format is allowed: FI12345678
This field is optional and defaults to the company number of the current account. */
    officialId?: string | undefined;
    /** Item id to check.
This can be external ID, official ID or Salaxy ID. */
    id?: string | undefined;
    /** Validation for the import */
    validation?: ApiValidation | undefined;
    /** Result object of the import. */
    result?: ApiCheckResultOfInvoiceSettings | undefined;
}

/** Result of the check. Both status and possible item are returned. */
export interface ApiCheckResultOfInvoiceSettings {
    /** Status of the check */
    status?: ApiCheckStatus | undefined;
    /** Result object of the check. Defaults to null. */
    item?: InvoiceSettings | undefined;
}

/** Settings related to invoices that are sent to customers. */
export interface InvoiceSettings {
    /** Receiver's address for the e-invoice. */
    eInvoiceReceiver?: string | undefined;
    /** Receiver's operator for the e-invoice. */
    eInvoiceIntermediator?: string | undefined;
    /** SEPA maksatustunnus */
    sepaBankPartyId?: string | undefined;
    /** Employer's bank account number */
    ibanNumber?: string | undefined;
}

/** Contains order data for Varma pensions (TyEL, YEL) and required operations. */
export interface VarmaPensionOrder {
    /** Orderer information. */
    orderer?: InvoiceParty | undefined;
    /** Action for the order. */
    action?: VarmaPensionOrderAction | undefined;
    /** Validation information. */
    validation?: ApiValidation | undefined;
    /** YEL data for the order */
    yel?: VarmaPensionOrderYel | undefined;
    /** TyEL data for the order */
    tyel?: VarmaPensionOrderTyel | undefined;
}

/** Party in an Varma Invoice: Either Payer or Recipient. */
export interface InvoiceParty {
    /** Finnish Company ID (Y-tunnus). */
    companyId?: string | undefined;
    /** Organisation name */
    companyName?: string | undefined;
    /** Contact information */
    contact?: Contact | undefined;
    /** Contact person Full name */
    contactPersonName?: string | undefined;
}

/** Varma pension order YEL details. */
export interface VarmaPensionOrderYel {
    /** Personal id number. */
    personalId?: string | undefined;
    /** Payer definition. */
    payer?: VarmaPensionOrderYelPayer | undefined;
    /** If true, indicates that existing contract will be moved to Varma. */
    isMove?: boolean | undefined;
    /** Estimated yearly income. */
    yearlyIncome?: number | undefined;
    /** Start date for the new pension. */
    startDate?: Date | undefined;
    /** Movement timing. (Q1,Q2,Q3 or Q4, or as soon as possible) */
    moveMoment?: string | undefined;
    /** Indicates if the existing yearly income estimate will be changed. */
    isYearlyIncomeChange?: boolean | undefined;
}

/** Varma pension order TyEL details. */
export interface VarmaPensionOrderTyel {
    /** Personal id number. */
    personalId?: string | undefined;
    /** If true, indicates that existing contract will be moved to Varma. */
    isMove?: boolean | undefined;
    /** Estimated yerly income. */
    yearlyIncome?: number | undefined;
    /** Start year for the new order. */
    startYear?: string | undefined;
    /** Start month for the new order. */
    startMonth?: string | undefined;
    /** Movement timing. (Q1,Q2,Q3 or Q4, or as soon as possible) */
    moveMoment?: string | undefined;
}

/** Local Tapiola insurance order API object. */
export interface LocalTapiolaInsuranceOrder {
    /** Status of the Local Tapiola insurance order. */
    status?: LocalTapiolaInsuranceOrderStatus | undefined;
    /** Information about the company placing the Local Tapiola insurance order. */
    company?: LocalTapiolaInsuranceOrderCompanyInfo | undefined;
    /** Information about the Local Tapiola worker insurance order. */
    items?: LocalTapiolInsuranceOrderInfo[] | undefined;
    /** Validation information. */
    validation?: ApiValidation | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Information required for an insured company with a Local Tapiola occupational accident insurance. */
export interface LocalTapiolaInsuranceOrderCompanyInfo {
    /** Company details. */
    details?: AccountInIndex | undefined;
    /** Company address. */
    address?: Contact | undefined;
    /** If true, the address of the Principal Place Of Business differs from the company address. */
    hasPrincipalBusinessAddress?: boolean | undefined;
    /** Address of the principal place of business. */
    principalBusinessAddress?: Contact | undefined;
    /** Information of the insured companys delegate person. */
    contactPerson?: LocalTapiolaInsuranceOrderCompanyContactPerson | undefined;
    /** Company owner structure is too complex to be fully represented with simple form data
i.e. list of InsuranceOrderCompanyOwnerInfo objects. */
    complexOwnerStructure?: boolean | undefined;
    /** List of beneficial owners of the company. */
    owners?: BeneficialOwner[] | undefined;
    /** List of other beneficiaries than beneficial owners of the company */
    beneficiaries?: Beneficiary[] | undefined;
}

/** Information required with a Local Tapiola worker accident insurance order. */
export interface LocalTapiolInsuranceOrderInfo {
    /** Type of the Local Tapiola insurance order. */
    orderType?: LocalTapiolaInsuranceOrderType | undefined;
    /** Start date of the insurance. Only valid for new occupational accident insurance and
entrepreneur insurance. If insurance is moved to Local Tapiola from another insurance
company, StartingPoint should be used instead. */
    startDate?: Date | undefined;
    /** Billing interval (1, 2, 3 or 4 times per year). Applies only to entrepreneur insurance. */
    billingInterval?: number | undefined;
    /** Name of the old insurance company, if the insurance is transferred to Local Tapiola
from some other insurance company. */
    oldInsuranceCompany?: string | undefined;
    /** Industry that the company operates in. */
    industry?: string | undefined;
    /** Occupation types and income estimates. Can be many entries for an occupational accident
insurance and only a single entry for an entrepreneur insurance. */
    occupations?: LocalTapiolaInsuranceOrderOccupation[] | undefined;
    /** Name of the entrepreneur. */
    insuredName?: string | undefined;
    /** Social security number of the entrepreneur. */
    insuredOfficialId?: string | undefined;
}

/** Information required for a company contact person with a Local Tapiola occupational accident insurance. */
export interface LocalTapiolaInsuranceOrderCompanyContactPerson {
    /** The authorization type of for the contact person. */
    authorizationType?: LocalTapiolaInsuranceOrderAuthorizationType | undefined;
    /** Avatar for the account */
    avatar?: Avatar | undefined;
    /** Official id of the person or company. */
    officialId?: string | undefined;
    /** Email address. */
    email?: string | undefined;
    /** Telephone number. */
    telephone?: string | undefined;
    /** Bank account number (IBAN) */
    ibanNumber?: string | undefined;
}

/** Occupation information required with a new Local Tapiola worker occupational accident insurance order. */
export interface LocalTapiolaInsuranceOrderOccupation {
    /** Occupation code. */
    occupationCode?: string | undefined;
    /** Occupation name. */
    occupationName?: string | undefined;
    /** Estimated annual salary income. */
    estimatedIncome?: number | undefined;
}

export interface PageResultOfInvoiceListItem {
    items?: InvoiceListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of invoices in the user interface. It contains all essential information of the report and is basis for searching, filtering and sorting. */
export interface InvoiceListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: InvoiceStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: InvoiceData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Invoice specific business data for index. */
export interface InvoiceData {
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Channel that is used for paying the invoice. */
    channel?: PaymentChannel | undefined;
    /** Invoice Date. */
    date?: Date | undefined;
    /** Due date for the invoice. */
    dueDate?: Date | undefined;
    /** Start of period for the Invoice: Work period, month / quarter of sidecosts etc. */
    periodStart?: Date | undefined;
    /** End of period for the Invoice: Work period, month / quarter of sidecosts etc. */
    periodEnd?: Date | undefined;
    /** Already paid amount of the invoice.
This is applicable only for some periodic invoices, like tax invoices, which may be paid in parts. */
    totalPaid?: number | undefined;
    /** The count of paid business objects (typically calculations) which the invoices is based on.
This is applicable only for some periodic invoices, like tax invoices, which may be paid in parts. */
    paidBusinessObjectsCount?: number | undefined;
    /** The time when the object status was last updated. */
    statusAt?: Date | undefined;
}

/** Defines a set of calculations based on identifiers potentially unsaved Calculation objects as well as Payrolls. */
export interface CalculationCollection {
    /** Collection of calculation ID's to be fetched from storage */
    ids?: string[] | undefined;
    /** Collection of payroll ID's to be fetched from storage */
    payrollIds?: string[] | undefined;
    /** Collection of inline calculations that may be saved or not */
    calcs?: Calculation[] | undefined;
    /** Collection of inline Payroll objects that may be saved or not */
    payrolls?: PayrollDetails[] | undefined;
}

/** New version 03 of Payroll. Payroll (Palkkalista) is a list of employees who receive salary or wages from a particular organization. Typical usecase is that a a company has e.g. a monthly salary list that is paid at the end of month. For next month, a copy is then made from the latest list and the copy is potentially modified with the changes of that particular month. */
export interface PayrollDetails {
    /** Snapshots of the calculations based on the ID's specified in Info */
    calcs?: Calculation[] | undefined;
    /** When saved or validated, provides a validation object for each calculation:
Whether the calculations are ready for payment. */
    validations?: ApiListItemValidation[] | undefined;
    /** A usecase for creating and editing Payroll lists.
In practice, a usecase is either a user interface or a microservice that provides a Payroll processing
and it may be implemented outside Salaxy.
Provides the possibility to store useacase specific data as part of the Payroll. */
    usecase?: UsecaseData | undefined;
    /** The workflow data for manual editing and approval purposes. */
    workflowData?: WorkflowData | undefined;
    /** Stores the data for automation */
    automation?: ApiAutomation | undefined;
    /** Input that defines the Payroll. */
    input?: PayrollInput | undefined;
    /** General summary information about the Payroll and when it was las processed. */
    info?: Payroll03Info | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** ApiValidation object that is specialized for list items. Provides if and index properties for connecting a validation to a specific item in the list */
export interface ApiListItemValidation {
    /** Identifier of the item this validation is for.
Identifiers are not always available (if the item has not been saved), so index is a more generic approach. */
    id?: string | undefined;
    /** Zero based index of the item this validation is for. */
    index?: number | undefined;
    /** If true, the data is valid - no errors. */
    readonly isValid?: boolean | undefined;
    /** If true, has required fields missing data. */
    readonly hasAllRequiredFields?: boolean | undefined;
    /** Validation errors on invalid field values. 
Note that required fields missing error messages are not here. Only the invalid values. */
    readonly errors?: ApiValidationError[] | undefined;
}

/** Defines the automation aspect of API objects: Recurrence / Scheduling and Actions (Alarms in ICalendar). */
export interface ApiAutomation {
    /** Returns true, if the item is recurring */
    readonly isRecurring?: boolean | undefined;
    /** Identifier of a template (potentially a recurring item) that this object is occurence of. */
    occurenceOf?: string | undefined;
    /** Gets or sets the recurrence rules to set the recurrence. */
    recurrenceRules?: string[] | undefined;
    /** For a recurring event, gets or sets the rules for the recurring actions */
    actionRules?: CalendarAction[] | undefined;
}

/** Input that user defines about the Payroll */
export interface PayrollInput {
    /** Title that can be specified by the end user. */
    title?: string | undefined;
    /** The Default Salary period for the Payroll.
This may be overriden for an individual calculation. */
    period?: DateRange | undefined;
    /** The requested date for the SalaryDate from the employer. */
    salaryDate?: Date | undefined;
    /** Defines the re-setting of the salary date in the calculation re-calculation. */
    salaryDateKind?: SalaryDateKind | undefined;
    /** Channel that is used for payment. */
    paymentChannel?: PaymentChannel | undefined;
    /** What types of wages are paid with this payroll.
May affect the rendering of the user interface (e.g. for holidays, hours and absences).
Also affects which Workers are show in the add / link dialog by default. */
    wageBasis?: WageBasis | undefined;
    /** If true, the calculation rows are not updated from employment when the Payroll is copied.
Default is that the rows and other data is updated in copy / create new etc. */
    noUpdateFromEmployment?: boolean | undefined;
    /** If the Payroll is based on a template, this is the identifier of the template.
The field can be manually set to null / ID to break / reconnect that connection. */
    template?: string | undefined;
    /** List of calculations that are attached to this calculation. */
    calculations?: string[] | undefined;
    /** Identifier of the payroll in a source system. Used in imports etc. */
    sourceId?: string | undefined;
}

/** Provides Read-only information about the Payroll In the case of non-paid Payrolls, this is the latest save/validation. In the case of paid Payrolls, this is the status of the Payroll when it was paid. */
export interface Payroll03Info {
    /** Date that the Info was last updated. */
    date?: Date | undefined;
    /** Count of calculations in this Payroll */
    calcCount?: number | undefined;
    /** Total gross salary */
    totalGrossSalary?: number | undefined;
    /** Total payment for the Payroll. */
    totalPayment?: number | undefined;
    /** Total Palkkaus.fi fees for the Payroll */
    fees?: number | undefined;
    /** If true, all calculations have been validated and they are valid for payment.
If false, validation has not been done or some calculations are not valid for payment. */
    isReadyForPayment?: boolean | undefined;
    /** Status for the payroll and its calculations in the payment Workflow. */
    status?: PayrollStatus | undefined;
    /** Due date for the payroll. Date when the payment should be made to achieve SalaryDate. */
    dueDate?: Date | undefined;
    /** Paid at date for the payroll. (Date of the employer's payment). */
    paymentDate?: Date | undefined;
    /** The estimated date when the salary is withdrawable by the worker. */
    salaryDate?: Date | undefined;
    /** The reference number of the payment after payment is made. */
    paymentId?: string | undefined;
    /** Original Payment reference number */
    originalPaymentId?: string | undefined;
    /** Application id for invoicing etc. purposes. */
    applicationId?: string | undefined;
    /** The MessageThread Id, if this payroll is referred in a message thread. */
    messageThreadId?: string | undefined;
}

/** Provides a preview of how an invoice should be created. In the future versions, it is expected to return DIFF information on how potential previously created invoices would behave (e.g. if som invoices would be canceled or changed). */
export interface InvoicePreview {
    /** The invoice that exists / would be created. */
    invoice?: InvoiceListItem | undefined;
    /** If true, this invoice has already been created. */
    exists?: boolean | undefined;
}

/** Messages thread groups togehter a set of related messages and/or attachments. */
export interface MessageThread {
    /** Title for the message */
    title?: string | undefined;
    /** Status for the entire message thread. */
    status?: MessageThreadStatus | undefined;
    /** The owner of the thread: The entity that has the right to delete or move the thread.
This may or may not be the originator the message thread.
The owner is typically Company or Household, in some cases Worker person.
It should NOT be partner or person from a company. */
    ownerInfo?: Avatar | undefined;
    /** Palkkaus.fi id (IBAN) of the other party.
The other party is the second entity(besides the owner) in that is juridically in the message.
This may or may not be the originator the message thread.
It is typically the Partner or Palkkaus.fi, but may also be the Worker in the future. */
    otherParty?: string | undefined;
    /** The other party is the second entity (besides the owner) in that is juridically in the message.
This may or may not be the originator the message thread.
It is typically the Partner or Palkkaus.fi, but may also be the Worker in the future. */
    otherPartyInfo?: Avatar | undefined;
    /** List of messages and attachments in this thread */
    messages?: Message[] | undefined;
    /** The workflow from the Owner point-of-view. */
    ownerWorkflow?: MessageThreadWorkflow | undefined;
    /** The workflow from the other party point-of-view. */
    otherPartyWorkflow?: MessageThreadWorkflow | undefined;
    /** The workflow data for manual editing and approval purposes. */
    workflowData?: WorkflowData | undefined;
    /** Provides data for the usecase: The customer or service model level customization that is done for this object.
The customization may define user interface, data model and even scripts or worflow related to the object. */
    usecase?: UsecaseData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** A message within a messaging thread. */
export interface Message {
    /** Unique identifier for the message. */
    id?: string | undefined;
    /** Time for the message */
    time?: Date | undefined;
    /** Content type of the message */
    type?: ThreadedMessageType | undefined;
    /** Textual content: If message, this is the content text.
If other type, short title / description typically shown in the title bar. */
    content?: string | undefined;
    /** Identifier of the external content.
BlobFile Id for attachments, Calculation ID for calculations etc. */
    contentId?: string | undefined;
    /** Other misc. data that is used in displaying the content in the immediate message view.
Do not include the entire object here. Just the immediately available data. */
    contentData?: { [key: string]: any; } | undefined;
    /** Content type specific text for preview.
This may be URI, ID or boolean.
For BlobFile, it is currently the BlobFile Guid (the same as ContentId) or null, 
but in the future, the field may also contain an URL without that being a breaking change! */
    preview?: string | undefined;
    /** The party / type of the message sender. */
    fromParty?: MessageFrom | undefined;
    /** If set, specifies the time when the message has been read by the thread owner. */
    readByOwner?: Date | undefined;
    /** If set, specifies the time when the message has been read by the other party. */
    readByOtherParty?: Date | undefined;
    /** Validates the object that is the payload of the message. */
    validation?: ApiValidation | undefined;
}

/** Defines workflow actions for a message thread. */
export interface MessageThreadWorkflow {
    /** Number of messages that this party has posted that have not been read by the other party. */
    unreadCount?: number | undefined;
    /** The salary date for the discussion.
Owner's and other party's are typically the same, but they may differ: 
e.g. one may be the requested / estimated date and the other the first possible date if the requested is unrealistic.
NOTE: Unlike in Salaxy, this is always UTC. */
    salaryDate?: Date | undefined;
    /** Time of the last message posted by this party. 
NOTE: Unlike in Salaxy, this is always UTC. */
    updatedAt?: Date | undefined;
    /** Text for the last message (written by this party). This is for preview purposes: May be shortened. */
    lastMessageText?: string | undefined;
}

export interface PageResultOfMessageListItem {
    items?: MessageListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of message threads in the user interface. It contains header data of the message thread and is basis for searching, filtering and sorting. */
export interface MessageListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: MessageData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Message thread specific business data for index. */
export interface MessageData {
    /** Title for the message */
    title?: string | undefined;
    /** Last message that was was created by the owner */
    ownerLastMessage?: string | undefined;
    /** Last message that was created by the other party */
    otherPartyLastMessage?: string | undefined;
    /** Number of messages by Owner that have not been read by the other party */
    ownerUnreadCount?: number | undefined;
    /** Number of messages that have been read by the Other party and have not been read by the owner. */
    otherPartyUnreadCount?: number | undefined;
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Key for the usecase based on which it is resolved. 
Later, this may resolve to a user interface, microservice or a to manifest registering one.
For now, just use a unique string starting with a domain you own. */
    usecaseUri?: string | undefined;
    /** If true, the message is a salaxy email, generated by the system. */
    isSalaxyEmail?: boolean | undefined;
    /** Start date of the default salary period */
    periodStart?: Date | undefined;
    /** End date of the default salary period */
    periodEnd?: Date | undefined;
    /** Count of calculations in this Payroll */
    calcCount?: number | undefined;
    /** Time of the last message posted by owner. */
    ownerUpdatedAt?: Date | undefined;
    /** Time of the last message posted by other party. */
    otherPartyUpdatedAt?: Date | undefined;
}

/** Measurement value. */
export interface Measurement {
    /** Tag for the measurement. */
    tag?: string | undefined;
    /** Time when the measurement was recorded. */
    timestamp?: Date | undefined;
    /** Actual measurement value. */
    value?: number | undefined;
}

/** Provides the data for onboarding process for a company. Onboarding is the process where Salaxy gathers sufficient information to at least create an acccount, often even more so that the user can pay a salaary with the account. */
export interface Onboarding {
    /** Type of the account to be created. */
    accountType: WebSiteUserRole;
    /** Partner that should be added as primary authorization when the object is created.
Currently not used in update operations (only New and Signature / VismaSign)
and does not set as primary partner except if exception specifically made for a partner. */
    authorizePartner?: string | undefined;
    /** The server-side status of the onboarding process.
NOTE that there is a more relaxed user interface-level state in ui.state and ui.stateFullText 
that can be used in onboarding user interfaces. */
    status?: OnboardingStatus | undefined;
    /** Input that is needed for creating a company account. */
    company?: CompanyInput | undefined;
    /** Input that is needed for creating a personal account.
This may be 
1) the principal account if the account is created for 1a) Worker or 1b) Household or 
2) creator owner if the account is created for a Company. */
    person?: PersonInput | undefined;
    /** Possibility to define products. 
These can only be defined to one account as part of the onboarding process: 
If company account is created, the products are always for Company, not for the Person =&gt; 
Person will have default products in that case and they need to be edited in a separate process once the accounts have been created. */
    products?: AccountProducts | undefined;
    /** Input and post data for digital signature. */
    signature?: SignatureData | undefined;
    /** Validation status and errors. */
    validation?: AccountValidation | undefined;
    /** User interface related data: Mainly the state of the UI. */
    ui?: OnboardingUIState | undefined;
    credentials?: OnboardingCredentials | undefined;
    /** Custom state object that is guaranteed to survive the round-trip in the onboarding process.
Calling application to the onboarding may pass here any data that it needs after the onboarding process is ready and user has been authenticated. */
    appState?: { [key: string]: string; } | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Represents the input for creating a company account. */
export interface CompanyInput {
    /** If true, creates a company account based on company data. */
    doCreate?: boolean | undefined;
    /** Official name of the company */
    name: string;
    /** URL to a Logo picture (preferably PNG). This logo should be a square - icon type of logo for avatar. */
    logo?: string | undefined;
    /** The Business ID (Y-tunnus / Business Identity Code) is a code given to businesses and organizations by the PRH or the Tax Administration. 
It consists of seven digits, a dash and a control mark, for example 1234567-8.
Alternative accepted formats incule international VAT number "FI12345678" or number without the dash: "12345678". */
    businessId: string;
    /** This is an official name of the actor.
It originates from the YTJ or Bank authentication. */
    officialName?: string | undefined;
    /** If an object with the given BusinessID exists, it is resolved here: The unique ID is set here by the onboarding service. This field cannot be set. */
    resolvedId?: string | undefined;
    /** Identifier at the partner site - typically an organization ID. */
    partnerAccountId?: string | undefined;
    /** Company ownership for KYC */
    ownership?: Ownership | undefined;
    /** If true, will fetch the data from the Finnish Business Infromation System (YTJ/BIS).
Fetching is done firstly based on Business ID, if that is not valid then based on name. */
    doYtjUpdate?: boolean | undefined;
    /** The details of company data as provided by the Finnish Business Infromation System (YTJ/BIS) */
    ytjDetails?: YtjCompany | undefined;
    /** A search to Finnish Business Infromation System (YTJ/BIS). This search is triggered if you set the RawInput field. */
    ytjSearch?: YtjSearchResult | undefined;
    /** The legal type of the company, as categorized by Palkkaus / used in generating IBAN numbers. */
    companyType: CompanyType;
    /** Contact information for the company */
    contact?: Contact | undefined;
    /** List of roles which this account is member of. */
    roles?: Role[] | undefined;
    /** Language of the company. */
    language?: Language | undefined;
}

export interface PersonInput {
    /** If true, creates a personal account based on this data.
Otherwise this is just user data for Company. */
    doCreate?: boolean | undefined;
    /** Contact information for the user / personal account */
    contact?: Contact | undefined;
    /** Verification objects for contact verification. */
    contactVerification?: OnboardingContactVerifications | undefined;
    /** Finnish Personal ID (Henkilötunnus /HETU) */
    personalId?: string | undefined;
    /** This is an official name of the actor.
It originates from the YTJ or Bank authentication. */
    officialName?: string | undefined;
    /** If an object with the given PersonalId exists, it is resolved here: The unique ID is set here by the onboarding service. This field cannot be set. */
    resolvedId?: string | undefined;
    /** First name or company name */
    firstName?: string | undefined;
    /** Last name, for companies, this should be null */
    lastName?: string | undefined;
    /** URL of the picture if specified as picture (null in a case of type Icon) */
    picture?: string | undefined;
    /** Bank account number for salary payment */
    bankAccountIban?: string | undefined;
    /** Language of the person. */
    language?: Language | undefined;
}

/** Provides an overview and the possibility to edit products that are enabled to this account */
export interface AccountProducts {
    /** The basic services for Salary payment. */
    baseService?: BaseSalaryProduct | undefined;
    /** Reports and payments to tax authorities. */
    tax?: TaxProduct | undefined;
    /** Reports and payments to TVR (the unemployment insurance fund of Finland) */
    unemployment?: UnemploymentProduct | undefined;
    /** Reports ant payments to Pension companies. */
    pension?: PensionProduct | undefined;
    /** Reports and payments for mandatory employment insurances. */
    insurance?: InsuranceProduct | undefined;
    /** Bookkeeping reports for salarypayments */
    accounting?: AccountingProduct | undefined;
    /** Employer health care from the company Heltti */
    healthCareHeltti?: HealthCareHelttiProduct | undefined;
    /** Pension payments for an entrepreneur */
    pensionEntrepreneur?: PensionEntrepreneurProduct | undefined;
    /** Defines the pricing partner, service model and pricing model. */
    pricing?: PricingProduct | undefined;
}

export interface SignatureData {
    /** Name of the signing person.
By default, this is Onboarding Person, but it may be a completely different person. */
    personName?: string | undefined;
    /** Personal ID of the person, who has the right to sign. */
    personalId?: string | undefined;
    /** Email that is sent to Signature provider, if any. */
    email?: string | undefined;
    /** Telephone that is sent to Signature provider, if any. */
    telephone?: string | undefined;
    /** If true, the person signing is PEP (Politically Exposed Person */
    isPep?: boolean | undefined;
    /** TODO: To be removed after Signicat is in production.
Data related to VismaSign signature process (API v01). */
    vismaSignData?: VismaSignV01ObData | undefined;
    /** Data related to Signicat signature process. */
    signicatData?: SignicatData | undefined;
    /** The account is authorized to sign on behalf of the actual account. */
    isProcura?: boolean | undefined;
}

/** Validation errors for the onboarding process */
export interface AccountValidation {
    /** If true the official ID is technically valid.
Official ID is either Finnish Personal ID (HETU, Henkilötunnus) or Business ID (Y-tunnus). */
    isOfficialIdValid?: boolean | undefined;
    /** If false, none of the accounts in ExistingAccounts cannot be accessed by the current user. */
    isAuthorized?: boolean | undefined;
    /** TODO: NOt implemented yet - should be implemented
If true, the onboarding object has sufficient data to start the Digital Signature process (Visma Sign).
Depending on the use case this may or may not be required for committing the data as account data. */
    canStartSign?: boolean | undefined;
    /** If true, the validation process has been completed. The IsValid may be true or false. */
    isCompleted?: boolean | undefined;
    /** Existing account based on official id (Personal ID / Business ID). */
    existingAccount?: Avatar | undefined;
    /** If true, the data is valid - no errors. */
    readonly isValid?: boolean | undefined;
    /** If true, has required fields missing data. */
    readonly hasAllRequiredFields?: boolean | undefined;
    /** Validation errors on invalid field values. 
Note that required fields missing error messages are not here. Only the invalid values. */
    readonly errors?: ApiValidationError[] | undefined;
}

/** Stores data for the onboarding user interface. */
export interface OnboardingUIState {
    /** State of the user interface. Typically an enumeration that stores where the UI was. E.g. Wizard step. */
    state?: string | undefined;
    /** Full description of the user interface state for admin and analyses purposes. */
    stateFullText?: string | undefined;
    /** URL where the user should be redirected back to when the onboarding process is complete. */
    successUrl?: string | undefined;
    /** URL where the user should be redirected back to if the process is canceled or there is an urecoverable error. */
    cancelUrl?: string | undefined;
    /** Response type to OAuth -request */
    oAuthResponseType?: string | undefined;
    /** Salaxy worker invitation key that points to a Salary slip / calculation that the user is coming to fetch 
in this onboarding process. The Onboarding data is prefilled with the data from th Salary calculation. */
    invitationKey?: string | undefined;
}

/** Stores information about the credentials that were used in the Onboarding process. */
export interface OnboardingCredentials {
    /** Identifier of the credentials (UserAccount Guid in the database). */
    credentialId?: string | undefined;
    /** The partner that initiated the Onboarding process. */
    partnerId?: string | undefined;
}

export interface Ownership {
    /** If true, authorities require tracking the shareholders.
In Finland, with current legistlation, this is if a shareholder has over 25% of the shares. */
    isRequiredTracking?: boolean | undefined;
    /** List of shareholders for the company */
    shareHolders?: Shareholder[] | undefined;
}

/** The details of company data as provided by the Finnish Business Infromation System (YTJ/BIS) */
export interface YtjCompany {
    /** The Business ID (Y-tunnus / Business Identity Code) is a code given to businesses and organizations by the PRH or the Tax Administration. 
It consists of seven digits, a dash and a control mark, for example 1234567-8.
Alternative accepted formats incule international VAT number "FI12345678" or number without the dash: "12345678". */
    businessId?: string | undefined;
    /** Official name of the company. 
Source: Tiedostonimi.Tiedostonimi */
    name?: string | undefined;
    /** The legal type of the company, as categorized by Palkkaus / used in generating IBAN numbers. */
    companyType?: CompanyType | undefined;
    /** YTJ's legal type of the company as a string. This is only to be used for display purposes.
Source: YritysHaku.YritysMuoto */
    companyTypeText?: string | undefined;
    /** The internal YTJ code number for the company's legal type. */
    ytjCompanyType?: YtjCompanyType | undefined;
    /** Original YTJ company type code. */
    ytjCompanyTypeCode?: number | undefined;
    /** Contact information for the */
    contact?: Contact | undefined;
    /** Social security number of the contact person in the company, if available. */
    contactPersonPersonalId?: string | undefined;
    /** Names are not necessarily avaiable. If they are, they may not be reliable. */
    contactPerson?: string | undefined;
    /** Mobile for or other company phone.
Difference between Contact.Phone and ContactPhone is that 
this (ContactPhone) is first mobile number, then company general phone if the former was null.
Contact.Phone is fisrt general phone number and mobile number only if not available. */
    contactPhone?: string | undefined;
    /** Web site address */
    www?: string | undefined;
    /** The sector where the company is active. (Toimialatieto.Koodi) */
    sectorOfBusinessCode?: number | undefined;
    /** Text of the sector where company operates. */
    sectorOfBusinessText?: string | undefined;
}

/** Search result for free text search from the Finnish Business Infromation System (YTJ/BIS). Returns a list of companies without details. */
export interface YtjSearchResult {
    /** The original search string - without trimming etc. that are done in the actual search. */
    rawInput?: string | undefined;
    /** If true, search is a success. This may mean that no results were found though. */
    isSuccess?: boolean | undefined;
    /** If true, the searh is too generic. 
Typically either there was more than 200 results or less than 3 characters in the search string. 
Both of these return an error in the API. */
    isTooGeneric?: boolean | undefined;
    /** Technical status - for developers / admin. */
    status?: string | undefined;
    /** A message that can be shown to the end user. */
    userMessage?: string | undefined;
    /** API quota counter */
    counter?: number | undefined;
    /** Result of the search. */
    result?: YtjSearchResultCompany[] | undefined;
}

/** Contact verification object for onboarding. */
export interface OnboardingContactVerifications {
    /** Verification for email contact. */
    email?: OnboardingContactVerification | undefined;
    /** Verification for telephone contact. */
    telephone?: OnboardingContactVerification | undefined;
}

/** First version of the product that integrates the Palkkaus.fi-salary payments to employers accounting. */
export interface BaseSalaryProduct {
    /** If true, worker salary and expense payments are paid directly by the employer. */
    isWorkerSelfHandling?: boolean | undefined;
    /** Receiver's address for the e-invoice. */
    eInvoiceReceiver?: string | undefined;
    /** Receiver's operator for the e-invoice. */
    eInvoiceIntermediator?: string | undefined;
    /** SEPA maksatustunnus */
    sepaBankPartyId?: string | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** The status text that should give the user.
Restrict the length to 56 characters. */
    readonly status?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If true, the product is enabled for the current user */
    enabled?: boolean | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

/** Service related to integration, reporting and payments to tax authorities. */
export interface TaxProduct {
    /** The reference number for the tax authorities */
    paymentReferenceNumber?: string | undefined;
    /** Defines how the reporting is done for Incomes registry (Tulorekisteri). */
    irReporting?: TaxReportHandling | undefined;
    /** If true, tax and social security payments are paid directly by the employer. */
    isTaxAndSocialSecuritySelfHandling?: boolean | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** The status text that should give the user.
Restrict the length to 56 characters. */
    readonly status?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If true, the product is enabled for the current user */
    enabled?: boolean | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

/** Product that helps employer to handle the mandatory unemployment insurance reports and payments. */
export interface UnemploymentProduct {
    /** If true, the account has paid salaries this year outside Palkkaus.fi.
This affects the yearly reporting - Palkkaus needs to contact the account.
Note that this is a shared option with the taxation product. */
    isSalariesPaidThisYear?: boolean | undefined;
    /** If true, the account has made prepayments or is registered to make prepayments.
Palkkaus needs to contact the account. */
    isPrepayments?: boolean | undefined;
    /** If true, the account himself handles the unemployment insurance notifications. */
    isNotificationsSelfHandling?: boolean | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** The status text that should give the user.
Restrict the length to 56 characters. */
    readonly status?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If true, the product is enabled for the current user */
    enabled?: boolean | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

/** Pension for Workers: The payments and monthly reporting. */
export interface PensionProduct {
    readonly status?: string | undefined;
    /** The use has a pension contract done (as opposed to acting as a temporary employer that pays the pension without a acontract). */
    isPensionContractDone?: boolean | undefined;
    /** The pension company where the user has a contract. */
    pensionCompany?: PensionCompany | undefined;
    /** Number for the contract. */
    pensionContractNumber?: string | undefined;
    /** If true, the user handles the reporting and payments himself/herself. */
    isPensionSelfHandling?: boolean | undefined;
    /** If true, there is a new pending contract. */
    isPendingContract?: boolean | undefined;
    /** Enabled property set automatically by IsPensionSelfHandling. */
    enabled?: boolean | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

/** Employer insurance. Currently, this is the mandatory employer insurance only. */
export interface InsuranceProduct {
    readonly status?: string | undefined;
    /** If set to true, the insurance is set to a partner insurance. */
    isPartnerInsurance?: boolean | undefined;
    /** If true, the user indicates that he/she has already made an insurance contract.
Should also fill in the InsuranceCompany and InsuranceContractNumber */
    isInsuranceContractDone?: boolean | undefined;
    /** Company for the current insurance */
    insuranceCompany?: InsuranceCompany | undefined;
    /** Contract number for the current insurance. */
    insuranceContractNumber?: string | undefined;
    /** Enabled property set automatically by IsPartnerInsurance. */
    enabled?: boolean | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

/** First version of the product that integrates the Palkkaus.fi-salary payments to employers accounting. */
export interface AccountingProduct {
    readonly status?: string | undefined;
    accountantName?: string | undefined;
    accountantEmail?: string | undefined;
    accountantPhone?: string | undefined;
    /** Enabled property set automatically by AccountantName, AccountantEmail and AccountantPhone. */
    enabled?: boolean | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

/** Employer health care from the company Heltti */
export interface HealthCareHelttiProduct {
    /** Defines the product package */
    package?: HelttiProductPackage | undefined;
    /** Industry of work */
    industry?: HelttiIndustry | undefined;
    readonly status?: string | undefined;
    /** Enabled property set automatically by HelttiProductPackage. */
    enabled?: boolean | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

export interface PensionEntrepreneurProduct {
    readonly status?: string | undefined;
    /** If true, user wants to order a YEL-contract. */
    tempContractMarker?: boolean | undefined;
    /** Enabled property set automatically by TempContractMarker. */
    enabled?: boolean | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

/** Defines the pricing partner, service model and pricing model. */
export interface PricingProduct {
    /** Current status of pricing. */
    readonly status?: string | undefined;
    /** Enabled property set automatically if partner set and partner specific pricing model. */
    enabled?: boolean | undefined;
    /** Defines the pricing partner, service model and pricing model. */
    pricingPartner?: PersonPricingPartner | undefined;
    /** Identifier for the product */
    readonly id?: string | undefined;
    /** The main short title for the product / service */
    readonly title?: string | undefined;
    /** One paragraph description text */
    readonly description?: string | undefined;
    /** The logo image for the product. */
    readonly img?: string | undefined;
    /** Identifier for the main product desription article in the Palkkaus.fi CMS */
    readonly articleId?: string | undefined;
    /** If false, it is not bossible to enable this product for the current account / environment. 
Typically, this means that the UI should not show this product. */
    visible?: boolean | undefined;
    /** Indicates (true-value) if the end user has confirmed the product options.
If false, the end user has not confirmed the option. */
    visited?: boolean | undefined;
}

/** For Visma Sign V01, data that is stored within the onboarding object. */
export interface VismaSignV01ObData {
    /** Document ID identifies the document (one or several files) that are to be signed in Visma Sign storage. */
    documentId?: string | undefined;
    /** Invitation ID that is used in the signature process */
    invitationId?: string | undefined;
    /** Category / folder where the item is stored. */
    category?: string | undefined;
    /** File name in Visma Sign. */
    fileName?: string | undefined;
    /** Logs the authentication service (e.g. 'tupas-osuuspankki', 'tupas-nordea') for later analyses.
All methods are available in https://sign.visma.net/api/v1/auth/methods (test: https://vismasign.frakt.io/api/v1/auth/methods) */
    authService?: string | undefined;
}

/** Data about the Signicat process. */
export interface SignicatData {
    /** Identifier of the document that is signed. */
    documentId?: string | undefined;
    /** Document summary after the signature has been done. */
    documentSummary?: any | undefined;
    /** URI to the signed PDF document: Full unique URI for the BlobFile. */
    pdfBlobUri?: string | undefined;
}

/** Defines a shareholder. At the moment, this is only a name and it is used only if the person has more than 25% of the shares. Expect this object to be developed with, Ownership percent or number of shares, Id or other such link to the actual person etc. */
export interface Shareholder {
    /** Name of the shareholder. */
    name?: string | undefined;
}

/** Search result list level of detail of companies coming from YTJ. */
export interface YtjSearchResultCompany {
    /** The Business ID (Y-tunnus / Business Identity Code) is a code given to businesses and organizations by the PRH or the Tax Administration. 
It consists of seven digits, a dash and a control mark, for example 1234567-8.
Alternative accepted formats incule international VAT number "FI12345678" or number without the dash: "12345678". */
    businessId?: string | undefined;
    /** Official name of the company. */
    name?: string | undefined;
    /** Numeric ID ("Yritysavain") */
    id?: number | undefined;
    /** Type of the company. This is a free text type. Not necessary parseable to company type enumeration in details. */
    type?: string | undefined;
}

/** Contact verification object for single message type. */
export interface OnboardingContactVerification {
    /** Given pin code. */
    pin?: string | undefined;
}

/** Legacy pricing partner information stored in the Person object */
export interface PersonPricingPartner {
    /** Partner account id. */
    accountId?: string | undefined;
    /** Pricing model by the partner. */
    pricingModel?: PricingModel | undefined;
    /** Fee for one calculation, which is visible and paid by customer.
This is not relevant if the PricingModel is PalkkausFee */
    fixedFee?: number | undefined;
    /** Service model by the partner. */
    serviceModelId?: string | undefined;
}

/** Data that is used for displaying the welcome page for the Worker account. */
export interface WelcomeDataWorker {
    /** The welcome page timeline cards. */
    timeline?: ApiListItem[] | undefined;
    /** Active taxcard added by the Worker or null, if none is added (or none is valid for today). */
    activeTaxcard?: Taxcard | undefined;
}

/** Full tax card that is stored in database and that is used in tax card percentage calculations. Also contains the salary history in the income log. */
export interface Taxcard {
    /** The Worker, whose salaries are paid based on this tax card. */
    worker?: Avatar | undefined;
    /** Employment for which the tax card is created. */
    employmentId?: string | undefined;
    /** The input that is coming from the Worker / Tax authorities */
    card: TaxcardInput;
    /** Calculations that have been paid to this tax card. */
    incomeLog?: TaxCardIncome[] | undefined;
    /** Read-only calculation results and other logic values on the Taxcard. */
    readonly result?: TaxcardResults | undefined;
    /** If the item is an employer instance of a shared taxcard, contains the original identifier
as URI ("[Server]/[PayloadType]/[Owner]/[Id]", e.g. "https://test-secure.salaxy.com/CalculationDTO/FI86POYL0009461858/16ea052e-f23f-4b72-83a9-b8f6590f0dc9");
This item cannot be set in Save - only in Approve method. */
    copyOfUri?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Input from user for a tax card: What is written in the card plus the state infomration that is directly editable by the user. */
export interface TaxcardInput {
    /** The personal ID as written in the tax card. */
    personalId: string;
    /** Tax card approval state */
    state?: TaxcardState | undefined;
    /** Year that the tax card is valid for. Typically this means from February of this year to January of the following. */
    forYear: number;
    /** Validity for the taxcard as expressed in the card.
Note that the end date may not be reliable if new taxcard has replaced this one. */
    validity?: DateRange | undefined;
    /** Tax percent as percent. I.e. for 50% set 50, not 0.5. */
    taxPercent?: number | undefined;
    /** Income up to which the TaxPercent can be used.
Any income above the limit is taxed with ExcessTaxPercent. */
    incomeLimit?: number | undefined;
    /** Tax percentage that is used in calculating the widthholding tax for the part of income above the IncomeLimit. */
    taxPercent2?: number | undefined;
    /** A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created. */
    taxPercentMin?: number | undefined;
    /** TaxPercentMin set by owner of the card.
This overrides the tax percent min set by the taxcard sharer. */
    taxPercentMinOwned?: number | undefined;
    /** Explicit value of when the item was last checked. At the moment, updated in API fetches only, but may be used later for other checks.
Undefined value is 1.1.2000 */
    lastChecked?: Date | undefined;
    /** The income type of the taxacard if fetched from the tax authorities taxcard API. */
    incomeType?: TaxcardApiIncomeType | undefined;
    /** Withholding Percentage may include Stock Options and Grants (information from the taxcard API).
This property is not currently in use. */
    includesStockOptionsAndGrants?: boolean | undefined;
    /** Type of the taxcard as of 2019, when the taxcards logic was simplified by the Finnish tazx authorities. */
    kind?: TaxcardKind | undefined;
    /** Uri to the file copy of the tax card. 
Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results. */
    fileUri?: string | undefined;
    /** Uri to the preview image of the tax card. 
Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results. */
    previewUri?: string | undefined;
}

/** Defines income that is recorded in a Taxcard: A paid salary calulation, income from previous employers or other salaries that affect the income calculation. */
export interface TaxCardIncome {
    /** Type of income */
    type?: TaxCardIncomeType | undefined;
    /** Calculation id in the Salaxy database.
If the calculation is not in the Salaxy Database, leave this null. */
    id?: string | undefined;
    /** Owner of the row, typically the employer that paid the salary.
Null meaning that it is the owner of the original taxcard. */
    owner?: string | undefined;
    /** A short description of the paid calculation.
This is a mandatory field if the Id is null. */
    description?: string | undefined;
    /** Beginning of the salary payment period from taxation point-of-view.
This is typically the same as CalcInfo.WorkStartDate, but may be different in edge cases. */
    startDate?: Date | undefined;
    /** End of the salary payment period from taxation point-of-view.
This is typically the same as CalcInfo.WorkEndDate, but may be different in edge cases. */
    endDate?: Date | undefined;
    /** The paidAt date which tells mainly to which year the payment should be attributed.
This is reliable only if the salary is paid by Salaxy (TaxCardIncomeType.SalaxyCalculation).
In other cases it is just the reporting date. */
    paidAt?: Date | undefined;
    /** Taxable income from this calculation */
    income?: number | undefined;
    /** Widthholding tax in euro */
    tax?: number | undefined;
    /** When loading calculations from the database (in taxcard Save and FindBy with diff), 
this property identifies the differences in the entry. */
    diff?: IncomeLogDiff | undefined;
}

/** Read-only calculations and other logic methods on a Taxcard. */
export interface TaxcardResults {
    /** Total income for the actual year, which is used for income limit.
Note that this does not include January income that may be paid for previous year taxcard. */
    readonly totalIncome?: number | undefined;
    /** Total income for January of the following year that is paid for previous year taxcard (this taxcard) if there is no new taxcard for January. */
    readonly totalIncomeJanuary?: number | undefined;
    /** Payments of the salary calculations that were made using Palkkaus.fi system (as opposed to external salaries etc) 
and that were marked to this card. These are for the actual year, which is used for income limit.
For Shared card, all employers are considered, for Owner copies of shared card, only salaries paid by owner is considered. */
    readonly payment?: number | undefined;
    /** Payments of the salary calculations that were made using Palkkaus.fi system (as opposed to external salaries etc) 
and that were marked to this card. These are for January of the following year that is paid for previous year taxcard (this taxcard) if there is no new taxcard for January.
For Shared card, all employers are considered, for Owner copies of shared card, only salaries paid by owner is considered. */
    readonly paymentJanuary?: number | undefined;
    /** Gets the validity of the taxcard today. This value reflects purely the date value - it does not take into account approval or replacement. */
    readonly validityToday?: TaxcardValidity | undefined;
}

/** Accounting data for reports. */
export interface AccountingData {
    /** All ledgers. */
    ledgerAccounts?: LedgerAccount[] | undefined;
    /** Basic information and visualization for the accounting target.
Avatar provides the visualization and the name for the target.
E-mail may be used in sending of the material and telephone in contacting the accounting target.
IBAN number has no use. */
    target?: AccountInIndex | undefined;
    /** The default export format for tabular (csv, excel) data. */
    format?: string | undefined;
    /** Finnish Business Identifier (Y-tunnus) for the company. */
    officialId?: string | undefined;
    /** Employer avatar */
    employer?: Avatar | undefined;
    /** Contact information for the report. Typically the employer, but may be something else. */
    contact?: Contact | undefined;
    /** Period for the report. */
    period?: DateRange | undefined;
    /** Summary containing relevant numbers for the report. For example,
number of calculations, gross and net amounts, payment amounts and Palkkaus fee. */
    summary?: AccountingDataSummary | undefined;
}

/** Represents a single accounting ledger. */
export interface LedgerAccount {
    /** Legder entries */
    entries?: LedgerEntry[] | undefined;
    /** Account number. */
    accountNumber?: string | undefined;
    /** Account name. */
    accountName?: string | undefined;
    /** Account grouping. */
    accountGrouping?: string | undefined;
    /** Current saldo for the ledger. */
    readonly saldo?: number | undefined;
}

/** Summary of the accounting data. Contains main figures: totals and workers and employer total figures. */
export interface AccountingDataSummary {
    /** The total number of calculations included in the report. */
    calculationCount?: number | undefined;
    /** The total number of distinct workers included in the report. */
    workerCount?: number | undefined;
    /** Total gross salary of the calculations included in the report. */
    readonly totalGrossSalary?: number | undefined;
    /** Total payment of the calculations included in the report. */
    readonly totalPayment?: number | undefined;
    /** Calculation totals that are common to both Worker and Employer. */
    totals?: TotalCalculationDTO | undefined;
    /** The calculation from the Employer point-of-view */
    employerCalc?: EmployerCalculationDTO | undefined;
    /** The calculation from the Worker point-of-view */
    workerCalc?: WorkerCalculationDTO | undefined;
    /** Calculation totals of accrued total holiday pay and related sidecosts. */
    holidayCalc?: HolidayCalculationDTO | undefined;
    /** Validation messages for the accounting data. */
    validation?: ApiValidation | undefined;
}

/** Represents a single ledger entry. */
export interface LedgerEntry {
    /** Id for the entry. */
    id?: string | undefined;
    /** Entry date. */
    entryDate?: Date | undefined;
    /** Entry description. */
    description?: string | undefined;
    /** Debit indicator. */
    isDebit?: boolean | undefined;
    /** Posted amount. Includes VAT. */
    amount?: number | undefined;
    /** VAT percent. */
    vatPercent?: number | undefined;
    /** VAT amount of specific VAT rate. */
    vatAmount?: number | undefined;
    /** Applied VAT rate. */
    vatRate?: VatRate | undefined;
    /** Account number. */
    accountNumber?: string | undefined;
    /** Account name. */
    accountName?: string | undefined;
    /** Account grouping. */
    accountGrouping?: string | undefined;
    /** Dimension data. */
    dimension?: { [key: string]: any; } | undefined;
}

/** Calculation totals of accrued total holiday pay and related sidecosts. */
export interface HolidayCalculationDTO {
    /** Total sum of accrued holiday pays. */
    totalAccruedHolidayPay?: number | undefined;
    /** Total sum of social security payments for accrued holiday pays. */
    totalAccruedHolidaySocialSecurity?: number | undefined;
    /** Total sum of pension payments for accrued holiday pays. */
    totalAccruedHolidayPension?: number | undefined;
    /** Total sum of unemployment insurance payments for accrued holiday pays. */
    totalAccruedHolidayUnemployment?: number | undefined;
    /** Total sum of paid holiday salaries. */
    totalPaidHolidaySalary?: number | undefined;
    /** Total sum of paid holiday bonuses. */
    totalPaidHolidayBonus?: number | undefined;
    /** Total sum of paid holiday compensation. */
    totalPaidHolidayCompensation?: number | undefined;
    /** Total sum of social security payments for paid holiday pays. */
    totalPaidHolidaySocialSecurity?: number | undefined;
    /** Total sum of pension payments for paid holiday pays. */
    totalPaidHolidayPension?: number | undefined;
    /** Total sum of unemployment insurance payments for paid holiday pays. */
    totalPaidHolidayUnemployment?: number | undefined;
}

/** Contents for the invoice status notification message. */
export interface InvoiceStatusNotification {
    /** Unique ID for the invoice in Salaxy system.
If omitted, the resolving to an invoice will be made using external id. */
    id?: string | undefined;
    /** External id can be set in the notification for the invoice for later messaging.
If the notification message contains an External Id AND regular Id, the External Id is updated in the Salaxy database.
If the notification contains External Id, but NO regular Id, an invoice is fetched based on External Id.
In the latter case, a non-existent Id or multiple invoices with the same External Id will throw an exception and the entire update process is canceled. */
    externalId?: string | undefined;
    /** New status for the invoice. Required main payload of the call. */
    status?: InvoiceStatus | undefined;
    /** Required Date for the transaction (booking date). */
    date?: Date | undefined;
    /** Required realized amount of the transaction. */
    amount?: number | undefined;
    /** Optional full name of the payment receiver. Should be sent only if the user or process has the possibility of changing the name. */
    receiverFullName?: string | undefined;
    /** Optional bank account IBAN of the receiver. Should be sent only if the user or process has the possibility of changing the IBAN. */
    receiverIban?: string | undefined;
    /** Optional payment reference number. Should be sent only if the user or process has the possibility of changing or removing the reference number.
Changing the reference number will typically lead to an error in the back office process that needs to be manually handled. */
    referenceNumber?: string | undefined;
    /** The payment type of the invoice. If the payment channel does not support the requested payment type (e.g. Salary),
it should set here the payment type that it used (e.g. Default).
Payment channel should also expect new types to be introduced, without that being a breaking change.
Currently, we expect Default always be supported. */
    paymentType?: InvoicePaymentType | undefined;
}

/** Absence Period with Worker information. */
export interface WorkerAbsencePeriod {
    /** WorkerAbsences storage object that contains the period */
    absencesId?: string | undefined;
    /** The Worker that owns the Absence period */
    worker?: Avatar | undefined;
    /** Period for the absance. */
    period?: DateRange | undefined;
    /** Cause / type of the absence */
    causeCode?: AbsenceCauseCode | undefined;
    /** If true, the absence is paid by the employer. */
    isPaid?: boolean | undefined;
    /** If true, annual leaves are accrued from the absence. If false, these days are deducted from the accrual.
By default, you may leave this null and it always follows the IsPaid. */
    isHolidayAccrual?: boolean | undefined;
    /** Amount of salary that is paid for the absense.
Currently not in use: Would be used in Incomes Register integration. */
    amount?: number | undefined;
    /** Additional information as recorded by the Employer. */
    notes?: string | undefined;
    /** Identifier in the source system is a key defined by a source system / partner system.
This is a pass-through string that is passed to the result calculations. */
    sourceId?: string | undefined;
}

export interface PageResultOfPayrollListItem {
    items?: PayrollListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of payrolls in the user interface. It contains header data of the payroll and is basis for searching, filtering and sorting. */
export interface PayrollListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: PayrollStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: PayrollData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Payroll specific business data for index. */
export interface PayrollData {
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Title that can be specified by the end user. */
    title?: string | undefined;
    /** What types of wages are paid with this payroll.
May affect the rendering of the user interface (e.g. for     holidays, hours and absences).
Also affects which Workers are show in the add / link dialog by default. */
    wageBasis?: WageBasis | undefined;
    /** Due date for the payroll. Date when the payment should be made to achieve SalaryDate. */
    dueDate?: Date | undefined;
    /** If true, all calculations have been validated and they are valid for payment.
If false, validation has not been done or some calculations are not valid for payment. */
    isReady?: boolean | undefined;
    /** Paid at date for the payroll. (Date of the employer's payment). */
    paymentDate?: Date | undefined;
    /** Start date of the default salary period */
    periodStart?: Date | undefined;
    /** End date of the default salary period */
    periodEnd?: Date | undefined;
    /** Count of calculations in this Payroll */
    calcCount?: number | undefined;
    /** If the Payroll is based on a template, this is the identifier of the template. */
    template?: string | undefined;
    /** ID of the calendar event that is scheduling creation of occurences from this template. */
    calendarEvent?: string | undefined;
    /** ID of the calendar event that created this occurence. */
    calendarOccurence?: string | undefined;
    /** The MessageThread Id, if this payroll is referred in a message thread. */
    messageThreadId?: string | undefined;
    /** Payment channel. */
    paymentChannel?: PaymentChannel | undefined;
}

/** Record for storing company or employment details. */
export interface Record {
    /** Salaxy ID of the worker / other paty. This value is required when inserting and cannot be edited later.
WorkerSnapshot is automatically updated upon save. */
    otherId?: string | undefined;
    /** Optional entity id, for example the employment relation for the worker. */
    entityId?: string | undefined;
    /** Entity type of the business object, which the records are targeted to. */
    entityType?: string | undefined;
    /** Record type. This should be based on customer specific enumeration. */
    recordType?: string | undefined;
    /** Start date of the record. */
    startDate?: Date | undefined;
    /** End date of the record. */
    endDate?: Date | undefined;
    /** Title for the record */
    title?: string | undefined;
    /** Textual content */
    text?: string | undefined;
    /** Attachments. */
    attachments?: Attachment[] | undefined;
    /** A usecase for creating and editing records.
In practice, a usecase is either a user interface or a microservice that provides a salary calculation
and it may be implemented outside Salaxy. */
    usecase?: UsecaseData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Attachment. */
export interface Attachment {
    /** Name of the attachment. E.g. monthly-details-2018-01.pdf */
    fileName?: string | undefined;
    /** Content for data. */
    contentId?: string | undefined;
}

export interface PageResultOfRecordListItem {
    items?: RecordListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of records in the user interface. */
export interface RecordListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: RecordData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Record specific business data for index. */
export interface RecordData {
    /** Record type. This should be based on customer specific enumeration. */
    recordType?: string | undefined;
    /** Key for the usecase based on which it is resolved. 
Later, this may resolve to a user interface, microservice or a to manifest registering one.
For now, just use a unique string starting with a domain you own. */
    usecaseUri?: string | undefined;
}

/** Reference object. For testing and development purposes only. This object is a typical business object. The implementation is based on the current development conventions. The reference objects have no meaning or use outside development or testing environments, and they should not be used in production for any business purpose. */
export interface ReferenceObject {
    /** Header for the reference object.
Contains typical header data of various types. */
    header?: ReferenceObjectHeader | undefined;
    /** Collection of events for the reference object. */
    events?: ReferenceObjectEvent[] | undefined;
    /** A usecase for reference objects.
In practice, a usecase is either a user interface or a microservice that provides an extension to the default Salaxy functionality,
and it may be implemented outside Salaxy. */
    usecase?: UsecaseData | undefined;
    /** The workflow data for manual editing and approval purposes. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Header for the reference object. Contains typical header data of various types. */
export interface ReferenceObjectHeader {
    /** A free text property, the description of the object. */
    description?: string | undefined;
    /** Enumerated property, the status for the object. */
    status?: BootstrapStyle | undefined;
    /** Nullable date property, the reference date for the object. */
    referenceDate?: Date | undefined;
}

/** A single event in the collection of events for the reference object. Contains typical row specific data of various types. */
export interface ReferenceObjectEvent {
    /** A free text property, the name of the event. */
    name?: string | undefined;
    /** Nullable date property, the  date for the event. */
    date?: Date | undefined;
    /** Enumerated property, the result for the event. */
    result?: BootstrapStyle | undefined;
}

export interface PageResultOfReferenceObjectListItem {
    items?: ReferenceObjectListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** List item for Reference object. For testing and development purposes only. This object is a typical list item for the business object. The implementation is based on the current development conventions. The reference objects have no meaning or use outside development or testing environments, and they should not be used in production for any business purpose. */
export interface ReferenceObjectListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: BootstrapStyle | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: ReferenceObjectData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

export interface ReferenceObjectData {
}

/** Describes a logical generated report. This is a report instance e.g. a monthly report for January 2017. It may contain several files of different types: PDF, preview PNG, HTML etc. */
export interface Report {
    /** Short title for the report that can be shown to the end user. */
    title?: string | undefined;
    /** Report date: For monthly and yearly reports this is the first day of the year/month.
For ad-hoc reports, this is the start date of the period. */
    reportDate?: Date | undefined;
    /** Type of the report */
    type?: ReportType | undefined;
    /** PDF report for viewing and printing. This is typically the main report.
For preview and demo, there is typically only HTML version - no PDF. */
    pdfUrl?: string | undefined;
    /** Thumbnail image for the report. 
For preview and demo data this is typically a fixed image - the thumbnail is only generated when PDF is generated. */
    thumbnail?: string | undefined;
    /** HTML for the report. Use salaxy-rpt.css for formatting.
For preview and demo, this is the format to show to the user - PDF is not generated. */
    htmlUrl?: string | undefined;
    /** Some reports are also available in JSON format, from which you can create lists, CSV, Excel files etc. */
    jsonUrl?: string | undefined;
    /** If true, the report is in preview state, typically in the middle of the month.
This means that the data itself is production, its just not final. */
    isPreview?: boolean | undefined;
    /** If true, the report is created using demo data - should be used only in the beginning when the user has not paid any salaries. 
This may be e.g. calculations in draft stage or completely invented demo data such as example workers.
Demo data should not be confused to test database (test-api.palkkaus.fi / test-api.salaxy.com): 
Paid calculations in test database are production data. */
    isDemoData?: boolean | undefined;
    /** Time when the PDF, HTML or JSON URL's expire IF they are generated in a way that
they are callable without authentication for a specified time period.
This property is null if the URL requires authentication. */
    urlsExpireAt?: Date | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Deserializable calculation. */
export interface ReportingCalculation {
    /** The employer object for this calculation.
Typically, you do not need to set this before the actual payment process. */
    employer?: CalcEmployer | undefined;
    /** The Worker (employee) that has performed the work. */
    worker?: CalcWorker | undefined;
    /** Information about the workflow and state of the calculation. */
    workflow?: CalcWorkflow | undefined;
    /** The main salary element. 
Alternatively the salary can be set in the Rows object - this will be the only way to set multiple salary rows (not yet supported). */
    salary?: Salary | undefined;
    /** Set of rows that make up the salary calculation:
Expenses, Benefits, deductions etc. Note that side costs are not rows. */
    rows?: UserDefinedRow[] | undefined;
    /** DEPRECIATED: Usecase will be replacing this functionality in a next major release.
The Framework Agreement (TES) parameters that affect the framework based side costs etc. of this calculation */
    framework?: TesParameters | undefined;
    /** A usecase for creating and editing salary calculations.
In practice, a usecase is either a user interface or a microservice that provides a salary calculation
and it may be implemented outside Salaxy.
Provides the possibility to store useacase specific data as part of calculation.
NOTE: This functionality will replace Framework property in a next major release. */
    usecase?: UsecaseData | undefined;
    /** The results of the calculation. In the API, this is a read-only object. */
    result?: CalculationResult | undefined;
    /** Information about the work that is not directly related to calculating salary and expenses. */
    info?: CalcInfo | undefined;
    /** Sharing of the calculation. This object cannot be modified directly, 
use specialized methods in Calculations service. */
    sharing?: CalculationSharing | undefined;
    /** Contains calculation specific data for accounting (both cost and financial accounting). */
    accounting?: CalculationAccounting | undefined;
    /** Worktime data that is stored as part of Salary calculation:
work days, absences, holidays and holiday accrual.
In the future may also contain relevant part of timesheet data (work hours). */
    worktime?: CalcWorktime | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Contains accounting rows for one or many calculations. */
export interface AccountingReportTable {
    /** All rows in the report table. */
    rows?: AccountingReportRow[] | undefined;
    /** Accounting report table type. */
    tableType?: AccountingReportTableType | undefined;
    /** Finnish Business Identifier (Y-tunnus) for the company. */
    businessId?: string | undefined;
    /** Employer avatar */
    employer?: Avatar | undefined;
    /** Contact information for the report. Typically the employer, but may be something else. */
    contact?: Contact | undefined;
    /** Period for the report. */
    period?: DateRange | undefined;
    /** Summary containing relevant numbers for the report. For example,
number of calculations, gross and net amounts, payment amounts and Palkkaus fee. */
    summary?: AccountingReportTableSummary | undefined;
}

/** Accounting report table row. */
export interface AccountingReportRow {
    /** Row type. Default is the Booking. */
    rowType?: AccountingReportRowType | undefined;
    /** Amount for the row: May be positive or negative(depending on the depet/credit and account type). */
    amount?: number | undefined;
    /** Percentage of the value added tax that is included in the amount. */
    vatPercent?: number | undefined;
    /** Proposed account number for the row. */
    accountNumber?: string | undefined;
    /** Proposed account text for the row. */
    accountText?: string | undefined;
    /** Returns product code. */
    productCode?: string | undefined;
    /** Returns product name. (Code or ResultCode in this order). */
    productName?: string | undefined;
    /** Text for the booking entry / header. */
    text?: string | undefined;
    /** Space separated set of class names for CSS styling purposes. */
    styles?: string | undefined;
    /** Count of units. Default is 1. */
    count?: number | undefined;
    /** Price for the unit. */
    price?: number | undefined;
    /** Unit identifier; */
    unit?: string | undefined;
    /** Additional information for the row. */
    additionalInformation?: string | undefined;
}

/** Summary of the accounting report. Contains main figures: totals and workers and employer total figures. */
export interface AccountingReportTableSummary {
    /** The total number of calculations included in the report. */
    count?: number | undefined;
    /** Calculation totals that are common to both Worker and Employer. */
    totals?: TotalCalculationDTO | undefined;
    /** The calculation from the Employer point-of-view */
    employerCalc?: EmployerCalculationDTO | undefined;
    /** The calculation from the Worker point-of-view */
    workerCalc?: WorkerCalculationDTO | undefined;
}

/** Calculation with additional cumulative data. */
export interface CumulativeCalculation {
    /** Cumulative data for the calculation. */
    cumulative?: { [key: string]: CumulativeData; } | undefined;
    /** The employer object for this calculation.
Typically, you do not need to set this before the actual payment process. */
    employer?: CalcEmployer | undefined;
    /** The Worker (employee) that has performed the work. */
    worker?: CalcWorker | undefined;
    /** Information about the workflow and state of the calculation. */
    workflow?: CalcWorkflow | undefined;
    /** The main salary element. 
Alternatively the salary can be set in the Rows object - this will be the only way to set multiple salary rows (not yet supported). */
    salary?: Salary | undefined;
    /** Set of rows that make up the salary calculation:
Expenses, Benefits, deductions etc. Note that side costs are not rows. */
    rows?: UserDefinedRow[] | undefined;
    /** DEPRECIATED: Usecase will be replacing this functionality in a next major release.
The Framework Agreement (TES) parameters that affect the framework based side costs etc. of this calculation */
    framework?: TesParameters | undefined;
    /** A usecase for creating and editing salary calculations.
In practice, a usecase is either a user interface or a microservice that provides a salary calculation
and it may be implemented outside Salaxy.
Provides the possibility to store useacase specific data as part of calculation.
NOTE: This functionality will replace Framework property in a next major release. */
    usecase?: UsecaseData | undefined;
    /** The results of the calculation. In the API, this is a read-only object. */
    result?: CalculationResult | undefined;
    /** Information about the work that is not directly related to calculating salary and expenses. */
    info?: CalcInfo | undefined;
    /** Sharing of the calculation. This object cannot be modified directly, 
use specialized methods in Calculations service. */
    sharing?: CalculationSharing | undefined;
    /** Contains calculation specific data for accounting (both cost and financial accounting). */
    accounting?: CalculationAccounting | undefined;
    /** Worktime data that is stored as part of Salary calculation:
work days, absences, holidays and holiday accrual.
In the future may also contain relevant part of timesheet data (work hours). */
    worktime?: CalcWorktime | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Cumulative data for a single calculation */
export interface CumulativeData {
    /** First and last Salary dates (days when Worker receives the salary) and number of payment days. */
    salaryDates?: DateRange | undefined;
    /** Working days based on the salary calculations. */
    workingDays?: DateRange | undefined;
    /** Dictionary of labels of the current data */
    labels?: { [key: string]: string; } | undefined;
    /** The cumulative data of the calculations. */
    data?: { [key: string]: number; } | undefined;
}

/** A summary report for an employer for a specific period (typically month or year). */
export interface SummaryReportData {
    statistics?: CalculationResultStatistics | undefined;
    /** Finnish Business Identifier (Y-tunnus) for the company. */
    businessId?: string | undefined;
    /** Employer avatar */
    employer?: Avatar | undefined;
    /** Contact information for the report. Typically the employer, but may be something else. */
    contact?: Contact | undefined;
    /** Start date for the report */
    startDate?: Date | undefined;
    /** End date for the report */
    endDate?: Date | undefined;
    /** The total sum information for the report - this is the main payload of the report */
    result?: CalculationResult | undefined;
    /** Individual calculations based on which the report is made.
Depending on the request, this may be filled in or null (as opposed to empty list). */
    calculations?: Calculation[] | undefined;
}

/** Statistics data calculated from the calculation result. */
export interface CalculationResultStatistics {
    /** The total number of calculations included in the report. */
    calculationCount?: number | undefined;
    /** The total number of distinct workers included in the report. */
    workerCount?: number | undefined;
    /** WorkerCalc.Pension / Totals.TotalSocialSecurityBase */
    pensionWorkerPercent?: number | undefined;
    /** WorkerCalc.UnemploymentInsurance / Totals.TotalSocialSecurityBase */
    unemploymentWorkerPercent?: number | undefined;
    /** WorkerCalc.Tax / Totals.TotalTaxable */
    taxPercent?: number | undefined;
    /** WorkerCalc.UnionPayment / Totals.TotalTaxable */
    unionPaymentPercent?: number | undefined;
}

/** Container for calculation report data. */
export interface CalculationReportData {
    /** Calculations as report rows. */
    rows?: { [key: string]: any; }[] | undefined;
    /** Ir Income type code labels */
    irLabels?: { [key: string]: string; } | undefined;
    /** Calculation row type labels */
    typeLabels?: { [key: string]: string; } | undefined;
    /** Total labels */
    totalLabels?: { [key: string]: string; } | undefined;
}

/** Container for accounting based report data. */
export interface AccountingRowReportData {
    /** Report row created from accounting base rows. */
    rows?: AccountingRowReportDataRow[] | undefined;
    /** Finnish Business Identifier (Y-tunnus) for the company. */
    officialId?: string | undefined;
    /** Employer avatar */
    employer?: Avatar | undefined;
    /** Contact information for the report. Typically the employer, but may be something else. */
    contact?: Contact | undefined;
    /** Period for the report. */
    period?: DateRange | undefined;
    /** Summary containing relevant numbers for the report. For example,
number of calculations, gross and net amounts, payment amounts and Palkkaus fee. */
    summary?: AccountingDataSummary | undefined;
}

/** Report row created from accounting base row data. */
export interface AccountingRowReportDataRow {
    /** Entry group: income type or total type */
    entryCodeGroup?: string | undefined;
    /** A single code in the code group: single income type code or total row. */
    entryCode?: string | undefined;
    /** Entry date. */
    entryDate?: Date | undefined;
    /** Entry description. */
    message?: string | undefined;
    /** Posted amount. Includes VAT. */
    amount?: number | undefined;
    /** VAT percent. */
    vatPercent?: number | undefined;
    /** VAT amount of specific VAT rate. */
    vatAmount?: number | undefined;
    /** Applied VAT rate. This is always mandatory. */
    vatRate?: VatRate | undefined;
    /** Dimension data. */
    dimension?: { [key: string]: any; } | undefined;
    /** Additional flags for directing the logic for creating accounting entry based on given entries. */
    flags?: string[] | undefined;
}

/** A summary report for a worker for a specific period (typically month or year) and selected employer. */
export interface WorkerSummaryReportData {
    statistics?: CalculationResultStatistics | undefined;
    /** Worker avatar */
    worker?: Avatar | undefined;
    /** Worker's socials security number */
    workerSocialSecurityNumber?: string | undefined;
    /** Worker's bank account number */
    workerIbanNumber?: string | undefined;
    /** Contact information for the report. Typically the employer, but may be something else. */
    workerContact?: Contact | undefined;
    /** Additional result data for the worker summary report. */
    workerResult?: WorkerSummaryResult | undefined;
    /** Finnish Business Identifier (Y-tunnus) for the company. */
    businessId?: string | undefined;
    /** Employer avatar */
    employer?: Avatar | undefined;
    /** Contact information for the report. Typically the employer, but may be something else. */
    contact?: Contact | undefined;
    /** Start date for the report */
    startDate?: Date | undefined;
    /** End date for the report */
    endDate?: Date | undefined;
    /** The total sum information for the report - this is the main payload of the report */
    result?: CalculationResult | undefined;
    /** Individual calculations based on which the report is made.
Depending on the request, this may be filled in or null (as opposed to empty list). */
    calculations?: Calculation[] | undefined;
}

/** Additional result data for the worker summary report. */
export interface WorkerSummaryResult {
    /** Cash salary row details. */
    cashSalary?: SummaryCalculationRows | undefined;
    /** Benefits details. */
    benefitsInKind?: SummaryCalculationRows | undefined;
    /** Expense details. */
    expenses?: SummaryCalculationRows | undefined;
}

/** Rows and totals for a set of calculation rows. */
export interface SummaryCalculationRows {
    /** Summary rows. */
    rows?: SummaryCalculationRow[] | undefined;
    /** Total sum of rows. */
    total?: number | undefined;
}

/** Row containing summary data for the summary report. */
export interface SummaryCalculationRow {
    /** Description text of the row that is shown in reports. */
    message?: string | undefined;
    /** Count for the row. */
    count?: number | undefined;
    /** Price for the row. */
    price?: number | undefined;
    /** Total sum. */
    total?: number | undefined;
    /** Usecase specific data
This contains especially row label parameters: calculationRowType, kind and code */
    data?: { [key: string]: any; } | undefined;
}

export interface TaxAtSourceUsecase {
    /** Tax value is either the fixed value (euro) or percentage (0-1) depending on the kind. */
    taxValue?: number | undefined;
    /** Deduction for the tax at source: Fixed, Monthly or Daily */
    deductionPrice?: number | undefined;
    /** Count of deduction units: 1 or number of months or days. */
    deductionCount?: number | undefined;
    /** Value of the deduction: Deduction * DeductionCount */
    deduction?: number | undefined;
    /** Total taxable value of the salary calculation. */
    totalTaxable?: number | undefined;
    /** Tax at source related employmment data. */
    employmentData?: TaxAtSource | undefined;
    /** List of allowed kinds (deductions based on source data).
Currently as a comma separated string. */
    allowedKinds?: string | undefined;
    /** Primary subtyping of the usecase. */
    kind?: TaxAtSourceKind | undefined;
}

/** Handles the Calculation of CalculationRowType.IrIncomeType to IrRows */
export interface IrIncomeTypeUsecase {
    /** Reporting details to Incomes registry (Tulorekisteri). */
    irData?: IrDetails | undefined;
    /** Primary subtyping of the usecase. */
    kind?: TransactionCode | undefined;
}

/** Handles the Calculation of CalculationRowType.Board to IrRows */
export interface BoardUsecase {
    /** Primary subtyping of the usecase. */
    kind?: BoardKind | undefined;
}

/** Handles the Calculation of CalculationRowType.Training to IrRows */
export interface TrainingUsecase {
    /** Primary subtyping of the usecase. */
    kind?: TrainingKind | undefined;
}

/** Handles the Calculation of CalculationRowType.NonProfitOrg to IrRows */
export interface NonProfitOrgUsecase {
    /** Primary subtyping of the usecase. */
    kind?: NonProfitOrgKind | undefined;
}

/** Handles the Calculation of CalculationRowType.Remuneration to IrRows */
export interface RemunerationUsecase {
    /** Primary subtyping of the usecase. */
    kind?: RemunerationKind | undefined;
}

/** Handles the Calculation of CalculationRowType.PaidSickLeave to IrRows */
export interface PaidSickLeaveUsecase {
    /** Primary subtyping of the usecase. */
    kind?: PaidSickLeaveKind | undefined;
}

/** Handles the Calculation of CalculationRowType.OtherCompensation to IrRows */
export interface OtherCompensationUsecase {
    /** Primary subtyping of the usecase. */
    kind?: OtherCompensationKind | undefined;
}

/** Handles the Calculation of CalculationRowType.EmploymentTermination to IrRows */
export interface EmploymentTerminationUsecase {
    /** Primary subtyping of the usecase. */
    kind?: EmploymentTerminationKind | undefined;
}

/** Handles the Calculation of CalculationRowType.WorkingTimeCompensation to IrRows */
export interface WorkingTimeCompensationUsecase {
    /** Primary subtyping of the usecase. */
    kind?: WorkingTimeCompensationKind | undefined;
}

/** Handles both the hourly salary and working time compensation to IrRows */
export interface HourlySalaryWithWorkingTimeCompensationUsecase {
    /** Collection of compensation rows. */
    compensationRows?: WorkingTimeCompensationRow[] | undefined;
    /** Primary subtyping of the usecase. */
    kind?: WorkingTimeCompensationKind | undefined;
}

/** Working time compensation row. */
export interface WorkingTimeCompensationRow {
    /** Kind for a single row. */
    rowKind?: WorkingTimeCompensationKind | undefined;
    /** Count for compensation row, can be 1 or percent. */
    count?: number | undefined;
    /** Compensation price, fixed price or calculated using percent. */
    price?: number | undefined;
    /** Message for compensation row */
    message?: string | undefined;
    /** Unit for compensation row: percent or hours. */
    unit?: CalculationRowUnit | undefined;
    /** Accounting related data for the row. */
    accounting?: RowAccounting | undefined;
}

/** Handles the Calculation of CalculationRowType.DailyAllowance to IrRows */
export interface DailyAllowanceUsecase {
    country?: string | undefined;
    /** If true, the daily allowance is paid in half: The Worker has received 2 free meals (1 if PartialDailyAllowance).
This information is currently not reported to Incomes Register, it is only as information for calculation. */
    isHalf?: boolean | undefined;
    /** Primary subtyping of the usecase. */
    kind?: DailyAllowanceKind | undefined;
}

export interface TaxWithholdingUsecase {
    /** Tax percent (0 - 1) {Palkkaus.Model.Usecases.CalculationRows.TaxWithholdingKind.Percentage} or fixed euro amount {Palkkaus.Model.Usecases.CalculationRows.TaxWithholdingKind.FixedValue} for tax with holding. */
    taxValue?: number | undefined;
    /** Primary subtyping of the usecase. */
    kind?: TaxWithholdingKind | undefined;
}

/** Optimizes the worker payments using the given target amount. */
export interface TotalWorkerPaymentUsecase {
    /** Calculation row type for adjusting the amount. */
    rowType?: CalculationRowType | undefined;
    /** Message for the row. */
    message?: string | undefined;
    /** Primary subtyping of the usecase. */
    kind?: TotalWorkerPaymentKind | undefined;
}

/** Handles the Calculation of CalculationRowType.BicycleBenefitUsecase to IrRows */
export interface BicycleBenefitUsecase {
    /** Deduction from salary */
    deduction?: number | undefined;
    /** Taxable amount of the benefit. */
    taxable?: number | undefined;
    /** Number of periods if Kind is PeriodicalDeduction. 
Otherwise this value is null. */
    periodDivider?: number | undefined;
    /** Primary subtyping of the usecase. */
    kind?: BicycleBenefitKind | undefined;
}

/** Handles the Calculation of CalculationRowType.SubsidisedCommute to IrRows */
export interface SubsidisedCommuteUsecase {
    /** Deduction from salary */
    deduction?: number | undefined;
    /** Taxable amount of the benefit. */
    taxable?: number | undefined;
    /** Number of periods if Kind is PeriodicalDeduction. 
Otherwise this value is null. */
    periodDivider?: number | undefined;
    /** Primary subtyping of the usecase. */
    kind?: SubsidisedCommuteKind | undefined;
}

/** Handles the Calculation of CalculationRowType.CarBenefitUsecase to IrRows */
export interface CarBenefitUsecase {
    /** Age group as in A,B,C or I for international. */
    ageGroup?: AgeGroupCode | undefined;
    /** If true, the calculation is kilometers based. */
    isKilometersBased?: boolean | undefined;
    /** Number of kilometers is filled in only if that type of benefit calculation is used. */
    kilometers?: number | undefined;
    /** Car emissions value

The car emissions value must be greater than or equal to 0, and smaller than or
equal to 100. The car emissions value can only be reported if the payment date
or other reporting date is in 2022–2025. */
    emissionsValue?: number | undefined;
    /** Deduction from salary */
    deduction?: number | undefined;
    /** Primary subtyping of the usecase. */
    kind?: CarBenefitKind | undefined;
}

/** Handles the Calculation of CalculationRowType.MealBenefit to IrRows */
export interface MealBenefitUsecase {
    /** Deduction from salary */
    deduction?: number | undefined;
    /** The taxable price calculated by the server. */
    taxablePrice?: number | undefined;
    /** If true, the deduction from Worker salary corresponds to taxable value. */
    isTaxValue?: boolean | undefined;
    /** If true, the deduction from Worker Salary has already been done or will be done and is not added to this calculation. */
    isTaxValueDeductionDone?: boolean | undefined;
    /** Primary subtyping of the usecase. */
    kind?: MealBenefitKind | undefined;
}

/** Handles the Calculation of CalculationRowType.UnionPayment to IrRows */
export interface UnionPaymentUsecase {
    /** Reference for the union payment. */
    referenceNumber?: string | undefined;
    /** The full name of the union for payment purposes. */
    recipientFullName?: string | undefined;
    /** The International Bank Account Number of the union. */
    iban?: string | undefined;
    /** Percentage of the total taxable amount to pay.
Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}. */
    paymentPercentage?: number | undefined;
    /** Maximum payment limit, or null if not desired.
Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}. */
    maximumPayment?: number | undefined;
    /** Minimum payment limit, or null if not desired.
Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}. */
    minimumPayment?: number | undefined;
    /** Primary subtyping of the usecase. */
    kind?: UnionPaymentKind | undefined;
}

/** Handles the Calculation of CalculationRowType.Foreclosure to IrRows */
export interface ForeclosureUsecase {
    /** Reference for the payment. */
    referenceNumber?: string | undefined;
    /** Length of the salary payment period. */
    periodLength?: number | undefined;
    /** Count of dependants of the debtor. Typically spouse and children. */
    dependantsCount?: number | undefined;
    /** Amount of the protected portion for each day. */
    protectedPortionBase?: number | undefined;
    /** Amount of the protected portion for each dependant for each day. */
    protectedPortionDependant?: number | undefined;
    /** Income from other sources. */
    incomeFromOtherSources?: number | undefined;
    /** Additional amount to be left to debtor. */
    additionalAmountLeftToDebtor?: number | undefined;
    /** Primary subtyping of the usecase. */
    kind?: ForeclosureKind | undefined;
}

/** Sample object for creating v03 controller */
export interface SampleApiObject {
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

export interface PageResultOfSampleListItem {
    items?: SampleListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Available Search index data of the Sample object */
export interface SampleListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: SampleData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Sample custom data in search index */
export interface SampleData {
    /** A test string */
    test?: string | undefined;
}

export interface ServiceModel {
    /** Name of the service model */
    name?: string | undefined;
    /** URL for the icon that represents the service model */
    icon?: string | undefined;
    /** Service model features, which can be switched on/off. */
    features?: ServiceModelFeatures | undefined;
    /** Default accounting settings. */
    accounting?: ServiceModelAccounting | undefined;
    /** Default cost accounting settings. */
    costAccounting?: ServiceModelCostAccounting | undefined;
    /** Default pricing settings. */
    pricing?: ServiceModelPricing | undefined;
    /** Default payment channels. */
    payments?: ServiceModelPayments | undefined;
    /** Partner branding settings: site logo, css etc. */
    branding?: ServiceModelBranding | undefined;
    /** Reporting layout settings. */
    reporting?: ServiceModelReporting | undefined;
    /** Default site for customers. */
    site?: ServiceModelSite | undefined;
    /** Settings related to usecases. */
    usecase?: ServiceModelUsecase | undefined;
    /** Settings related to messaging. */
    messaging?: ServiceModelMessaging | undefined;
    /** Settings related to the calculation data delivery by forms. */
    forms?: ServiceModelForms | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Service model features, which can be swithced on/off. */
export interface ServiceModelFeatures {
    /** If true, the messaging is switched on for this service model. */
    messaging?: boolean | undefined;
    /** If true, the calculation data delivery by forms is switched on. */
    forms?: boolean | undefined;
    /** If true, the service model accounting settings override company  settings. */
    accounting?: boolean | undefined;
    /** If true, the service model cost accounting settings override company  settings. */
    costAccounting?: boolean | undefined;
    /** If true, the service model payment settings override company  settings. */
    payments?: boolean | undefined;
    /** If true, the service model reporting settings override company settings. */
    reporting?: boolean | undefined;
    /** If true, the service model usecase settings override company settings. */
    usecase?: boolean | undefined;
}

/** Settings related to Accounting */
export interface ServiceModelAccounting {
    /** Default accounting target. */
    defaultTargetId?: string | undefined;
    /** Default period selection method:  PaidAt date (paid by employer), Salary date (paid to worker) or Work date (work done). The default is PaidAt date. */
    defaultPeriodDateKind?: PeriodDateKind | undefined;
    /** Accounting target systems and the rulesets assigned to them. */
    targets?: AccountingTargetSettings[] | undefined;
}

/** Settings related to Cost Accounting */
export interface ServiceModelCostAccounting {
    /** Cost accounting dimensions */
    dimensions?: CostAccountingDimensionDefinition[] | undefined;
}

/** Service model specific pricing settings for customers. */
export interface ServiceModelPricing {
    /** Pricing model by the partner. */
    pricingModel?: PricingModel | undefined;
    /** Fee for one calculation, which is visible and paid by customer.
This is not relevant if the PricingModel is PalkkausFee */
    fixedFee?: number | undefined;
}

/** Default payment channels for customers. */
export interface ServiceModelPayments {
    /** The default channel when making payments. */
    defaultChannel?: PaymentChannel | undefined;
    /** Channel specific settings. */
    channels?: PaymentChannelSettings[] | undefined;
}

/** Service model branding settings: logo, css etc. */
export interface ServiceModelBranding {
    /** Url to logo. */
    logo?: string | undefined;
    /** Css path. */
    skin?: string | undefined;
}

/** Defines the settings for producing reports: Mainly PDF's but also HTMl previews. */
export interface ServiceModelReporting {
    /** Identifier of the report layout template in id@partition or URI format. */
    layoutTemplateId?: string | undefined;
    /** Layouts may define some variables that may be overriden, e.g. colors, margins, font-sizes. */
    layoutTemplateVariables?: string | undefined;
    /** The company logo that is used by some Layouts */
    logo?: string | undefined;
}

/** Stores information about the web site that is used for customer (employer) to access the customer web site. */
export interface ServiceModelSite {
    /** Type of web app that the customer is using to interact in the service process. */
    webApp?: CustomerWebApp | undefined;
    /** Web application URL when the WebApp is Custom. */
    webAppUrl?: string | undefined;
    /** Name for the web application- */
    webAppName?: string | undefined;
    /** Override the translated texts for a service model.
Key in the dictionary is a full key starting from the language, e.g. "fi.SALAXY.NG1_Sitemap.home". */
    texts?: { [key: string]: string; } | undefined;
    /** Sitemap customizations based on product sitemap.
Key is a full sitemap id (dot path) and data is a dataobject that is merged to SiteMap. */
    sitemap?: { [key: string]: any; } | undefined;
}

/** Usecase related settings. */
export interface ServiceModelUsecase {
    /** Available usecases for the current account. */
    usecases?: UsecaseInSettings[] | undefined;
}

/** Settings related to Messaging. */
export interface ServiceModelMessaging {
    /** Enable partner communication. Enabled by default. */
    partnerMessages?: boolean | undefined;
    /** Options for the notification to be sent to the worker after the salary payment. */
    workerSalaryNotifications?: WorkerSalaryNotification[] | undefined;
    /** Options for the delivery of the payslip to the worker. */
    workerSalarySlipDeliveryMethods?: WorkerSalarySlipDeliveryMethod[] | undefined;
}

/** Settings related to the calculation data delivery by forms. */
export interface ServiceModelForms {
}

/** Specifies thee properties that are set for this accounting target in relation to the accounting channel. */
export interface AccountingTargetSettings {
    /** Id of the target definition. */
    id?: string | undefined;
    /** Channel is the technical transport mechanism to accounting software */
    channel?: AccountingChannel | undefined;
    /** The default export method for exports: whether automatic or manual. */
    method?: ExportMethod | undefined;
    /** If specified, defines the available methods in manual exports. */
    availableMethods?: ExportMethod[] | undefined;
    /** The default export format for tabular (csv, excel) data. */
    format?: string | undefined;
    /** Web hook url for notifications.
If any calculation changes in some past month, this url is called by the system to notify the company about the change.
The month of change ("month") is added as query parameter to the url automatically by the system. */
    webHookUrl?: string | undefined;
    /** Name and visualization for selection lists. */
    avatar?: Avatar | undefined;
    /** Usecase specific data */
    data?: { [key: string]: any; } | undefined;
}

/** Channel-specific payment settings */
export interface PaymentChannelSettings {
    /** Identifies the channel */
    channel?: PaymentChannel | undefined;
    /** If true, the channel is enabled for the current user */
    isEnabled?: boolean | undefined;
    /** Read-only property that tells whether the payment channel is available in the current session. */
    isAvailable?: boolean | undefined;
    /** Usecase specific data */
    data?: { [key: string]: any; } | undefined;
}

/** Usecase definition. */
export interface UsecaseInSettings {
    /** Uri of the usecase */
    uri?: string | undefined;
    /** Item type of the usecase */
    itemType?: ApiItemType | undefined;
    /** Short title for the usecase */
    label?: string | undefined;
    /** Status of the usecase in the settings.
The status affects the visibilty of the usecase. */
    status?: UsecaseStatus | undefined;
    /** Order setting for the usecases.
This is needed e.g. ad hoc reports. */
    order?: number | undefined;
}

export interface PageResultOfServiceModelListItem {
    items?: ServiceModelListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a partner service model. */
export interface ServiceModelListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: ServiceModelData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Service model specific business data for index. */
export interface ServiceModelData {
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Url to logo. */
    logo?: string | undefined;
    /** Css path. */
    skin?: string | undefined;
    /** Name for the web application- */
    webAppName?: string | undefined;
    /** Square icon for the service model. Used in listings etc. */
    icon?: string | undefined;
}

/** Passes the data about the authorization that is the bases for callin the services that require user authorization. */
export interface UserSession {
    /** If false, the current user needs to be authenticated or authenticated user does not have acces to the system. */
    isAuthorized?: boolean | undefined;
    /** If false, the current user does not have a credential in the system =&gt; need to redirect to login */
    hasCredential?: boolean | undefined;
    /** If false, the current user does not have a current account. 
If HasCredential is true, this means that the user should be redirected to Account creation wizard. */
    hasCurrentAccount?: boolean | undefined;
    /** Authorization status */
    status?: AuthorizationStatus | undefined;
    /** Avatar that should be shown for the current session.
Typically CurrentAccount.Avatar, but could theoretically be something different. */
    avatar?: Avatar | undefined;
    /** The current user credentials. */
    currentCredential?: SessionUserCredential | undefined;
    /** The current Palkkaus.fi-account that the user acting as */
    currentAccount?: IVerifiedAccount | undefined;
    /** Contains html for system alert. */
    systemAlertHtml?: string | undefined;
    /** Often needed settings directly in session object.
NOTE: For editing settings, request the full settings object separately. */
    settings?: AccountSettingsInSession | undefined;
}

/** An account that is verified. Typically this means a digitally signed contract. This means that the account also has an Identity object. However, as the Identity object contains confidential information, it is not necessarily present in all method calls. */
export interface IVerifiedAccount {
    /** Information about the verification of the account. 
NOTE that this object may not be present in many method calls - this is because it contains confidential information. */
    identity?: Identity | undefined;
    /** If true, the account has been verified. Typically this means a digitally signed contract.
This means that the account also has an Identity object.
However, as the Identity object contains confidential information, it is not necessarily present in all method calls. */
    readonly isVerified?: boolean | undefined;
    /** Avatar is the visual representation of the Account. */
    avatar?: Avatar | undefined;
    /** Contact information for the Account. */
    contact?: Contact | undefined;
    /** Language of the person/company. */
    language?: Language | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Pricing partner information. */
    partner?: string | undefined;
}

/** Read-only account settings in Session: These are the settings that should be immediately available in the regular UI without separate loading. */
export interface AccountSettingsInSession {
    /** Pension contracts for optional selection of cotnract in Worker / Calc UI's */
    pensionContracts?: PensionContract[] | undefined;
    /** Insurance contracts for optional selection of cotnract in Worker / Calc UI's */
    insuranceContracts?: InsuranceContract[] | undefined;
    /** If true, the reporting layout is customized and should be loadded from the server in preview and reporting. */
    hasCustomReport?: boolean | undefined;
    /** The default accounting target for accounting reports. */
    accountingTarget?: AccountingTargetSettings | undefined;
    /** Partner and service model */
    partner?: PrimaryPartnerSettings | undefined;
    /** The payment channels that are enabled for the current user. */
    paymentChannels?: PaymentChannel[] | undefined;
    /** Current default payment channel */
    defaultPaymentChannel?: PaymentChannel | undefined;
    /** Available usecases for the current user. */
    usecases?: UsecaseInSettings[] | undefined;
    /** Basic information about the avialable integrations: Server URL and supported behaviors in the future. */
    integration?: IntegrationInSession | undefined;
    /** Partner messages enabled. */
    partnerMessages?: boolean | undefined;
    /** Cost accounting model. */
    costAccounting?: CostAccountingInSession | undefined;
    /** Forms settings for session. */
    forms?: FormsInSession | undefined;
}

/** Defines a pension contract. */
export interface PensionContract {
    /** The pension company where the user has a contract. */
    company?: PensionCompany | undefined;
    /** The pension contract number that should be validated accordingly. */
    contractNumber?: string | undefined;
    /** Sub organization code for the Incomes Registry. */
    subOrgCode?: string | undefined;
    /** Pension discount percent. */
    pensionDiscountPercent?: number | undefined;
    /** Custom pension percent. */
    pensionPercent?: number | undefined;
    /** Read only pension percent which is valid if pension percent is not set. */
    readonly pensionDefaultPercent?: number | undefined;
    /** Unique identifier (guid) for the contract.
The value is automaticallyh added on the server side: Any input is ignored/invalid. Set as null for new contracts. */
    id?: string | undefined;
    /** Status of the contract */
    status?: SettingsStatus | undefined;
    /** If specified, defines the start date for the contract.
If in the future, the the contract is inactive. Null (default) means the contract is valid indefinetely from the past. */
    startDate?: Date | undefined;
    /** If specified, defines the end date for the contract. 
Date is inclusive meaning that if EndDate is 31.12., contract is valid until end-of-year: Valid on 31.12. and invalid 1.1.
If in the past, the the contract is inactive. Null (default) means the contract is valid indefinetely to future. */
    endDate?: Date | undefined;
}

/** Represents an insurance contract for employer or information that the employer knowingly does not have an insurance contract. The latter is legal when only a very small amount of salaries is paid. */
export interface InsuranceContract {
    /** If set to true, the insurance is set to a partner insurance. */
    isPartnerInsurance?: boolean | undefined;
    /** Company for the current insurance */
    company?: InsuranceCompany | undefined;
    /** The accident insurance contract number that should be validated accordingly. */
    contractNumber?: string | undefined;
    /** Percent for calculating the estimate for the accident insurance amount to pay. */
    insurancePercent?: number | undefined;
    /** Percent for calculating the estimate for the group life insurance amount to pay. */
    groupLifeInsurancePercent?: number | undefined;
    /** Unique identifier (guid) for the contract.
The value is automaticallyh added on the server side: Any input is ignored/invalid. Set as null for new contracts. */
    id?: string | undefined;
    /** Status of the contract */
    status?: SettingsStatus | undefined;
    /** If specified, defines the start date for the contract.
If in the future, the the contract is inactive. Null (default) means the contract is valid indefinetely from the past. */
    startDate?: Date | undefined;
    /** If specified, defines the end date for the contract. 
Date is inclusive meaning that if EndDate is 31.12., contract is valid until end-of-year: Valid on 31.12. and invalid 1.1.
If in the past, the the contract is inactive. Null (default) means the contract is valid indefinetely to future. */
    endDate?: Date | undefined;
}

/** Settings related to the primary partner, service model and settings */
export interface PrimaryPartnerSettings {
    /** Partner account id. */
    accountId?: string | undefined;
    /** TODO: Consider is this the right place for the all this info or should we have only the input here. */
    info?: AccountantInfo | undefined;
    /** If true, the accountant is a registered Palkkaus.fi account who typically has access to this account. */
    type?: AccountantType | undefined;
    /** Id of the service model. */
    serviceModelId?: string | undefined;
    /** Defines the service model for the customer. */
    serviceModel?: PartnerServiceModel | undefined;
}

/** Settings related to Integrations that should be immediately available with session without separate load. */
export interface IntegrationInSession {
    /** URL to custom staging / integration server.
Used in running custom usecases and other custom integrations (currently imports). */
    serverUrl?: string | undefined;
}

/** Cost accounting models for session. */
export interface CostAccountingInSession {
    /** Cost accounting dimensions */
    dimensions?: CostAccountingDimensionDefinition[] | undefined;
}

/** Settings for session related to the calculation data delivery by forms. */
export interface FormsInSession {
}

/** Accountant details. */
export interface AccountantInfo {
    /** Avatar for the account */
    avatar?: Avatar | undefined;
    /** Official id of the person or company. */
    officialId?: string | undefined;
    /** Email address. */
    email?: string | undefined;
    /** Telephone number. */
    telephone?: string | undefined;
    /** Bank account number (IBAN) */
    ibanNumber?: string | undefined;
}

/** Defines how the primary partner services the customer TODO: To be designed, see G:\My Drive\Tech\Phase 7\Settings\Palvelumallit.pptx */
export interface PartnerServiceModel {
    /** The main product package that defines the product features. */
    features?: ServiceModelFeatures | undefined;
    /** Picing settings. */
    pricing?: ServiceModelPricing | undefined;
    /** Partner branding settings: site logo, css etc. */
    branding?: ServiceModelBranding | undefined;
    /** Default site for customers. */
    site?: ServiceModelSite | undefined;
}

/** Provides the settings for a Company Employer account (all settings details for employer). */
export interface CompanyAccountSettings {
    /** Salary calculation related settings. */
    calc?: CalculationSettings | undefined;
    /** Reporting and layout related settings. */
    reporting?: ReportingSettings | undefined;
    /** Primary partner, service model and pricing. */
    partner?: PrimaryPartnerSettings | undefined;
    /** Defines how accounting is done and to which target it is exported / sent. */
    accounting?: AccountingSettings | undefined;
    /** Cost accounting settings, e.g. cost centers and projects. */
    costAccounting?: CostAccountingSettings | undefined;
    /** Settings related to making of the payments. */
    payments?: PaymentSettings | undefined;
    /** Custom usecases. */
    usecase?: UsecaseSettings | undefined;
    /** Settings related to messaging. */
    messaging?: MessagingSettings | undefined;
    /** Settings related to the calculation data delivery by forms. */
    forms?: FormsSettings | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
}

/** Settings that affect the calculation result of the salaries. */
export interface CalculationSettings {
    /** Collection of pension contracts. In most cases, employer has only one, but in edge cases there may be several. */
    pensionContracts?: PensionContract[] | undefined;
    /** Collection of mandatory accident insurance contracts.
In most cases, employer has only one, but in edge cases there may be several. */
    insuranceContracts?: InsuranceContract[] | undefined;
    /** Settings related to unemployment insurance. */
    unemploymentInsurance?: UnemploymentInsuranceSettings | undefined;
    /** Settings related to reporting the salaries to authorities through Incomes Register. */
    incomesRegister?: IncomesRegisterSettings | undefined;
    /** Contains default calculation rows for the company.
Typically used for setting for example monthly salary or hourly salary price for all workers. */
    salaryDefaults?: UserDefinedRow[] | undefined;
}

/** Defines the settings for producing reports: Mainly PDF's but also HTMl previews. */
export interface ReportingSettings {
    /** If true, the service model is not applied to this feature. */
    denyServiceModel?: boolean | undefined;
    /** Identifier of the report layout template in id@partition or URI format. */
    layoutTemplateId?: string | undefined;
    /** Layouts may define some variables that may be overriden, e.g. colors, margins, font-sizes. */
    layoutTemplateVariables?: string | undefined;
    /** The company logo that is used by some Layouts */
    logo?: string | undefined;
}

/** Settings related to Accounting */
export interface AccountingSettings {
    /** If true, the service model is not applied to this feature. */
    denyServiceModel?: boolean | undefined;
    /** Default accounting target. */
    defaultTargetId?: string | undefined;
    /** Accounting target systems and the rulesets assigned to them. */
    targets?: AccountingTargetSettings[] | undefined;
    /** Default period selection method:  PaidAt date (paid by employer), Salary date (paid to worker) or Work date (work done). The default is PaidAt date. */
    defaultPeriodDateKind?: PeriodDateKind | undefined;
    /** Options for accounting report delivery for the company.
These are not affected by the service model. */
    reportDelivery?: AccountingReportDelivery | undefined;
    /** Options for accounting report delivery for the Accountant.
These are not affected by the service model. */
    accountantReportDelivery?: AccountingReportDelivery | undefined;
}

/** Settings related to Cost Accounting */
export interface CostAccountingSettings {
    /** If true, the service model is not applied to this feature. */
    denyServiceModel?: boolean | undefined;
    /** Cost accounting dimensions */
    dimensions?: CostAccountingDimensionDefinition[] | undefined;
}

/** Payment related settings. */
export interface PaymentSettings {
    /** If true, the service model is not applied to this feature. */
    denyServiceModel?: boolean | undefined;
    /** Settings related to payment methods that use the customer funds account (gross payment). */
    customerFunds?: CustomerFundsSettings | undefined;
    /** Settings related to invoices: Either salary payment or other invoicing. */
    invoice?: InvoiceSettings | undefined;
    /** The default channel when making payments. */
    defaultChannel?: PaymentChannel | undefined;
    /** Channel specific settings. */
    channels?: PaymentChannelSettings[] | undefined;
}

/** Usecase related settings. */
export interface UsecaseSettings {
    /** If true, the service model is not applied to this feature. */
    denyServiceModel?: boolean | undefined;
    /** Available usecases for the current account. */
    usecases?: UsecaseInSettings[] | undefined;
    /** URL to custom staging / integration server.
Used in running custom usecases and other custom integrations (currently imports). */
    serverUrl?: string | undefined;
}

/** Settings related to Messaging */
export interface MessagingSettings {
    /** If true, the service model is not applied to this feature. */
    denyServiceModel?: boolean | undefined;
    /** Partner messages enabled. */
    partnerMessages?: boolean | undefined;
    /** Options for the notification to be sent to the worker after the salary payment. */
    workerSalaryNotifications?: WorkerSalaryNotification[] | undefined;
    /** Options for the delivery of the payslip to the worker. */
    workerSalarySlipDeliveryMethods?: WorkerSalarySlipDeliveryMethod[] | undefined;
}

/** Settings related to the calculation data delivery by forms. */
export interface FormsSettings {
    /** If true, the service model is not applied to this feature. */
    denyServiceModel?: boolean | undefined;
}

/** Settings related to unemployment insurance. */
export interface UnemploymentInsuranceSettings {
    /** Status for indicating whether the total amount of paid salaries exceeds the thresold for higher unemployment insurance percent. */
    payrollLimitStatus?: UnemploymentPayrollLimitStatus | undefined;
}

export interface IncomesRegisterSettings {
    /** The reference number for the tax authorities */
    taxReferenceNumber?: string | undefined;
    /** Defines how the reporting is done for Incomes registry (Tulorekisteri). */
    irReporting?: TaxReportHandling | undefined;
}

/** Settings for Accounting report delivery. */
export interface AccountingReportDelivery {
    /** If true, the delivery is active. */
    isEnabled?: boolean | undefined;
    /** Address for delivery. Currently only email supported. */
    address?: string | undefined;
}

/** Settings related to payment methods that use the customer funds account (gross payment). */
export interface CustomerFundsSettings {
    /** If true, worker salary and expense payments are paid directly by the employer. */
    isWorkerSelfHandling?: boolean | undefined;
    /** If true, the user handles the reporting and payments himself/herself. */
    isPensionSelfHandling?: boolean | undefined;
    /** If true, tax and social security payments are paid directly by the employer. */
    isTaxAndSocialSecuritySelfHandling?: boolean | undefined;
}

/** Stores the CSS and images for the report creation. */
export interface ReportingLayoutTemplate {
    /** HTML template for the print header.
Use the following handlebars tags to inject values into the header:

- `{{ date }}` Logical report date, e.g.Salary date for salary slip.
- `{ { today } }` Printing date of the report.
- `{{ title }}` Report specific title, e.g. "Palkkalaskelma".
- `{{ subTitle}}` Report specific sub title, e.g. "Palkkapäivä 1.6.2020".
- `{{&gt; pageNumber }}` Current page number.Rendered as SPAN element.
- `{ {&gt; totalPages } }` total pages in the document.Rendered as SPAN element.
- `{ {&gt; logo } }` The main logo for the page as uploaded to settings.Rendered as SVG or IMG element.
- `{ {&gt; img2 } }` Secondary image as uploaded to settings.Rendered as SVG or IMG element. */
    headerTemplate?: string | undefined;
    /** HTML template for the print footer.
Use the following handlebars tags to inject values into the footer:

- `{{ date }}` Logical report date, e.g.Salary date for salary slip.
- `{ { today } }` Printing date of the report.
- `{{ title }}` Report specific title, e.g. "Palkkalaskelma".
- `{{ subTitle}}` Report specific sub title, e.g. "Palkkapäivä 1.6.2020".
- `{{&gt; pageNumber }}` Current page number.Rendered as SPAN element.
- `{ {&gt; totalPages } }` total pages in the document.Rendered as SPAN element.
- `{ {&gt; logo } }` The main logo for the page as uploaded to settings.Rendered as SVG or IMG element.
- `{ {&gt; img2 } }` Secondary image as uploaded to settings.Rendered as SVG or IMG element. */
    footerTemplate?: string | undefined;
    /** Additional CSS that is used to customize the layout of the report. */
    css?: string | undefined;
    /** Main logo image as embedded SVG or image (HTML).
This should preferably be an SVG or alternatively an image tag with data uri. */
    logo?: string | undefined;
    /** Secondary image that can be used in header / footer as embedded SVG or image (HTML).
This should preferably be an SVG or alternatively an image tag with data uri. */
    img2?: string | undefined;
    /** Defines the margins of the content area */
    margin?: ReportingArea | undefined;
    /** Print background graphics if such are added to the report using css property above. */
    printBackground?: boolean | undefined;
}

export interface ReportingArea {
    /** Top margin. */
    top?: number | undefined;
    /** Right margin. */
    right?: number | undefined;
    /** Bottom margin. */
    bottom?: number | undefined;
    /** Left margin. */
    left?: number | undefined;
}

export interface PageResultOfBrandListItem {
    items?: BrandListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of brands. */
export interface BrandListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: BrandData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Brand specific business data for index. */
export interface BrandData {
    /** Url to logo. */
    logo?: string | undefined;
    /** Css path. */
    skin?: string | undefined;
}

export interface PageResultOfPrimaryPartnerListItem {
    items?: PrimaryPartnerListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of primary partners in the user interface. It contains all essential information of the report and is basis for searching, filtering and sorting. */
export interface PrimaryPartnerListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: PrimaryPartnerData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Primary partner specific business data for index. */
export interface PrimaryPartnerData {
    /** Human-readable, human decided, recognizable short unique key for the partner:
All lower-case, a-z, 0-9, "-" and "_". Used in URL's etc. */
    key?: string | undefined;
    /** Display name for the account. */
    name?: string | undefined;
    /** Description of the primary account. */
    description?: string | undefined;
}

/** Provides the results of the tax card calculation and business logic. */
export interface TaxcardResult {
    /** Sum of income for this year based on the items marked on the tax card. */
    yearlyPreviousIncome?: number | undefined;
    /** Provides a decimal number for a recommended widthholding tax IF it is possible to calculate that based on given information.
Null, if the information is not sufficient to give a recommendation. */
    tax?: number | undefined;
}

export interface PageResultOfTaxcardListItem {
    items?: TaxcardListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** List item of taxcard searches. */
export interface TaxcardListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: TaxcardState | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: TaxcardData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Tax card specific business data for index. */
export interface TaxcardData {
    /** Year that the tax card is valid for. Typically this means from February of this year to January of the following. */
    forYear?: number | undefined;
    /** Tax percent as percent. I.e. for 50% set 50, not 0.5. */
    taxPercent?: number | undefined;
    /** Income up to which the TaxPercent can be used.
Any income above the limit is taxed with ExcessTaxPercent. */
    incomeLimit?: number | undefined;
    /** Total income paid to the taxcard during the year (forYear). */
    totalIncome?: number | undefined;
    /** Tax percentage that is used in calculating the widthholding tax for the part of income above the IncomeLimit. */
    taxPercent2?: number | undefined;
    /** A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created. */
    taxPercentMin?: number | undefined;
    /** The income type of the taxacard if fetched from the tax authorities taxcard API. */
    incomeType?: TaxcardApiIncomeType | undefined;
    /** The type of the tax card. */
    kind?: TaxcardKind | undefined;
    /** Employment id. */
    employmentId?: string | undefined;
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Start date of the taxcard validity */
    start?: Date | undefined;
    /** End date of the taxcard validity. This may be null on NoTaxcard types. */
    end?: Date | undefined;
    /** If the item is an employer instance of a shared taxcard, contains the original identifier
as URI ("/[PayloadType]/[Owner]/[Id]", e.g. "/CalculationDTO/FI86POYL0009461858/16ea052e-f23f-4b72-83a9-b8f6590f0dc9");
This item cannot be set in Save - only in Approve method. */
    copyOfUri?: string | undefined;
    /** Validity resolved as enumeration in relation to payment date given in the query.
This is not available in direct database OData queries as it is relevant to current / given date. */
    validity?: TaxcardValidity | undefined;
    /** Uri to the file copy of the tax card. */
    fileUri?: string | undefined;
    /** Uri to the preview image of the tax card. */
    previewUri?: string | undefined;
}

/** Provides a a result to query of whether a taxcard exists for a personal ID (no personal information). */
export interface SharedTaxcardExistsResult {
    /** Returns true if a shared taxcard exists. */
    sharedExists?: boolean | undefined;
    /** Returns true if there is already an owned taxcard for the employer. */
    ownedExists?: boolean | undefined;
    /** Uri for the Shared taxcard */
    uri?: string | undefined;
    /** If Owned taxcard exists, it is returned here. */
    ownedTaxcard?: Taxcard | undefined;
    /** If true there was an error fetching the information.
Typically, this would be that there were too many attempts to fetch Personal ID's and request was classified as phishing.
In this case, you should currently create the employment relation and fetch the taxcard infor after that. 
We may later introduce a "Are you robot" type of interface to go around this (if necessary). */
    isError?: boolean | undefined;
    /** Type of the taxcard. Undefined if none is found. */
    kind?: TaxcardKind | undefined;
    /** Validity of the taxcard. Note that this property is null when Exists is false. */
    validity?: DateRange | undefined;
    /** The personal ID that was used in fetching.
It may be validated and formatted, or just the original string if there were issues. */
    personalId?: string | undefined;
}

/** Contains the status and necessary data with Workers current taxcards. */
export interface WorkerCurrentTaxcards {
    /** The currently active taxcard if one exists. This property is null by default. */
    active?: Taxcard | undefined;
    /** All the relevant taxcards as list items.
For Workes own taxcards search (MyTaxcards) this is ownerd cards only */
    list?: TaxcardListItem[] | undefined;
    /** Employer taxcards from all Employers for the Worker account.
All available within the searched timestring. This list is only available for the Worker, not for the Employer. */
    employers?: TaxcardListItem[] | undefined;
    /** Personal ID that is used for taxcard binding. This always exists as opposed to Employment. */
    personalId?: string | undefined;
    /** Employment relation if the search is done based on employment relation ID and not Current worker account. */
    employment?: AccountInIndex | undefined;
    /** A shared taxcard waiting for approval if one exists. This property is null by default. */
    waitingApproval?: TaxcardWaitingApproval | undefined;
    /** Employment preference for the taxcard. */
    employmentTaxcard?: EmploymentRelationTaxcard | undefined;
}

/** Informs the employer that there is a Worker taxcard waiting for approval potentially without revealing personal information. */
export interface TaxcardWaitingApproval {
    /** URI for the shared card: This is the taxcard owned by the Worker and to view it 
you need to request your own copy (would be in FullCard). */
    uri?: string | undefined;
    /** Type of the taxcard. */
    kind?: TaxcardKind | undefined;
    /** Status of the taxcard */
    state?: TaxcardState | undefined;
    /** Time when the taxcard was added. */
    createdAt?: Date | undefined;
    /** Owner account that added the taxcard. */
    owner?: Avatar | undefined;
    /** If true, the relation has not yet been confirmed:
I.e. the employer has just input the Finnish Personal Id (HETU) of the Worker.
The employment relation is confirmed when salaries are paid or salary request is received from Worker. */
    isRelationUnconfirmed?: boolean | undefined;
    /** If there is an owner instance of taxcard for the employer, the copy is added here.
Instance exists only if there is a confirmed employment relation or if employer explicitly requests the taxcard. */
    fullCard?: Taxcard | undefined;
}

/** Test object with value properties. */
export interface TestValues {
    /** Test integer. */
    intValue?: number | undefined;
    /** Test double. */
    doubleValue?: number | undefined;
    /** Test decimal. */
    decimalValue?: number | undefined;
    /** Test string. */
    stringValue?: string | undefined;
    /** Test DateTime. */
    dateTimeValue?: Date | undefined;
    /** Test Date. */
    dateValue?: Date | undefined;
    /** Test bool. */
    boolValue?: boolean | undefined;
    /** Test object. */
    objectValue?: any | undefined;
    /** Test array */
    arrayValue?: any[] | undefined;
    /** Test enum */
    enumValue?: TestEnum | undefined;
    /** Free values dictionary. */
    dictValue?: { [key: string]: any; } | undefined;
}

/** Object containing essential details of the test account */
export interface TestAccountInfo {
    /** Bearer token for authentication. */
    token?: string | undefined;
    /** The current user credentials. */
    userCredential?: SessionUserCredential | undefined;
}

/** View model data for Simple Federation Flow sample page in /MyAccount/Federation */
export interface FederationSampleViewModel {
    /** The federation data based on the current user */
    federationData?: OpenIdUserInfoSupportedClaims | undefined;
    /** Federation data as JSON: Only used by depricated Asp.Net MVC version of the demo view. */
    federationDataJson?: string | undefined;
    customFederationDataJson?: string | undefined;
    /** Federation data as JWT */
    token?: string | undefined;
    /** Certificate password for signing */
    certificatePwd?: string | undefined;
    /** Uploaded certificate file */
    certificateFile?: HttpPostedFileBase | undefined;
    /** Certificate bytes as Base64String */
    certificateBytes?: string | undefined;
    /** Account to impersonate. */
    accountId?: string | undefined;
}

/** Part of the OpenId specification that is supported by Salaxy federated authentication / Authorization. */
export interface OpenIdUserInfoSupportedClaims {
    /** REQUIRED. Issuer Identifier for the Issuer of the response. 
The iss value is a case-sensitive URL using the https scheme that contains scheme, host, and optionally, port number and path components and no query or fragment components. */
    iss?: string | undefined;
    /** In Salaxy federation this should be the federation endpoint: "https://secure.salaxy.com/security/federation" in production
OR "https://test-api.salaxy.com/security/federation" in the test environment.
From the spec: REQUIRED. Audience(s) that this ID Token is intended for. 
It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value. 
It MAY also contain identifiers for other audiences.
In the general case, the aud value is an array of case-sensitive strings.
In the common special case when there is one audience, the aud value MAY be a single case-sensitive string. */
    aud?: string | undefined;
    /** REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing. 
The processing of this parameter requires that the current date/time MUST be before the expiration date/time listed in the value.
Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. 
Its value is a JSON [RFC7159] number representing the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time.
See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular. */
    exp?: number | undefined;
    /** REQUIRED. Subject - Identifier for the End-User at the Issuer. */
    sub: string;
    /** End-User's full name in displayable form including all name parts, possibly including titles and suffixes, 
ordered according to the End-User's locale and preferences.
NOTE: In creating account etc., Salaxy will use given_name and family_name separately and therefore ignore the name. */
    name?: string | undefined;
    /** Given name(s) or first name(s) of the End-User. */
    given_name?: string | undefined;
    /** Surname(s) or last name(s) of the End-User. */
    family_name?: string | undefined;
    /** URL of the End-User's profile picture.
This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. */
    picture?: string | undefined;
    /** End-User's preferred e-mail address.
Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax.
The RP MUST NOT rely upon this value being unique, as discussed in Section 2.5.3. */
    email?: string | undefined;
    /** True if the End-User's e-mail address has been verified; otherwise false. 
IMPORTANT: In Salaxy federation context, avoid sending non-confirmed e-mails. This may later become an error without being considered a breaking change.
When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. 
The means by which an e-mail address is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. */
    email_verified?: boolean | undefined;
    /** End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
The year MAY be 0000, indicating that it is omitted.
To represent only the year, YYYY format is allowed.
Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates. */
    birthdate?: Date | undefined;
    /** End-User's locale, represented as a BCP47 [RFC5646] language tag.
This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash.
For example, en-US or fr-CA. */
    locale?: string | undefined;
    /** End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400.
If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678. */
    phone_number?: string | undefined;
    /** True if the End-User's phone number has been verified; otherwise false.
When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed.
The means by which a phone number is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format. */
    phone_number_verified?: boolean | undefined;
    /** End-User's preferred postal address.
The value of the address member is a JSON [RFC4627] structure containing some or all of the members defined in Section 2.5.1. */
    address?: OpenIdUserInfoAddress | undefined;
    /** Time the End-User's information was last updated.
Its value is a JSON number representing the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time. */
    updated_at?: number | undefined;
    /** Salaxy extension to Open ID Connect UserInfo claims for Company federation. */
    "https://salaxy.com/federation/company"?: UserInfoCompanyAccount | undefined;
    /** Salaxy extension to Open ID Connect UserInfo claims for Personal account federation. */
    "https://salaxy.com/federation/person"?: UserInfoPersonAccount | undefined;
    /** Salaxy extension to Open ID Connect UserInfo claims for Application data. */
    "https://salaxy.com/federation/app"?: UserInfoApplication | undefined;
}

export interface HttpPostedFileBase {
    readonly contentLength?: number | undefined;
    readonly contentType?: string | undefined;
    readonly fileName?: string | undefined;
    readonly inputStream?: Stream | undefined;
}

/** The Address Claim represents a physical mailing address in OpenID Connect UserInfo response message. This object is modeled according to: http://openid.net/specs/openid-connect-basic-1_0.html#AddressClaim */
export interface OpenIdUserInfoAddress {
    /** Full street address component, which MAY include house number, street name, Post Office Box, and multi-line extended street address information. */
    street_address?: string | undefined;
    /** City or locality component. */
    locality?: string | undefined;
    /** Zip code or postal code component. */
    postal_code?: string | undefined;
}

/** Salaxy extension to Open ID claims for company federation. */
export interface UserInfoCompanyAccount {
    /** If true, the authorization is made for a company account. 
The root user claims are just for a current user acting in behalf of the company.
If false, the entire CompanyClaims object will be ignored. */
    as_company?: boolean | undefined;
    /** The Business ID (Y-tunnus / Business Identity Code) is a code given to businesses and organizations by the PRH or the Tax Administration. 
It consists of seven digits, a dash and a control mark, for example 1234567-8.
Alternative accepted formats incule international VAT number "FI12345678" or number without the dash: "12345678". */
    business_id: string;
    /** One of the Salaxy Finnish company type shortcuts: fiOy, fiTm, fiRy, fiYy (Other) */
    type: CompanyType;
    /** Company name - the owner of the Salaxy account and shown in salary calculations, reports and invoices.
Typically this is the official full name of the company as in Business registry. */
    name?: string | undefined;
    /** URL of the Company profile picture.
This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. 
The URL SHOULD specifically reference a company logo picture (PNG preferred) and it should be a square. If not, it may be converted, cropped and/or extended. */
    picture?: string | undefined;
    /** The company's preferred e-mail address in relation to salary payments.
Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. */
    email?: string | undefined;
    /** True if the Company's e-mail address has been verified; otherwise false.
IMPORTANT: In Salaxy federation context, avoid sending non-confirmed e-mails. This may later become an error without being considered a breaking change.
When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. 
The means by which an e-mail address is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. */
    email_verified?: boolean | undefined;
    /** Company's preferred telephone number for salary payment purposes. 
E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400.
If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678. */
    phone_number?: string | undefined;
    /** True if the Company's phone number has been verified; otherwise false.
When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed.
The means by which a phone number is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format. */
    phone_number_verified?: boolean | undefined;
    /** Company's preferred postal address in relation to salary payments.
The value of the address member is a JSON [RFC4627] structure containing some or all of the members defined in Section 2.5.1. */
    address?: OpenIdUserInfoAddress | undefined;
    /** The primary partner account for the new company to create.
If the company already exists and has given authorization to the primary partner, and does not have any primary partner, the primary partner will be set.
Please note, that the calling account must have the authorization to the primary partner account, or
be the primary partner itself. */
    proxy_partner?: string | undefined;
    /** The account identifier at the partner site. 
If present, this ID is used to restrict the authorization to one account at partner site only. */
    partner_account_id?: string | undefined;
}

/** Salaxy extension to Open ID Connect UserInfo claims for Personal account federation. */
export interface UserInfoPersonAccount {
    /** If true, the user issuer indicates that the current user has the right to sign in behalf of the company / association.
In this case the provider must also provide a valid Finnish personal ID in personal_id field. */
    can_sign_company?: boolean | undefined;
    /** A Finnish Personal ID (Henkilötunnus / HETU) for digital signature.
If can_sign_company is set to true, the issuer should provide a valid personal id here. */
    personal_id?: string | undefined;
}

/** Salaxy extension to Open ID Connect UserInfo claims for Application data. */
export interface UserInfoApplication {
    /** Return link back to the calling application. Token is added to this string */
    return_link?: string | undefined;
    /** Return link in case of error or user cancel. */
    cancel_link?: string | undefined;
    /** Application role that the user has in relation to the account in this session.
Currently supported values are: "noAccess" and "owner"
Also "unknown" (the default if null) is technically supported, but that value is an error in federation process by design. */
    role?: UserInfoApplicationRole | undefined;
    /** Application specific state data that is sent from the federation provider to the end-application.
This data is guaranteed to survive the onboarding process. */
    state?: { [key: string]: string; } | undefined;
    /** TEMPORARY */
    custom?: { [key: string]: string; } | undefined;
}

export interface Stream {
    readonly canRead?: boolean | undefined;
    readonly canSeek?: boolean | undefined;
    readonly canTimeout?: boolean | undefined;
    readonly canWrite?: boolean | undefined;
    readonly length?: number | undefined;
    position?: number | undefined;
    readTimeout?: number | undefined;
    writeTimeout?: number | undefined;
}

/** Usecase definition */
export interface Usecase {
    /** Uri with owner information. */
    uri?: string | undefined;
    /** Short title for the usecase. */
    label?: string | undefined;
    /** Longer description for what the usecase is used for. */
    description?: string | undefined;
    /** URL for the icon that represents the service model. 
Supports font-awesome icons v4: https://fontawesome.com/v4.7/ (e.g. "fa-wrench") and images with absolute URL (https). */
    icon?: string | undefined;
    /** Item type of the usecase */
    itemType?: ApiItemType | undefined;
    /** The default status of the usecase in the settings.
The status affects the visibilty of the usecase. */
    status?: UsecaseStatus | undefined;
    /** Order setting for the usecases.
This is needed e.g. ad hoc reports. */
    order?: number | undefined;
    /** JSON schema defines the data model and the automatically generated default user interface for the usecase. */
    schema?: any | undefined;
    /** The actions related to this usecase. */
    actions?: UsecaseAction[] | undefined;
    /** Customized userinterface definitions (views) for the usecase. */
    views?: UsecaseView[] | undefined;
    /** Readonly workflow data, which is exposed to API. */
    workflowData?: WorkflowData | undefined;
    /** EXPERIMENTRAL: The workflow data (Drawflow format) for the usecase.
This property is experimental and may be refactored without it being a breaking change. */
    flow?: { [key: string]: any; } | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

export interface UsecaseAction {
    /** Type of the automation action */
    actionType?: UsecaseActionType | undefined;
    /** Title of the action */
    label?: string | undefined;
    /** If true, the button is shown in the user interfaces.
TODO: This property may be removed before final production version =&gt; Set on/off depending on the view. */
    uiShowButton?: boolean | undefined;
    /** Text for the UI button. */
    uiText?: string | undefined;
    /** Defines the color of the UI button */
    uiColor?: BootstrapStyle | undefined;
    /** Description of the action */
    description?: string | undefined;
    /** The content: The script or other definition. */
    content?: string | undefined;
}

/** Customized user interface view. */
export interface UsecaseView {
    /** Title of the action */
    label?: string | undefined;
    /** Description of the action */
    description?: string | undefined;
    /** The content: The HTML for the view. */
    content?: string | undefined;
}

export interface PageResultOfUsecaseListItem {
    items?: UsecaseListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of usecases. */
export interface UsecaseListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: UsecaseStatus | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: UsecaseListItemData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Usecase specific business data for index. */
export interface UsecaseListItemData {
    /** Contains the email or id of the responsible for the partner workflow event. */
    partnerMessageAssignedTo?: string | undefined;
    /** Longer description for what the usecase is used for. */
    description?: string | undefined;
    /** URL for the icon that represents the service model. 
Supports font-awesome icons v4: https://fontawesome.com/v4.7/ (e.g. "fa-wrench") and images with absolute URL (https). */
    icon?: string | undefined;
    /** Order setting for the usecases.
This is needed e.g. ad hoc reports. */
    order?: number | undefined;
}

/** Version information for the API object. */
export interface VersionInfo {
    /** Identifier for the version. */
    versionId?: string | undefined;
    /** Operation which created the version. */
    operation?: string | undefined;
    /** Date and time when the version was created. */
    date?: Date | undefined;
    /** User account  who created the version. */
    userAccount?: Avatar | undefined;
}

/** Abstract base class for implementing CRUD objects in the Salaxy API. */
export interface ApiCrudObject {
    /** Identifier of the object. */
    id?: string | undefined;
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

export interface PageResultOfWorkerListItem {
    items?: WorkerListItem[] | undefined;
    nextPageLink?: string | undefined;
    count?: number | undefined;
}

/** Represents a single item in a list of workers in the user interface. It contains all essential information of the worker and is basis for searching, filtering and sorting. */
export interface WorkerListItem {
    /** The date when the object was created. */
    createdAt?: Date | undefined;
    /** The time when the object was last updated. 
Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates. */
    updatedAt?: Date | undefined;
    /** Person GUID for the owner of the object. */
    ownerId?: string | undefined;
    /** Metadata for the owner */
    ownerInfo?: AccountInIndex | undefined;
    /** The main status depending on the type of the object. */
    status?: string | undefined;
    /** The back office status depending on the type of the object. */
    backOfficeStatus?: string | undefined;
    /** When the event started. Typically, this is the CreatedAt date, but it may be something else. */
    startAt?: Date | undefined;
    /** This is the end date of the event.
Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation. */
    endAt?: Date | undefined;
    /** Gross salary if that is relevant to the transaction. */
    grossSalary?: number | undefined;
    /** This is the payment from the Owner point-of-view:
Total payment for the Employer and Net salary for the Worker in the case of a calculation.
Only add here the payment, if the payment is really made. */
    payment?: number | undefined;
    /** Estimated fee of the transaction to Palkkaus.fi. */
    fee?: number | undefined;
    /** The GUID for the other party. Currently, this is always the PersonID. */
    otherId?: string | undefined;
    /** The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer). */
    otherPartyInfo?: AccountInIndex | undefined;
    /** A very short description describing the object as an event. E.g. "Paid salary" */
    shortText?: string | undefined;
    /** Business object ids related to this object. E.g. calculations and payrolls in the payment. */
    businessObjects?: string[] | undefined;
    /** This is valid for calculations only. The estimated date of salary in worker. */
    salaryDate?: Date | undefined;
    /** Business data to include further information of the object. */
    data?: WorkerData | undefined;
    /** Version number. May be used in conflicts */
    versionNumber?: number | undefined;
    /** Salaxy uri of the resource. */
    uri?: string | undefined;
    /** Workflow flags for the object.
Only workflow events with API supported message types are listed. */
    flags?: string[] | undefined;
    /** Workflow messages for the object.
Only workflow events with API supported message types are listed.
Shown in format "[MessageType]:[Message] ([User] at [UTC-time])" */
    messages?: string[] | undefined;
    /** Sub category for the payload. E.g. Payment Category, MoneyTransfer Source. */
    entityType?: string | undefined;
    /** The date for the actual period for which this object is done. */
    logicalDate?: Date | undefined;
    /** Reference information. E.g. Payment or MoneyTransfer reference number. */
    reference?: string | undefined;
    /** External id for the object in 3rd party system. */
    externalId?: string | undefined;
    /** Identifier of the object. */
    id?: string | undefined;
    /** Owner ID for this data */
    owner?: string | undefined;
    /** Indication that for the currently logged-in account, the data is generally read-only. */
    isReadOnly?: boolean | undefined;
    /** Primary partner information. Automatically updated from the storage container Partner. */
    partner?: string | undefined;
}

/** Worker specific business data for index. */
export interface WorkerData {
    /** Type of the employment relation. */
    type?: EmploymentRelationType | undefined;
    /** Type for the pension insurance. */
    pensionCalculation?: PensionCalculation | undefined;
    /** Taxcard type from the employment point of view. */
    taxcard?: EmploymentRelationTaxcard | undefined;
    /** Start date of the Employment Relation. */
    startDate?: Date | undefined;
    /** End date of the Employment Relation. */
    endDate?: Date | undefined;
    /** Duration of the employment. If true, the employment relation is for a fixed term.
Otherwise (which is the default) the employment relation continues until further notice. */
    isFixedTerm?: boolean | undefined;
    /** Indicates that the employment relation has been terminated.
Saving with this status also makes the employment relation Archived. */
    isTerminated?: boolean | undefined;
}

/** AbcSection enumeration */
export enum AbcSection {
    Undefined = "undefined",
    DoNotShow = "doNotShow",
    Employment = "employment",
    Insurance = "insurance",
    Salary = "salary",
    Examples = "examples",
    PalkkausGeneral = "palkkausGeneral",
    PalkkausInstructions = "palkkausInstructions",
    Blog = "blog",
    Press = "press",
    PersonEmployer = "personEmployer",
    HouseholdEmployer = "householdEmployer",
    Worker = "worker",
    Employee = "employee",
    Entrepreneur = "entrepreneur",
    Association = "association",
    BusinessOwner = "businessOwner",
    ProductLongDescription = "productLongDescription",
    DocumentTemplates = "documentTemplates",
    InstructionsAndExamples = "instructionsAndExamples",
}

/** AbsenceCauseCode enumeration */
export enum AbsenceCauseCode {
    Undefined = "undefined",
    UnpaidLeave = "unpaidLeave",
    PersonalReason = "personalReason",
    Illness = "illness",
    PartTimeSickLeave = "partTimeSickLeave",
    ParentalLeave = "parentalLeave",
    SpecialMaternityLeave = "specialMaternityLeave",
    Rehabilitation = "rehabilitation",
    ChildIllness = "childIllness",
    PartTimeChildCareLeave = "partTimeChildCareLeave",
    Training = "training",
    JobAlternationLeave = "jobAlternationLeave",
    StudyLeave = "studyLeave",
    IndustrialAction = "industrialAction",
    InterruptionInWorkProvision = "interruptionInWorkProvision",
    LeaveOfAbsence = "leaveOfAbsence",
    MilitaryRefresherTraining = "militaryRefresherTraining",
    MilitaryService = "militaryService",
    LayOff = "layOff",
    ChildCareLeave = "childCareLeave",
    MidWeekHoliday = "midWeekHoliday",
    AccruedHoliday = "accruedHoliday",
    OccupationalAccident = "occupationalAccident",
    AnnualLeave = "annualLeave",
    PartTimeAbsenceDueToRehabilitation = "partTimeAbsenceDueToRehabilitation",
    Other = "other",
}

/** AccountantType enumeration */
export enum AccountantType {
    Unknown = "unknown",
    UnlinkedPrimaryPartner = "unlinkedPrimaryPartner",
    UnlinkedAccountingOnly = "unlinkedAccountingOnly",
    PendingPrimaryPartner = "pendingPrimaryPartner",
    PrimaryPartner = "primaryPartner",
    None = "none",
}

/** AccountingChannel enumeration */
export enum AccountingChannel {
    Undefined = "undefined",
    Procountor = "procountor",
    VismaNetvisor = "vismaNetvisor",
    VismaFivaldi = "vismaFivaldi",
}

/** AccountingPeriodClosingOption enumeration */
export enum AccountingPeriodClosingOption {
    Default = "default",
    Accounting = "accounting",
    PeriodicInvoices = "periodicInvoices",
    AccountingAndPeriodicInvoices = "accountingAndPeriodicInvoices",
    IrReports = "irReports",
    AccountingAndIrReports = "accountingAndIrReports",
    PeriodicInvoicesAndIrReports = "periodicInvoicesAndIrReports",
    AccountingAndPeriodicInvoicesAndIrReports = "accountingAndPeriodicInvoicesAndIrReports",
}

/** AccountingReportRowType enumeration */
export enum AccountingReportRowType {
    Debit = "debit",
    Credit = "credit",
    Total = "total",
    GroupHeader = "groupHeader",
    GroupTotal = "groupTotal",
    ChildRow = "childRow",
}

/** AccountingReportTableType enumeration */
export enum AccountingReportTableType {
    Classic = "classic",
    Simple = "simple",
    Mapped = "mapped",
}

/** AccountingTargetStatus enumeration */
export enum AccountingTargetStatus {
    Undefined = "undefined",
    OwnedTarget = "ownedTarget",
    ProductTarget = "productTarget",
    SharedTarget = "sharedTarget",
}

/** AgeGroupCode enumeration */
export enum AgeGroupCode {
    A = "a",
    B = "b",
    C = "c",
    U = "u",
}

/** AgeRange enumeration */
export enum AgeRange {
    Unknown = "unknown",
    Age_15 = "age_15",
    Age16 = "age16",
    Age17 = "age17",
    Age18_52 = "age18_52",
    Age53_62 = "age53_62",
    Age63_64 = "age63_64",
    Age65_67 = "age65_67",
    Age68AndOVer = "age68AndOVer",
}

/** AllowanceCode enumeration */
export enum AllowanceCode {
    MealAllowance = "mealAllowance",
    PartialDailyAllowance = "partialDailyAllowance",
    FullDailyAllowance = "fullDailyAllowance",
    InternationalDailyAllowance = "internationalDailyAllowance",
    TaxExemptReimbursementsAbroad = "taxExemptReimbursementsAbroad",
}

/** AnnualLeavePaymentKind enumeration */
export enum AnnualLeavePaymentKind {
    Undefined = "undefined",
    Planned = "planned",
    ManualSalary = "manualSalary",
    ManualCompensation = "manualCompensation",
    ManualBonus = "manualBonus",
    PaidCalc = "paidCalc",
    DraftCalc = "draftCalc",
}

/** ApiCheckStatus enumeration */
export enum ApiCheckStatus {
    Ignored = "ignored",
    Success = "success",
    Warning = "warning",
    Error = "error",
}

/** ApiImportStatus enumeration */
export enum ApiImportStatus {
    Ignored = "ignored",
    Success = "success",
    Warning = "warning",
    Error = "error",
}

/** ApiListItemType enumeration */
export enum ApiListItemType {
    Unknown = "unknown",
    AccountBase = "accountBase",
    CompanyAccount = "companyAccount",
    PersonAccount = "personAccount",
    WorkerAccount = "workerAccount",
    Certificate = "certificate",
    SessionUserCredential = "sessionUserCredential",
    Onboarding = "onboarding",
    Profile = "profile",
    Calculation = "calculation",
    CalculationPaid = "calculationPaid",
    ESalaryPayment = "eSalaryPayment",
    Payment = "payment",
    EarningsPayment = "earningsPayment",
    Employment = "employment",
    WorkerAbsences = "workerAbsences",
    HolidayYear = "holidayYear",
    Taxcard = "taxcard",
    PayrollDetails = "payrollDetails",
    Invoice = "invoice",
    Report = "report",
    BlobFile = "blobFile",
    PayerSummary = "payerSummary",
    CalendarEvent = "calendarEvent",
    Usecase = "usecase",
    Dataset = "dataset",
    Article = "article",
    MessageThread = "messageThread",
    EmailMessage = "emailMessage",
    AccountProducts = "accountProducts",
    VarmaPensionOrder = "varmaPensionOrder",
    IfInsuranceOrder = "ifInsuranceOrder",
    Historical = "historical",
}

/** ApiTestErrorType enumeration */
export enum ApiTestErrorType {
    Default = "default",
    UserFriendly = "userFriendly",
}

/** ApiItemType enumeration */
export enum ApiItemType {
    Undefined = "undefined",
    Calculation = "calculation",
    CalculationPaid = "calculationPaid",
    Dataset = "dataset",
    PayrollDetails = "payrollDetails",
    Invoice = "invoice",
    EarningsPaymentReport = "earningsPaymentReport",
    PayerSummaryReport = "payerSummaryReport",
    Employment = "employment",
    MessageThread = "messageThread",
    CalendarEvent = "calendarEvent",
    ListItems = "listItems",
}

/** ApiValidationErrorType enumeration */
export enum ApiValidationErrorType {
    General = "general",
    Required = "required",
    Invalid = "invalid",
    Warning = "warning",
}

/** AuthenticationMethod enumeration */
export enum AuthenticationMethod {
    Undefined = "undefined",
    EmailPwdLocal = "emailPwdLocal",
    Facebook = "facebook",
    Google = "google",
    Microsoft = "microsoft",
    LinkedIn = "linkedIn",
    Auth0Database = "auth0Database",
    X509 = "x509",
    Salaxy = "salaxy",
    Test = "test",
    WebAuthn = "webAuthn",
    MicrosoftOAuth = "microsoftOAuth",
    GoogleOAuth = "googleOAuth",
    InternalLocalhost = "internalLocalhost",
}

/** AuthorizationStatus enumeration */
export enum AuthorizationStatus {
    Undefined = "undefined",
    OK = "oK",
    AccessDenied = "accessDenied",
    ExpiredOauthToken = "expiredOauthToken",
    InvalidOAuthToken = "invalidOAuthToken",
    NoOauthToken = "noOauthToken",
}

/** AuthorizationType enumeration */
export enum AuthorizationType {
    None = "none",
    EmployerAuthorization = "employerAuthorization",
    WorkerContract = "workerContract",
    CompanyContract = "companyContract",
    Manual = "manual",
    Temporary = "temporary",
}

/** AvatarPictureType enumeration */
export enum AvatarPictureType {
    Icon = "icon",
    Uploaded = "uploaded",
    Gravatar = "gravatar",
}

/** BankPaymentType enumeration */
export enum BankPaymentType {
    Unknown = "unknown",
    Error = "error",
    PaytrailBatch = "paytrailBatch",
    NetvisorPayment = "netvisorPayment",
    SalaryGrossPayment = "salaryGrossPayment",
    RefundPayment = "refundPayment",
    PartialRefundPayment = "partialRefundPayment",
    DoubleRefundPayment = "doubleRefundPayment",
    TransferToEcfaPayment = "transferToEcfaPayment",
    InsuranceGrossPayment = "insuranceGrossPayment",
    NetSalary = "netSalary",
    SalaryAdvance = "salaryAdvance",
    NetSalaryRepayment = "netSalaryRepayment",
    NetSalaryCorrection = "netSalaryCorrection",
    TaxAccount = "taxAccount",
    Tvr = "tvr",
    TvrRfnd = "tvrRfnd",
    PalkkausFees = "palkkausFees",
    BankFees = "bankFees",
    PaytrailFees = "paytrailFees",
    InsuranceLahiTapiola = "insuranceLahiTapiola",
    Tyel = "tyel",
    TyelEteraContract = "tyelEteraContract",
    TyelEteraTemp = "tyelEteraTemp",
    TyelEteraUnknown = "tyelEteraUnknown",
    TyelEloContract = "tyelEloContract",
    TyelEloTemp = "tyelEloTemp",
    TyelEloInitialImport = "tyelEloInitialImport",
    TyelVarmaContract = "tyelVarmaContract",
    TyelVarmaTemp = "tyelVarmaTemp",
    TyelIlmarinenContract = "tyelIlmarinenContract",
    TyelIlmarinenTemp = "tyelIlmarinenTemp",
    Union = "union",
    UnionRaksa = "unionRaksa",
    Foreclosure = "foreclosure",
    SaldoYearBegin = "saldoYearBegin",
    SaldoYearEnd = "saldoYearEnd",
}

/** BenefitCode enumeration */
export enum BenefitCode {
    AccommodationBenefit = "accommodationBenefit",
    TelephoneBenefit = "telephoneBenefit",
    MealBenefit = "mealBenefit",
    OtherBenefits = "otherBenefits",
}

/** BlobFileType enumeration */
export enum BlobFileType {
    Unknown = "unknown",
    AuthorizationPdf = "authorizationPdf",
    Avatar = "avatar",
    TaxCard = "taxCard",
    ExpensesReceipt = "expensesReceipt",
    Raksaloki = "raksaloki",
    Template = "template",
    EInvoice = "eInvoice",
    Temporary = "temporary",
    Settings = "settings",
    Messages = "messages",
    Record = "record",
    MonthlyReport = "monthlyReport",
    YearlyReport = "yearlyReport",
    CalcReport = "calcReport",
}

/** BlobRepository enumeration */
export enum BlobRepository {
    UserFiles = "userFiles",
    VersionHistory = "versionHistory",
    SystemFiles = "systemFiles",
    Payload = "payload",
    Reports = "reports",
    CdnImages = "cdnImages",
    Iam = "iam",
    GitContent = "gitContent",
    FileSystemContent = "fileSystemContent",
}

/** BootstrapStyle enumeration */
export enum BootstrapStyle {
    Default = "default",
    Primary = "primary",
    Success = "success",
    Info = "info",
    Warning = "warning",
    Danger = "danger",
}

/** CalcGroup enumeration */
export enum CalcGroup {
    Undefined = "undefined",
    BaseSalary = "baseSalary",
    SalaryAdditions = "salaryAdditions",
    Benefits = "benefits",
    Expenses = "expenses",
    Deductions = "deductions",
    OtherNoPayment = "otherNoPayment",
    Totals = "totals",
    Disabled = "disabled",
}

/** CalculationFlag enumeration */
export enum CalculationFlag {
    Exclude = "exclude",
    PensionInsurance = "pensionInsurance",
    AccidentInsurance = "accidentInsurance",
    UnemploymentInsurance = "unemploymentInsurance",
    HealthInsurance = "healthInsurance",
    InsurancesDeduction = "insurancesDeduction",
    NoTax = "noTax",
    Tax = "tax",
    TaxDeduction = "taxDeduction",
    CfNoPayment = "cfNoPayment",
    CfPayment = "cfPayment",
    CfDeduction = "cfDeduction",
    CfDeductionAtSalaxy = "cfDeductionAtSalaxy",
}

/** CalculationRefresh enumeration */
export enum CalculationRefresh {
    Default = "default",
    Worker = "worker",
    Employer = "employer",
    Employment = "employment",
    Taxcard = "taxcard",
    Insurances = "insurances",
}

/** CalculationResultRowType enumeration */
export enum CalculationResultRowType {
    Undefined = "undefined",
    TotalBenefits = "totalBenefits",
    TotalExpenses = "totalExpenses",
    TotalSocialSecurityEmployer = "totalSocialSecurityEmployer",
    TotalSocialSecurityEmployerDebt = "totalSocialSecurityEmployerDebt",
    TotalSocialSecurityEmployerPayment = "totalSocialSecurityEmployerPayment",
    TotalPension = "totalPension",
    TotalPensionPayment = "totalPensionPayment",
    TotalPensionEmployer = "totalPensionEmployer",
    TotalPensionEmployerDebt = "totalPensionEmployerDebt",
    TotalPensionWorker = "totalPensionWorker",
    TotalUnemployment = "totalUnemployment",
    TotalUnemploymentPayment = "totalUnemploymentPayment",
    TotalUnemploymentEmployer = "totalUnemploymentEmployer",
    TotalUnemploymentEmployerDebt = "totalUnemploymentEmployerDebt",
    TotalUnemploymentWorker = "totalUnemploymentWorker",
    TotalPalkkaus = "totalPalkkaus",
    TotalSalary = "totalSalary",
    TotalTax = "totalTax",
    TotalTaxPayment = "totalTaxPayment",
    TotalPayment = "totalPayment",
    TotalWorkerPayment = "totalWorkerPayment",
    TotalService = "totalService",
}

/** CalculationRowSource enumeration */
export enum CalculationRowSource {
    Undefined = "undefined",
    Disabled = "disabled",
    ManualRow = "manualRow",
    WorktimeImport = "worktimeImport",
    PriceEmployment = "priceEmployment",
    PriceCompany = "priceCompany",
    CustomRowtype = "customRowtype",
}

/** CalculationRowType enumeration */
export enum CalculationRowType {
    Unknown = "unknown",
    Salary = "salary",
    HourlySalary = "hourlySalary",
    MonthlySalary = "monthlySalary",
    TotalWorkerPayment = "totalWorkerPayment",
    TotalEmployerPayment = "totalEmployerPayment",
    Compensation = "compensation",
    Overtime = "overtime",
    TesWorktimeShortening = "tesWorktimeShortening",
    EveningAddition = "eveningAddition",
    NightimeAddition = "nightimeAddition",
    SaturdayAddition = "saturdayAddition",
    SundayWork = "sundayWork",
    OtherAdditions = "otherAdditions",
    PaidSickLeaveSalary = "paidSickLeaveSalary",
    PaidSickLeaveHourlySalary = "paidSickLeaveHourlySalary",
    PaidSickLeaveMonthlySalary = "paidSickLeaveMonthlySalary",
    TrainingSalary = "trainingSalary",
    TrainingHourlySalary = "trainingHourlySalary",
    TrainingMonthlySalary = "trainingMonthlySalary",
    AccomodationBenefit = "accomodationBenefit",
    MealBenefit = "mealBenefit",
    PhoneBenefit = "phoneBenefit",
    CarBenefit = "carBenefit",
    BicycleBenefit = "bicycleBenefit",
    OtherBenefit = "otherBenefit",
    HolidayCompensation = "holidayCompensation",
    HolidayBonus = "holidayBonus",
    HolidaySalary = "holidaySalary",
    DailyAllowance = "dailyAllowance",
    DailyAllowanceHalf = "dailyAllowanceHalf",
    MealCompensation = "mealCompensation",
    MilageOwnCar = "milageOwnCar",
    ToolCompensation = "toolCompensation",
    Expenses = "expenses",
    MilageDaily = "milageDaily",
    MilageOther = "milageOther",
    UnionPayment = "unionPayment",
    Foreclosure = "foreclosure",
    Advance = "advance",
    ForeclosureByPalkkaus = "foreclosureByPalkkaus",
    PrepaidExpenses = "prepaidExpenses",
    OtherDeductions = "otherDeductions",
    DeductibleOfExerciseAndCultureBenefit = "deductibleOfExerciseAndCultureBenefit",
    ChildCareSubsidy = "childCareSubsidy",
    ChainsawReduction = "chainsawReduction",
    NonProfitOrg = "nonProfitOrg",
    SubsidisedCommute = "subsidisedCommute",
    IrIncomeType = "irIncomeType",
    Board = "board",
    Remuneration = "remuneration",
    OtherCompensation = "otherCompensation",
    WorkingTimeCompensation = "workingTimeCompensation",
    EmploymentTermination = "employmentTermination",
    HourlySalaryWithWorkingTimeCompensation = "hourlySalaryWithWorkingTimeCompensation",
    PaidSickLeave = "paidSickLeave",
    Training = "training",
    TaxAtSource = "taxAtSource",
    TaxWithholding = "taxWithholding",
    AbsencePeriod = "absencePeriod",
    ServiceCharge = "serviceCharge",
    Service = "service",
    Totals = "totals",
}

/** CalculationRowUnit enumeration */
export enum CalculationRowUnit {
    Undefined = "undefined",
    Count = "count",
    Percent = "percent",
    Days = "days",
    Kilometers = "kilometers",
    Hours = "hours",
}

/** CalculationStatus enumeration */
export enum CalculationStatus {
    Draft = "draft",
    PaymentStarted = "paymentStarted",
    PaymentSucceeded = "paymentSucceeded",
    PaymentCanceled = "paymentCanceled",
    PaymentError = "paymentError",
    PaymentWorkerCopy = "paymentWorkerCopy",
    WorkerRequested = "workerRequested",
    WorkerRequestAccepted = "workerRequestAccepted",
    WorkerRequestDeclined = "workerRequestDeclined",
    PaymentRefunded = "paymentRefunded",
    WaitingApproval = "waitingApproval",
    PayrollDraft = "payrollDraft",
    ProDraft = "proDraft",
    SharedWaiting = "sharedWaiting",
    SharedApproved = "sharedApproved",
    SharedRejected = "sharedRejected",
    History = "history",
    Template = "template",
}

/** CalculationStatusCategory enumeration */
export enum CalculationStatusCategory {
    All = "all",
    Readonly = "readonly",
    Editable = "editable",
    Sent = "sent",
    Shared = "shared",
    Received = "received",
    Error = "error",
}

/** CalendarActionType enumeration */
export enum CalendarActionType {
    Undefined = "undefined",
    Display = "display",
    Email = "email",
    Audio = "audio",
    CreateItem = "createItem",
    Script = "script",
    PaymentDate = "paymentDate",
}

/** CalendarEventStatus enumeration */
export enum CalendarEventStatus {
    Undefined = "undefined",
    Cancelled = "cancelled",
    Confirmed = "confirmed",
    Tentative = "tentative",
    NeedsAction = "needsAction",
    Completed = "completed",
    InProcess = "inProcess",
}

/** CarBenefitCode enumeration */
export enum CarBenefitCode {
    LimitedCarBenefit = "limitedCarBenefit",
    FullCarBenefit = "fullCarBenefit",
}

/** CompanyType enumeration */
export enum CompanyType {
    Unknown = "unknown",
    FiOy = "fiOy",
    FiTm = "fiTm",
    FiRy = "fiRy",
    FiYy = "fiYy",
}

/** ContractPartyType enumeration */
export enum ContractPartyType {
    Person = "person",
    CustomContact = "customContact",
}

/** ContactType enumeration */
export enum ContactType {
    Default = "default",
    WorkerAccount = "workerAccount",
    EmployerOverride = "employerOverride",
    Foreign = "foreign",
}

/** CostAccountingDimensionScope enumeration */
export enum CostAccountingDimensionScope {
    None = "none",
    Calculation = "calculation",
    Row = "row",
    Hidden = "hidden",
}

/** Country enumeration */
export enum Country {
    Fi = "fi",
    Ae = "ae",
    At = "at",
    Ba = "ba",
    Bg = "bg",
    By = "by",
    Cn = "cn",
    De = "de",
    Eg = "eg",
    Fr = "fr",
    Gg = "gg",
    Hr = "hr",
    Ie = "ie",
    In = "in",
    Je = "je",
    Kr = "kr",
    Lk = "lk",
    Lv = "lv",
    Me = "me",
    Mx = "mx",
    No = "no",
    Pk = "pk",
    Rs = "rs",
    Sg = "sg",
    Th = "th",
    Tr = "tr",
    Us = "us",
    Vg = "vg",
    Zm = "zm",
    Am = "am",
    Au = "au",
    Bb = "bb",
    Bm = "bm",
    Ca = "ca",
    Cy = "cy",
    Dk = "dk",
    Es = "es",
    Gb = "gb",
    Gr = "gr",
    Hu = "hu",
    Il = "il",
    Is = "is",
    Jp = "jp",
    Ky = "ky",
    Lt = "lt",
    Ma = "ma",
    Mk = "mk",
    My = "my",
    Nz = "nz",
    Pl = "pl",
    Ru = "ru",
    Si = "si",
    Tj = "tj",
    Tz = "tz",
    Uy = "uy",
    Vn = "vn",
    Ar = "ar",
    Az = "az",
    Be = "be",
    Br = "br",
    Ch = "ch",
    Cz = "cz",
    Ee = "ee",
    Ge = "ge",
    Hk = "hk",
    Id = "id",
    Im = "im",
    It = "it",
    Kg = "kg",
    Kz = "kz",
    Lu = "lu",
    Md = "md",
    Mt = "mt",
    Nl = "nl",
    Ph = "ph",
    Ro = "ro",
    Se = "se",
    Sk = "sk",
    Tm = "tm",
    Ua = "ua",
    Uz = "uz",
    Za = "za",
    Other = "other",
}

/** CustomerInvoiceStatus enumeration */
export enum CustomerInvoiceStatus {
    Undefined = "undefined",
    Forecast = "forecast",
    Preview = "preview",
    WaitingPalkkaus = "waitingPalkkaus",
    Unread = "unread",
    Read = "read",
    PaymentStarted = "paymentStarted",
    Warning = "warning",
    Paid = "paid",
    Canceled = "canceled",
    Error = "error",
}

/** CustomerWebApp enumeration */
export enum CustomerWebApp {
    Palkkaus = "palkkaus",
    CustomSso = "customSso",
    CustomPalkkaus = "customPalkkaus",
    NoCustomerUi = "noCustomerUi",
}

/** EarningsPaymentReportStatus enumeration */
export enum EarningsPaymentReportStatus {
    New = "new",
    Scheduled = "scheduled",
    Succeeded = "succeeded",
    Canceled = "canceled",
    Error = "error",
    Invalid = "invalid",
}

/** EmploymentRelationSalaryPaymentMethod enumeration */
export enum EmploymentRelationSalaryPaymentMethod {
    BankAccount = "bankAccount",
    External = "external",
}

/** EmploymentRelationStatus enumeration */
export enum EmploymentRelationStatus {
    Unknown = "unknown",
    Primary = "primary",
    SecondaryCurrent = "secondaryCurrent",
    Archived = "archived",
}

/** EmploymentRelationTaxcard enumeration */
export enum EmploymentRelationTaxcard {
    Undefined = "undefined",
    Auto = "auto",
    Manual = "manual",
    NoTaxCard = "noTaxCard",
    TaxAtSource = "taxAtSource",
}

/** EmploymentRelationType enumeration */
export enum EmploymentRelationType {
    Undefined = "undefined",
    Salary = "salary",
    HourlySalary = "hourlySalary",
    MonthlySalary = "monthlySalary",
    Compensation = "compensation",
    BoardMember = "boardMember",
    Entrepreneur = "entrepreneur",
    Farmer = "farmer",
    EmployedByStateEmploymentFund = "employedByStateEmploymentFund",
    Athlete = "athlete",
    PerformingArtist = "performingArtist",
    ForeignWorker = "foreignWorker",
    WorkingAbroad = "workingAbroad",
}

/** ExportMethod enumeration */
export enum ExportMethod {
    Undefined = "undefined",
    FileExcel = "fileExcel",
    FileCsv = "fileCsv",
    FilePdf = "filePdf",
    FileText = "fileText",
    CopyExcel = "copyExcel",
    CopyCsv = "copyCsv",
    CopyText = "copyText",
    PaymentChannel = "paymentChannel",
    Api = "api",
}

/** DatasetStatus enumeration */
export enum DatasetStatus {
    Draft = "draft",
    Instance = "instance",
    Template = "template",
}

/** DatasetType enumeration */
export enum DatasetType {
    Undefined = "undefined",
    ReportAdHoc = "reportAdHoc",
    Import = "import",
    Export = "export",
    Batch = "batch",
}

/** DateOfBirthAccuracy enumeration */
export enum DateOfBirthAccuracy {
    Assumption = "assumption",
    AgeBased = "ageBased",
    AgeGroupBased = "ageGroupBased",
    MonthCorrect = "monthCorrect",
    Exact = "exact",
    Verified = "verified",
}

/** FrameworkAgreement enumeration */
export enum FrameworkAgreement {
    NotDefined = "notDefined",
    Construction = "construction",
    Mll = "mll",
    ChildCare = "childCare",
    Cleaning = "cleaning",
    SantaClaus = "santaClaus",
    Entrepreneur = "entrepreneur",
    Other = "other",
}

/** Gender enumeration */
export enum Gender {
    Unknown = "unknown",
    Male = "male",
    Female = "female",
}

/** HelttiIndustry enumeration */
export enum HelttiIndustry {
    NotDefined = "notDefined",
    I = "i",
    J = "j",
    K = "k",
    M = "m",
    O = "o",
    N = "n",
    P = "p",
    Q = "q",
    R = "r",
    S = "s",
    Other = "other",
}

/** HelttiProductPackage enumeration */
export enum HelttiProductPackage {
    NotDefined = "notDefined",
    Small = "small",
    Medium = "medium",
    Large = "large",
}

/** IncomeEarnerType enumeration */
export enum IncomeEarnerType {
    EmployedByStateEmploymentFund = "employedByStateEmploymentFund",
    JointOwnerWithPayer = "jointOwnerWithPayer",
    PartialOwner = "partialOwner",
    KeyEmployee = "keyEmployee",
    LeasedEmployeeLivingAbroad = "leasedEmployeeLivingAbroad",
    PersonWorkingInFrontierDistrict = "personWorkingInFrontierDistrict",
    PersonWorkingAbroad = "personWorkingAbroad",
    Athlete = "athlete",
    PerformingArtist = "performingArtist",
    RestrictedPeriodInFinland = "restrictedPeriodInFinland",
    NetOfTaxContract = "netOfTaxContract",
    Organization = "organization",
    PersonWorkingOnAlandFerry = "personWorkingOnAlandFerry",
    EntrepreneurOrFarmerNoPensionRequired = "entrepreneurOrFarmerNoPensionRequired",
    DimplomaticMission = "dimplomaticMission",
    Eppo = "eppo",
    LightEntrepreneur = "lightEntrepreneur",
}

/** IncomeLogDiff enumeration */
export enum IncomeLogDiff {
    Default = "default",
    New = "new",
    Changed = "changed",
    Removed = "removed",
}

/** InternationalIdentifier enumeration */
export enum InternationalIdentifier {
    Undefined = "undefined",
    TaxIdentificationNumber = "taxIdentificationNumber",
    ForeignPersonalIdentificationNumber = "foreignPersonalIdentificationNumber",
    Other = "other",
}

/** InvoiceStatus enumeration */
export enum InvoiceStatus {
    Undefined = "undefined",
    Forecast = "forecast",
    Preview = "preview",
    WaitingPalkkaus = "waitingPalkkaus",
    Unread = "unread",
    Read = "read",
    WaitingConfirmation = "waitingConfirmation",
    PaymentStarted = "paymentStarted",
    Warning = "warning",
    Paid = "paid",
    Canceled = "canceled",
    Error = "error",
}

/** InvoiceType enumeration */
export enum InvoiceType {
    Undefined = "undefined",
    Net = "net",
    Tax = "tax",
    TaxWithholding = "taxWithholding",
    TaxSocialSecurity = "taxSocialSecurity",
    TaxAtSource = "taxAtSource",
    Unemployment = "unemployment",
    Pension = "pension",
    Union = "union",
    Foreclosure = "foreclosure",
    Payroll = "payroll",
    Service = "service",
    Fee = "fee",
    Gross = "gross",
    Verification = "verification",
}

/** Holiday enumeration */
export enum Holiday {
    NewYearsDay = "newYearsDay",
    Epiphany = "epiphany",
    GoodFriday = "goodFriday",
    EasterSunday = "easterSunday",
    EasterSaturday = "easterSaturday",
    EasterMonday = "easterMonday",
    MayDay = "mayDay",
    AscensionDay = "ascensionDay",
    Pentecost = "pentecost",
    MidsummerEve = "midsummerEve",
    MidsummerDay = "midsummerDay",
    AllSaintsDay = "allSaintsDay",
    IndependenceDay = "independenceDay",
    ChristmasEve = "christmasEve",
    ChristmasDay = "christmasDay",
    StStephensDay = "stStephensDay",
}

/** HolidayAccrualSource enumeration */
export enum HolidayAccrualSource {
    Initial = "initial",
    Manual = "manual",
    CalcDraft = "calcDraft",
    CalcPaid = "calcPaid",
}

/** HolidayBonusPaymentMethod enumeration */
export enum HolidayBonusPaymentMethod {
    None = "none",
    PayForHolidaySalary = "payForHolidaySalary",
    PaySummerBonus = "paySummerBonus",
    Pay24Days = "pay24Days",
    PayAllBonus = "payAllBonus",
}

/** HolidayCode enumeration */
export enum HolidayCode {
    Undefined = "undefined",
    Permanent14Days = "permanent14Days",
    Permanent35Hours = "permanent35Hours",
    TemporaryTimeOff = "temporaryTimeOff",
    HolidayCompensation = "holidayCompensation",
    HolidayCompensationIncluded = "holidayCompensationIncluded",
    NoHolidays = "noHolidays",
}

/** HolidayGroup enumeration */
export enum HolidayGroup {
    Official = "official",
    NonBanking = "nonBanking",
    Holiday = "holiday",
}

/** HouseholdYearProcessingStatus enumeration */
export enum HouseholdYearProcessingStatus {
    Open = "open",
    Closed = "closed",
    Printed = "printed",
}

/** HouseholdYearStatus enumeration */
export enum HouseholdYearStatus {
    Undefined = "undefined",
    Ok = "ok",
    OkWithModifications = "okWithModifications",
    WillHandleMyself = "willHandleMyself",
}

/** InsuranceCompany enumeration */
export enum InsuranceCompany {
    None = "none",
    LähiTapiola = "lähiTapiola",
    Pohjola = "pohjola",
    If = "if",
    Fennia = "fennia",
    AVakuutus = "aVakuutus",
    Aktia = "aktia",
    Pohjantähti = "pohjantähti",
    Tryg = "tryg",
    Ålands = "ålands",
    Turva = "turva",
    Redarnas = "redarnas",
    Folksam = "folksam",
    Alandia = "alandia",
    Other = "other",
    Pending = "pending",
}

/** InternationalSocialSecurityException enumeration */
export enum InternationalSocialSecurityException {
    NotSubjectToEarningsRelatedPensionInsurance = "notSubjectToEarningsRelatedPensionInsurance",
    NotSubjectToAccidentAndOccupationalDiseaseInsurance = "notSubjectToAccidentAndOccupationalDiseaseInsurance",
    NotSubjectToUnemploymentInsurance = "notSubjectToUnemploymentInsurance",
    NotSubjectToHealthInsurance = "notSubjectToHealthInsurance",
    VoluntaryEarningsRelatedPensionInsurance = "voluntaryEarningsRelatedPensionInsurance",
    NoObligationToHealthInsuranceDailyAllowanceContribution = "noObligationToHealthInsuranceDailyAllowanceContribution",
}

/** InternationalSocialSecurityType enumeration */
export enum InternationalSocialSecurityType {
    Default = "default",
    Foreign = "foreign",
    Mixed = "mixed",
}

/** InvoiceDateKind enumeration */
export enum InvoiceDateKind {
    InvoiceDate = "invoiceDate",
    DueDate = "dueDate",
    LogicalDate = "logicalDate",
}

/** InvoicePaymentType enumeration */
export enum InvoicePaymentType {
    Default = "default",
    Salary = "salary",
    SalaryInPast = "salaryInPast",
}

/** IrFlags enumeration */
export enum IrFlags {
    NoMoney = "noMoney",
    OneOff = "oneOff",
    UnjustEnrichment = "unjustEnrichment",
}

/** IrInsuranceExceptions enumeration */
export enum IrInsuranceExceptions {
    IncludeAll = "includeAll",
    IncludePension = "includePension",
    IncludeHealthInsurance = "includeHealthInsurance",
    IncludeUnemployment = "includeUnemployment",
    IncludeAccidentInsurance = "includeAccidentInsurance",
    ExcludeAll = "excludeAll",
    ExcludePension = "excludePension",
    ExcludeHealthInsurance = "excludeHealthInsurance",
    ExcludeUnemployment = "excludeUnemployment",
    ExcludeAccidentInsurance = "excludeAccidentInsurance",
}

/** IrRowSourceType enumeration */
export enum IrRowSourceType {
    Manual = "manual",
    Usecase = "usecase",
    UsecaseV02 = "usecaseV02",
}

/** Language enumeration */
export enum Language {
    Default = "default",
    Fi = "fi",
    Sv = "sv",
    En = "en",
}

/** LegalEntityType enumeration */
export enum LegalEntityType {
    Undefined = "undefined",
    Person = "person",
    Company = "company",
    PersonCreatedByEmployer = "personCreatedByEmployer",
    Partner = "partner",
}

/** LocalTapiolaInsuranceOrderAuthorizationType enumeration */
export enum LocalTapiolaInsuranceOrderAuthorizationType {
    Procuration = "procuration",
    PowerOfAttorney = "powerOfAttorney",
    ApparentAuthority = "apparentAuthority",
    Other = "other",
}

/** LocalTapiolaInsuranceOrderStatus enumeration */
export enum LocalTapiolaInsuranceOrderStatus {
    Draft = "draft",
    WaitingApproval = "waitingApproval",
    Checked = "checked",
    Sent = "sent",
    Handled = "handled",
    Canceled = "canceled",
}

/** LocalTapiolaInsuranceOrderType enumeration */
export enum LocalTapiolaInsuranceOrderType {
    NewWorkerInsurance = "newWorkerInsurance",
    MoveWorkerInsurance = "moveWorkerInsurance",
    NewEntrepreneurInsurance = "newEntrepreneurInsurance",
    MoveEntrepreneurInsurance = "moveEntrepreneurInsurance",
    Other = "other",
}

/** MessageFrom enumeration */
export enum MessageFrom {
    Undefined = "undefined",
    Owner = "owner",
    OtherParty = "otherParty",
    System = "system",
}

/** MessageThreadStatus enumeration */
export enum MessageThreadStatus {
    Draft = "draft",
    Active = "active",
    Approved = "approved",
    Rejected = "rejected",
    Archived = "archived",
    Template = "template",
}

/** MessageType enumeration */
export enum MessageType {
    Email = "email",
    Sms = "sms",
}

/** OnboardingStatus enumeration */
export enum OnboardingStatus {
    Created = "created",
    Open = "open",
    Error = "error",
    Cancel = "cancel",
    Done = "done",
    Expired = "expired",
}

/** PayerSummaryReportStatus enumeration */
export enum PayerSummaryReportStatus {
    New = "new",
    Scheduled = "scheduled",
    Succeeded = "succeeded",
    Canceled = "canceled",
    Error = "error",
    Invalid = "invalid",
}

/** PaymentChannel enumeration */
export enum PaymentChannel {
    Undefined = "undefined",
    Test = "test",
    ZeroPayment = "zeroPayment",
    External = "external",
    PalkkausManual = "palkkausManual",
    PalkkausWS = "palkkausWS",
    PalkkausPersonal = "palkkausPersonal",
    PalkkausInvoices = "palkkausInvoices",
    PalkkausCfaPaytrail = "palkkausCfaPaytrail",
    PalkkausCfaReference = "palkkausCfaReference",
    PalkkausCfaFinvoice = "palkkausCfaFinvoice",
    PalkkausEcfaPaytrail = "palkkausEcfaPaytrail",
    PalkkausEcfaReference = "palkkausEcfaReference",
    PalkkausEcfaFinvoice = "palkkausEcfaFinvoice",
    PalkkausCfaTest = "palkkausCfaTest",
    AccountorGo = "accountorGo",
    TalenomOnline = "talenomOnline",
    TalenomCfa = "talenomCfa",
    HolviCfa = "holviCfa",
    FinagoSolo = "finagoSolo",
    Procountor = "procountor",
    Kevytyrittaja = "kevytyrittaja",
    VismaNetvisor = "vismaNetvisor",
    Askelma = "askelma",
    Briox = "briox",
    Lemonaid = "lemonaid",
    Laskupiste = "laskupiste",
    Holvi = "holvi",
    Kompassi = "kompassi",
    Domus = "domus",
    PasseliMerit = "passeliMerit",
    Odoo = "odoo",
    Ecom = "ecom",
    Kitsas = "kitsas",
}

/** PaymentMethod enumeration */
export enum PaymentMethod {
    Undefined = "undefined",
    Sepa = "sepa",
    Siirto = "siirto",
    Test = "test",
}

/** PaymentStatus enumeration */
export enum PaymentStatus {
    New = "new",
    SentToBank = "sentToBank",
    BankTechApproval = "bankTechApproval",
    BankDelivered = "bankDelivered",
    BankPartialError = "bankPartialError",
    BankError = "bankError",
    Paid = "paid",
    Unknown = "unknown",
    Cancelled = "cancelled",
}

/** PayrollStatus enumeration */
export enum PayrollStatus {
    Draft = "draft",
    PaymentStarted = "paymentStarted",
    PaymentSucceeded = "paymentSucceeded",
    PaymentCanceled = "paymentCanceled",
    PaymentError = "paymentError",
    WaitingApproval = "waitingApproval",
    Handled = "handled",
    Template = "template",
}

/** PensionCalculation enumeration */
export enum PensionCalculation {
    Undefined = "undefined",
    Employee = "employee",
    Entrepreneur = "entrepreneur",
    Farmer = "farmer",
    PartialOwner = "partialOwner",
    Athlete = "athlete",
    Compensation = "compensation",
    BoardRemuneration = "boardRemuneration",
    SmallEntrepreneur = "smallEntrepreneur",
    SmallFarmer = "smallFarmer",
    PublicSector = "publicSector",
}

/** PensionCompany enumeration */
export enum PensionCompany {
    None = "none",
    Etera = "etera",
    Ilmarinen = "ilmarinen",
    Elo = "elo",
    PensionsAlandia = "pensionsAlandia",
    Varma = "varma",
    Veritas = "veritas",
    Apteekkien = "apteekkien",
    Verso = "verso",
    KevaMunicipal = "kevaMunicipal",
    KevaAland = "kevaAland",
    KevaChurch = "kevaChurch",
    KevaKela = "kevaKela",
    KevaState = "kevaState",
    Valio = "valio",
    Other = "other",
}

/** PensionRule enumeration */
export enum PensionRule {
    Default = "default",
    MonthlyLowerLimit = "monthlyLowerLimit",
}

/** PeriodDateKind enumeration */
export enum PeriodDateKind {
    PaidAtDate = "paidAtDate",
    SalaryDate = "salaryDate",
    WorkDate = "workDate",
}

/** PeriodType enumeration */
export enum PeriodType {
    Month = "month",
    Quarter = "quarter",
    Year = "year",
    Custom = "custom",
}

/** PricingModel enumeration */
export enum PricingModel {
    PalkkausFee = "palkkausFee",
    NoFee = "noFee",
    FixedFee = "fixedFee",
}

/** ProductPackage enumeration */
export enum ProductPackage {
    Default = "default",
    PartnerBasic = "partnerBasic",
    PartnerPro = "partnerPro",
}

/** ProductListFilter enumeration */
export enum ProductListFilter {
    Available = "available",
    All = "all",
}

/** RecurringEventCreateMode enumeration */
export enum RecurringEventCreateMode {
    Default = "default",
    CreateRecurrence = "createRecurrence",
}

/** ReportCategory enumeration */
export enum ReportCategory {
    All = "all",
    Monthly = "monthly",
    Yearly = "yearly",
}

/** ReportType enumeration */
export enum ReportType {
    Undefined = "undefined",
    Example = "example",
    MonthlyDetails = "monthlyDetails",
    TaxMonthly4001 = "taxMonthly4001",
    PayerSummaryReport = "payerSummaryReport",
    MonthlyPension = "monthlyPension",
    MonthlyLiikekirjuri = "monthlyLiikekirjuri",
    MonthlyLiikekirjuriLegacy = "monthlyLiikekirjuriLegacy",
    MonthlyRapko = "monthlyRapko",
    MonthlyAccounting = "monthlyAccounting",
    MonthlyAccountingExcel = "monthlyAccountingExcel",
    YearlyDetails = "yearlyDetails",
    YearEndReport = "yearEndReport",
    YearlyWorkerSummary = "yearlyWorkerSummary",
    TaxYearly7801 = "taxYearly7801",
    Unemployment = "unemployment",
    Insurance = "insurance",
    HouseholdDeduction = "householdDeduction",
    TaxHouseholdDeduction14B = "taxHouseholdDeduction14B",
    TaxHouseholdDeduction14BSpouseA = "taxHouseholdDeduction14BSpouseA",
    TaxHouseholdDeduction14BSpouseB = "taxHouseholdDeduction14BSpouseB",
    SalarySlip = "salarySlip",
    SalarySlipPaid = "salarySlipPaid",
    SalarySlipCopy = "salarySlipCopy",
    ESalarySpecification = "eSalarySpecification",
    EmployerReport = "employerReport",
    PaymentReport = "paymentReport",
    PaymentSummaryReport = "paymentSummaryReport",
    TotalsReport = "totalsReport",
    EarningsPaymentReport = "earningsPaymentReport",
    AccountingReport = "accountingReport",
    Invoice = "invoice",
    InvoiceList = "invoiceList",
    EmploymentContract = "employmentContract",
    Authorization = "authorization",
}

/** Role enumeration */
export enum Role {
    Undefined = "undefined",
    Accountant = "accountant",
    TrustedPartner = "trustedPartner",
    AccountantCandidate = "accountantCandidate",
    PricingPartner = "pricingPartner",
    SepaPartner = "sepaPartner",
}

/** SalaryDateKind enumeration */
export enum SalaryDateKind {
    Default = "default",
    InPast = "inPast",
}

/** SalaryKind enumeration */
export enum SalaryKind {
    Undefined = "undefined",
    FixedSalary = "fixedSalary",
    HourlySalary = "hourlySalary",
    MonthlySalary = "monthlySalary",
    Compensation = "compensation",
    TotalWorkerPayment = "totalWorkerPayment",
    TotalEmployerPayment = "totalEmployerPayment",
}

/** SalaryType enumeration */
export enum SalaryType {
    Tyel = "tyel",
    Yel = "yel",
    Compensation = "compensation",
}

/** LegacyServiceModel enumeration */
export enum LegacyServiceModel {
    Shared = "shared",
    PartnerOnly = "partnerOnly",
}

/** SettingsStatus enumeration */
export enum SettingsStatus {
    Undefined = "undefined",
    Checked = "checked",
    Pending = "pending",
}

/** SharingUriType enumeration */
export enum SharingUriType {
    Undefined = "undefined",
    Url = "url",
    Employer = "employer",
}

/** TaxcardApiIncomeType enumeration */
export enum TaxcardApiIncomeType {
    Undefined = "undefined",
    Salary = "salary",
    DividendsForWorkAsSalary = "dividendsForWorkAsSalary",
    PersonnelFundIncome = "personnelFundIncome",
    SalaryOneOff = "salaryOneOff",
    CompensationForUseEarnedIncome = "compensationForUseEarnedIncome",
    CompensationForUseCapitalIncome = "compensationForUseCapitalIncome",
    CompensationVatResponsible = "compensationVatResponsible",
    Compensation = "compensation",
    DividendsForWorkAsCompensation = "dividendsForWorkAsCompensation",
    AthletePay = "athletePay",
    OtherTaxableIncome = "otherTaxableIncome",
    OtherTaxableIncomeOneOff = "otherTaxableIncomeOneOff",
    EmployeeStockOption = "employeeStockOption",
}

/** TaxcardApprovalMethod enumeration */
export enum TaxcardApprovalMethod {
    AssureWaiting = "assureWaiting",
    Approve = "approve",
    Reject = "reject",
}

/** TaxcardCalcDiffCheck enumeration */
export enum TaxcardCalcDiffCheck {
    GetDiff = "getDiff",
    NoCheck = "noCheck",
    CommitDiff = "commitDiff",
}

/** TaxCardIncomeType enumeration */
export enum TaxCardIncomeType {
    Unknown = "unknown",
    SalaxyCalculation = "salaxyCalculation",
    PreviousEmployerSalaries = "previousEmployerSalaries",
    ExternalSalaries = "externalSalaries",
    SharedCardExtSum = "sharedCardExtSum",
    Diff = "diff",
}

/** TaxcardState enumeration */
export enum TaxcardState {
    New = "new",
    Approved = "approved",
    EmployerAdded = "employerAdded",
    VerifiedVero = "verifiedVero",
    SharedWaiting = "sharedWaiting",
    SharedApproved = "sharedApproved",
    SharedRejected = "sharedRejected",
    SharedRejectedWithoutOpen = "sharedRejectedWithoutOpen",
    Shared = "shared",
}

/** TaxcardKind enumeration */
export enum TaxcardKind {
    Undefined = "undefined",
    NoTaxCard = "noTaxCard",
    Auto = "auto",
    DefaultYearly = "defaultYearly",
    Replacement = "replacement",
    NoWithholdingHousehold = "noWithholdingHousehold",
    Others = "others",
    Historical = "historical",
}

/** TaxcardValidity enumeration */
export enum TaxcardValidity {
    Undefined = "undefined",
    Valid = "valid",
    ValidJanuary = "validJanuary",
    Future = "future",
    Expired = "expired",
}

/** TaxAtSourceKind enumeration */
export enum TaxAtSourceKind {
    Undefined = "undefined",
    NoDeduction = "noDeduction",
    MonthlyDeduction = "monthlyDeduction",
    DailyDeduction = "dailyDeduction",
    FixedValues = "fixedValues",
}

/** TaxDeductionWorkCategories enumeration */
export enum TaxDeductionWorkCategories {
    None = "none",
    Householdwork = "householdwork",
    Carework = "carework",
    HomeImprovement = "homeImprovement",
    OwnPropety = "ownPropety",
    RelativesProperty = "relativesProperty",
    OilHeatingReplacementWork = "oilHeatingReplacementWork",
}

/** TaxReportHandling enumeration */
export enum TaxReportHandling {
    Default = "default",
    NoZeroSalaryReport = "noZeroSalaryReport",
    NoMonthlyReport = "noMonthlyReport",
    Always = "always",
}

/** TaxWithholdingKind enumeration */
export enum TaxWithholdingKind {
    Undefined = "undefined",
    Percentage = "percentage",
    FixedValue = "fixedValue",
}

/** TesSubtype enumeration */
export enum TesSubtype {
    NotSelected = "notSelected",
    ConstructionCarpenter = "constructionCarpenter",
    ConstructionFloor = "constructionFloor",
    ConstructionOther = "constructionOther",
    ConstructionFreeContract = "constructionFreeContract",
}

/** TestEnum enumeration */
export enum TestEnum {
    ValueZero = "valueZero",
    ValueOne = "valueOne",
    ValueTwo = "valueTwo",
    ValueThree = "valueThree",
    ValueFour = "valueFour",
    ValueFive = "valueFive",
    ValueSix = "valueSix",
    ValueSeven = "valueSeven",
    ValueEight = "valueEight",
    ValueNine = "valueNine",
    ValueTen = "valueTen",
}

/** ThreadedMessageType enumeration */
export enum ThreadedMessageType {
    Text = "text",
    BlobFile = "blobFile",
    Calculation = "calculation",
    Payroll = "payroll",
    WorkerAccount = "workerAccount",
    Email = "email",
    SalaxyEmail = "salaxyEmail",
    Sms = "sms",
    SalaxySms = "salaxySms",
    Timer = "timer",
    TimerEdited = "timerEdited",
    HourlyReport = "hourlyReport",
    TimeReport = "timeReport",
    Absence = "absence",
    AnnualLeave = "annualLeave",
    CalcRow = "calcRow",
    Travel = "travel",
    Expense = "expense",
}

/** UnemploymentPayrollLimitStatus enumeration */
export enum UnemploymentPayrollLimitStatus {
    Default = "default",
    Higher = "higher",
}

/** UnionPaymentType enumeration */
export enum UnionPaymentType {
    NotSelected = "notSelected",
    RaksaNormal = "raksaNormal",
    RaksaUnemploymentOnly = "raksaUnemploymentOnly",
    Other = "other",
}

/** Unit enumeration */
export enum Unit {
    Undefined = "undefined",
    Hours = "hours",
    Days = "days",
    Weeks = "weeks",
    Period = "period",
    One = "one",
    Count = "count",
    Percent = "percent",
    Kilometers = "kilometers",
    Euro = "euro",
}

/** UsecaseActionType enumeration */
export enum UsecaseActionType {
    ClientScript = "clientScript",
    ClientScriptAsync = "clientScriptAsync",
    ServerScript = "serverScript",
    ServerScriptAsync = "serverScriptAsync",
    WebServiceCall = "webServiceCall",
    PowerAutomateFlow = "powerAutomateFlow",
}

/** UsecaseStatus enumeration */
export enum UsecaseStatus {
    Undefined = "undefined",
    Active = "active",
    Default = "default",
    Inactive = "inactive",
}

/** VarmaPensionOrderAction enumeration */
export enum VarmaPensionOrderAction {
    Undefined = "undefined",
    NewYel = "newYel",
    NewTyel = "newTyel",
    Move = "move",
}

/** VarmaPensionOrderYelPayer enumeration */
export enum VarmaPensionOrderYelPayer {
    Undefined = "undefined",
    Entrepreneur = "entrepreneur",
    Company = "company",
}

/** VatRate enumeration */
export enum VatRate {
    Undefined = "undefined",
    None = "none",
    Vat0000 = "vat0000",
    Vat1000 = "vat1000",
    Vat1400 = "vat1400",
    Vat2400 = "vat2400",
    Vat2550 = "vat2550",
    Other = "other",
}

/** WageBasis enumeration */
export enum WageBasis {
    Undefined = "undefined",
    Monthly = "monthly",
    Hourly = "hourly",
    PerformanceBased = "performanceBased",
    Other = "other",
}

/** WebSiteUserRole enumeration */
export enum WebSiteUserRole {
    None = "none",
    Household = "household",
    Worker = "worker",
    Company = "company",
}

/** WorkerSalaryNotification enumeration */
export enum WorkerSalaryNotification {
    Always = "always",
    Silent = "silent",
}

/** WorkerSalarySlipDeliveryMethod enumeration */
export enum WorkerSalarySlipDeliveryMethod {
    Default = "default",
    Payslip = "payslip",
    Omapalkka = "omapalkka",
}

/** WorkflowEventFeatures enumeration */
export enum WorkflowEventFeatures {
    None = "none",
    IsActive = "isActive",
    IsEditable = "isEditable",
    IsRemovable = "isRemovable",
    IsOnHold = "isOnHold",
}

/** YearEndAdminCheck enumeration */
export enum YearEndAdminCheck {
    NotChecked = "notChecked",
    Ok = "ok",
    OkWithWarning = "okWithWarning",
    Errors = "errors",
}

/** YearEndFeedbackCalculationType enumeration */
export enum YearEndFeedbackCalculationType {
    Unknown = "unknown",
    SalaxyPayment = "salaxyPayment",
    External = "external",
    Correction = "correction",
}

/** YearEndUserFeedback enumeration */
export enum YearEndUserFeedback {
    NotChecked = "notChecked",
    Ok = "ok",
    OkWithModifications = "okWithModifications",
    WillHandleMyself = "willHandleMyself",
    NoYearlyReports = "noYearlyReports",
}

/** YtjCompanyType enumeration */
export enum YtjCompanyType {
    NoCompanyType = "noCompanyType",
    HousingCooperative = "housingCooperative",
    Condominium = "condominium",
    AsoAssociation = "asoAssociation",
    OpenCompany = "openCompany",
    Association = "association",
    HypoAssociation = "hypoAssociation",
    MutualRealEstateCompany = "mutualRealEstateCompany",
    Ky = "ky",
    Osuuskunta = "osuuskunta",
    CooperativeBank = "cooperativeBank",
    Oy = "oy",
    PublicLimitedCompany = "publicLimitedCompany",
    Foundation = "foundation",
    Branch = "branch",
    SavingsBank = "savingsBank",
    FinancialAssociation = "financialAssociation",
    StateEstablishment = "stateEstablishment",
    InsuranceAssociation = "insuranceAssociation",
    PrivateEntrepreneur = "privateEntrepreneur",
    OtherAssociation = "otherAssociation",
    SpecialPurposeAssociation = "specialPurposeAssociation",
    ForestCareAssociation = "forestCareAssociation",
    OtherFinancialAssociation = "otherFinancialAssociation",
    ReligiousCommunity = "religiousCommunity",
    JointInterestGroups = "jointInterestGroups",
    TaxableGrouping = "taxableGrouping",
    DeathEstate = "deathEstate",
    MutualInsuranceAssociation = "mutualInsuranceAssociation",
    ForeignOrganisation = "foreignOrganisation",
    MunicipalEstablishment = "municipalEstablishment",
    FederationOfMunicipalitiesEstablishment = "federationOfMunicipalitiesEstablishment",
    AlandFederation = "alandFederation",
    EuropeanCooperative = "europeanCooperative",
    EuropeanCooperativeBank = "europeanCooperativeBank",
    ReindeerHerdingCooperative = "reindeerHerdingCooperative",
    Unknown = "unknown",
}

/** CarBenefitKind enumeration */
export enum CarBenefitKind {
    Undefined = "undefined",
    LimitedCarBenefit = "limitedCarBenefit",
    FullCarBenefit = "fullCarBenefit",
}

/** BicycleBenefitKind enumeration */
export enum BicycleBenefitKind {
    Undefined = "undefined",
    NoDeduction = "noDeduction",
    SingleDeduction = "singleDeduction",
    PeriodicalDeduction = "periodicalDeduction",
}

/** UnionPaymentKind enumeration */
export enum UnionPaymentKind {
    Undefined = "undefined",
    Fixed = "fixed",
    Percentage = "percentage",
    PercentageAndLimits = "percentageAndLimits",
    RaksaNormal = "raksaNormal",
    RaksaUnemploymentOnly = "raksaUnemploymentOnly",
    Other = "other",
}

/** NonProfitOrgKind enumeration */
export enum NonProfitOrgKind {
    Undefined = "undefined",
    KilometreAllowance = "kilometreAllowance",
    DailyAllowance = "dailyAllowance",
    AccomodationAllowance = "accomodationAllowance",
}

/** SubsidisedCommuteKind enumeration */
export enum SubsidisedCommuteKind {
    Undefined = "undefined",
    NoDeduction = "noDeduction",
    SingleDeduction = "singleDeduction",
    PeriodicalDeduction = "periodicalDeduction",
}

/** MealBenefitKind enumeration */
export enum MealBenefitKind {
    Undefined = "undefined",
    CateringContract = "cateringContract",
    MealTicket = "mealTicket",
    TaxableAmount = "taxableAmount",
    MealAllowance = "mealAllowance",
    Institute = "institute",
    Teacher = "teacher",
    RestaurantWorker = "restaurantWorker",
    CollectedReimbursement = "collectedReimbursement",
}

/** DailyAllowanceKind enumeration */
export enum DailyAllowanceKind {
    Undefined = "undefined",
    FullDailyAllowance = "fullDailyAllowance",
    PartialDailyAllowance = "partialDailyAllowance",
    InternationalDailyAllowance = "internationalDailyAllowance",
    MealAllowance = "mealAllowance",
}

/** BoardKind enumeration */
export enum BoardKind {
    Undefined = "undefined",
}

/** RemunerationKind enumeration */
export enum RemunerationKind {
    Undefined = "undefined",
    InitiativeFee = "initiativeFee",
    BonusPay = "bonusPay",
    Commission = "commission",
    PerformanceBonus = "performanceBonus",
    ShareIssueForEmployees = "shareIssueForEmployees",
    ProfitSharingBonus = "profitSharingBonus",
}

/** OtherCompensationKind enumeration */
export enum OtherCompensationKind {
    Undefined = "undefined",
    MeetingFee = "meetingFee",
    LectureFee = "lectureFee",
    PositionOfTrustCompensation = "positionOfTrustCompensation",
    AccruedTimeOffCompensation = "accruedTimeOffCompensation",
    MembershipOfGoverningBodyCompensation = "membershipOfGoverningBodyCompensation",
    MonetaryGiftForEmployees = "monetaryGiftForEmployees",
    UseCompensationAsEarnedIncome = "useCompensationAsEarnedIncome",
    UseCompensationAsCapitalIncome = "useCompensationAsCapitalIncome",
    OtherTaxableIncomeAsEarnedIncome = "otherTaxableIncomeAsEarnedIncome",
    StockOptionsAndGrants = "stockOptionsAndGrants",
    EmployeeInventionCompensation = "employeeInventionCompensation",
    CapitalIncomePayment = "capitalIncomePayment",
    WorkEffortBasedDividendsAsWage = "workEffortBasedDividendsAsWage",
    WorkEffortBasedDividendsAsNonWage = "workEffortBasedDividendsAsNonWage",
    EmployeeStockOption = "employeeStockOption",
    EmployeeStockOptionWithLowerPrice = "employeeStockOptionWithLowerPrice",
    CopyrightRoyaltiesEarnedIncome = "copyrightRoyaltiesEarnedIncome",
    StockGrantPaidInMoney = "stockGrantPaidInMoney",
    EmployeeStockOptionPaidInMoney = "employeeStockOptionPaidInMoney",
}

/** PaidSickLeaveKind enumeration */
export enum PaidSickLeaveKind {
    Undefined = "undefined",
    PaidSickLeaveSalary = "paidSickLeaveSalary",
    PaidSickLeaveHourlySalary = "paidSickLeaveHourlySalary",
    PaidSickLeaveMonthlySalary = "paidSickLeaveMonthlySalary",
}

/** WorkingTimeCompensationKind enumeration */
export enum WorkingTimeCompensationKind {
    Undefined = "undefined",
    EmergencyWorkCompensation = "emergencyWorkCompensation",
    EveningWorkCompensation = "eveningWorkCompensation",
    EveningShiftAllowance = "eveningShiftAllowance",
    SaturdayPay = "saturdayPay",
    ExtraWorkPremium = "extraWorkPremium",
    OtherCompensation = "otherCompensation",
    WaitingTimeCompensation = "waitingTimeCompensation",
    SundayWorkCompensation = "sundayWorkCompensation",
    StandByCompensation = "standByCompensation",
    WeeklyRestCompensation = "weeklyRestCompensation",
    OvertimeCompensation = "overtimeCompensation",
    NightWorkAllowance = "nightWorkAllowance",
    NightShiftCompensation = "nightShiftCompensation",
}

/** EmploymentTerminationKind enumeration */
export enum EmploymentTerminationKind {
    Undefined = "undefined",
    NoticePeriodCompensation = "noticePeriodCompensation",
    MonetaryWorkingTimeBankCompensation = "monetaryWorkingTimeBankCompensation",
    TerminationAndLayOffDamages = "terminationAndLayOffDamages",
    VoluntaryTerminationCompensation = "voluntaryTerminationCompensation",
    PensionPaidByEmployer = "pensionPaidByEmployer",
}

/** ForeclosureKind enumeration */
export enum ForeclosureKind {
    Undefined = "undefined",
    Fixed = "fixed",
    Periodic = "periodic",
    NonPeriodic = "nonPeriodic",
}

/** TotalWorkerPaymentKind enumeration */
export enum TotalWorkerPaymentKind {
    Undefined = "undefined",
    TotalWorkerPayment = "totalWorkerPayment",
    TotalWorkerWorkerPaymentExcludingExpenses = "totalWorkerWorkerPaymentExcludingExpenses",
    TotalWorkerPaymentAndTax = "totalWorkerPaymentAndTax",
    TotalWorkerWorkerPaymentAndTaxExcludingExpenses = "totalWorkerWorkerPaymentAndTaxExcludingExpenses",
}

/** TransactionCode enumeration */
export enum TransactionCode {
    Unknown = "unknown",
    Ignored = "ignored",
    TimeRatePay = "timeRatePay",
    InitiativeFee = "initiativeFee",
    BonusPay = "bonusPay",
    ComplementaryWagePaidDuringBenefitPeriod = "complementaryWagePaidDuringBenefitPeriod",
    EmergencyWorkCompensation = "emergencyWorkCompensation",
    EveningWorkCompensation = "eveningWorkCompensation",
    EveningShiftAllowance = "eveningShiftAllowance",
    NoticePeriodCompensation = "noticePeriodCompensation",
    KilometreAllowanceTaxable = "kilometreAllowanceTaxable",
    MeetingFee = "meetingFee",
    SaturdayPay = "saturdayPay",
    ExtraWorkPremium = "extraWorkPremium",
    HolidayBonus = "holidayBonus",
    LectureFee = "lectureFee",
    CompensationForTrustPosition = "compensationForTrustPosition",
    OtherCompensation = "otherCompensation",
    WaitingTimeCompensation = "waitingTimeCompensation",
    WorkingConditionCompensation = "workingConditionCompensation",
    PartialPayDuringSickLeave = "partialPayDuringSickLeave",
    Commission = "commission",
    SundayWorkCompensation = "sundayWorkCompensation",
    BenefitArisingFromSyntheticOption = "benefitArisingFromSyntheticOption",
    PerformanceBonus = "performanceBonus",
    MonetaryCompensationFromWorkingTimeBank = "monetaryCompensationFromWorkingTimeBank",
    CompensationForAccruedTimeOff = "compensationForAccruedTimeOff",
    ShareIssueForEmployees = "shareIssueForEmployees",
    ContractPay = "contractPay",
    DamagesInConjunctionWithTermination = "damagesInConjunctionWithTermination",
    StandByCompensation = "standByCompensation",
    VoluntaryCompensationInConjunctionWithTermination = "voluntaryCompensationInConjunctionWithTermination",
    WeeklyRestCompensation = "weeklyRestCompensation",
    ProfitSharingBonus = "profitSharingBonus",
    AnnualHolidayCompensation = "annualHolidayCompensation",
    OvertimeCompensation = "overtimeCompensation",
    NightWorkAllowance = "nightWorkAllowance",
    NightShiftCompensation = "nightShiftCompensation",
    OtherRegularCompensation = "otherRegularCompensation",
    CompensationForUnusedCompensatoryLeave = "compensationForUnusedCompensatoryLeave",
    AccommodationBenefit = "accommodationBenefit",
    InterestBenefitForHousingLoan = "interestBenefitForHousingLoan",
    MealAllowance = "mealAllowance",
    CarBenefit = "carBenefit",
    CompensationForGoverningBodyMembership = "compensationForGoverningBodyMembership",
    ShareOfReserveDrawnFromPersonnelFund = "shareOfReserveDrawnFromPersonnelFund",
    MonetaryGiftForEmployees = "monetaryGiftForEmployees",
    KilometreAllowanceTaxExempt = "kilometreAllowanceTaxExempt",
    TreatmentFeeForMunicipalVeterinarian = "treatmentFeeForMunicipalVeterinarian",
    CompensationForUseEarnedIncome = "compensationForUseEarnedIncome",
    CompensationForUseCapitalIncome = "compensationForUseCapitalIncome",
    OtherTaxableBenefitForEmployees = "otherTaxableBenefitForEmployees",
    OtherTaxableIncomeDeemedEarnedIncome = "otherTaxableIncomeDeemedEarnedIncome",
    OtherFringeBenefit = "otherFringeBenefit",
    KinshipCarersFee = "kinshipCarersFee",
    StockOptions = "stockOptions",
    WagesPaidBySubstitutePayerIncludingSocialInsurance = "wagesPaidBySubstitutePayerIncludingSocialInsurance",
    WagesPaidBySubstitutePayerIncludingEarningsRelatedPensionInsurance = "wagesPaidBySubstitutePayerIncludingEarningsRelatedPensionInsurance",
    WagesPaidBySubstitutePayerIncludingUnemploymentInsurance = "wagesPaidBySubstitutePayerIncludingUnemploymentInsurance",
    WagesPaidBySubstitutePayerIncludingAccidentAndOccupationalDiseaseInsurance = "wagesPaidBySubstitutePayerIncludingAccidentAndOccupationalDiseaseInsurance",
    WagesPaidBySubstitutePayerIncludingHealthInsurance = "wagesPaidBySubstitutePayerIncludingHealthInsurance",
    CompensationForEmployeeInvention = "compensationForEmployeeInvention",
    ReimbursementOfPrivateCaretakersExpenses = "reimbursementOfPrivateCaretakersExpenses",
    PrivateCaretakersFee = "privateCaretakersFee",
    ReimbursementOfFamilyDayCareProvidersExpenses = "reimbursementOfFamilyDayCareProvidersExpenses",
    TelephoneBenefit = "telephoneBenefit",
    DailyAllowance = "dailyAllowance",
    CapitalIncomePayment = "capitalIncomePayment",
    MealBenefit = "mealBenefit",
    ReimbursementOfCostsPaidToConciliator = "reimbursementOfCostsPaidToConciliator",
    NonWageCompensationForWork = "nonWageCompensationForWork",
    SupplementaryDailyAllowancePaidByEmployerSpecificHealthInsuranceFund = "supplementaryDailyAllowancePaidByEmployerSpecificHealthInsuranceFund",
    PensionPaidByEmployer = "pensionPaidByEmployer",
    DividendsBasedOnWages = "dividendsBasedOnWages",
    DividendsBasedOnNonWage = "dividendsBasedOnNonWage",
    EmployerSubsidisedCommuterTicketTaxExempt = "employerSubsidisedCommuterTicketTaxExempt",
    EmployerSubsidisedCommuterTicketTaxable = "employerSubsidisedCommuterTicketTaxable",
    EmployeeStockOption = "employeeStockOption",
    WagesTransferredToAthletesSpecialFund = "wagesTransferredToAthletesSpecialFund",
    WagesPaidFromAthletesSpecialFund = "wagesPaidFromAthletesSpecialFund",
    WagesForInsurancePurposes = "wagesForInsurancePurposes",
    TaxableReimbursementOfExpenses = "taxableReimbursementOfExpenses",
    PrivateDayCareAllowanceMunicipalSupplement = "privateDayCareAllowanceMunicipalSupplement",
    PrivateDayCareAllowanceWages = "privateDayCareAllowanceWages",
    PrivateDayCareAllowanceNonWage = "privateDayCareAllowanceNonWage",
    KilometreAllowancePaidByNonProfitOrganisation = "kilometreAllowancePaidByNonProfitOrganisation",
    DailyAllowancePaidByNonProfitOrganisation = "dailyAllowancePaidByNonProfitOrganisation",
    UnjustEnrichment = "unjustEnrichment",
    EmployeeStockOptionLowerMarketPrice = "employeeStockOptionLowerMarketPrice",
    RoyaltyPaidToNonResidentTaxpayer = "royaltyPaidToNonResidentTaxpayer",
    BicycleBenefitTaxExempt = "bicycleBenefitTaxExempt",
    BicycleBenefitTaxable = "bicycleBenefitTaxable",
    ConditionalStockOptions = "conditionalStockOptions",
    CopyrightRoyaltiesEarnedIncome = "copyrightRoyaltiesEarnedIncome",
    StockGrantPaidInMoney = "stockGrantPaidInMoney",
    EmployeeStockOptionPaidInMoney = "employeeStockOptionPaidInMoney",
    EarningsFromJuELEmployerToLightEntrepreneur = "earningsFromJuELEmployerToLightEntrepreneur",
    CompensationCollectedForCarBenefit = "compensationCollectedForCarBenefit",
    WithholdingTax = "withholdingTax",
    ElectedOfficialFee = "electedOfficialFee",
    TaxAtSource = "taxAtSource",
    TaxAtSourceDeduction = "taxAtSourceDeduction",
    WagesPaid = "wagesPaid",
    ReimbursementCollectedForOtherFringeBenefits = "reimbursementCollectedForOtherFringeBenefits",
    OtherItemDeductibleFromNetWage = "otherItemDeductibleFromNetWage",
    NetWage = "netWage",
    EmployerPaidPremiumForCollectiveAdditionalPensionInsurance = "employerPaidPremiumForCollectiveAdditionalPensionInsurance",
    EmployerPaidPremiumForCollectiveAdditionalPensionInsuranceEmployeesContribution = "employerPaidPremiumForCollectiveAdditionalPensionInsuranceEmployeesContribution",
    EmployeesHealthInsuranceContribution = "employeesHealthInsuranceContribution",
    EmployeesPensionInsuranceContribution = "employeesPensionInsuranceContribution",
    EmployeesUnemploymentInsuranceContribution = "employeesUnemploymentInsuranceContribution",
    ReimbursementForEmployerSubsidisedCommuterTicket = "reimbursementForEmployerSubsidisedCommuterTicket",
    TaxPaidAbroad = "taxPaidAbroad",
    Distraint = "distraint",
    VoluntaryIndividualPensionInsurancePremium = "voluntaryIndividualPensionInsurancePremium",
    DeductionBeforeWithholding = "deductionBeforeWithholding",
    ReimbursementCollectedForBicycleBenefit = "reimbursementCollectedForBicycleBenefit",
}

/** TrainingKind enumeration */
export enum TrainingKind {
    Undefined = "undefined",
    TrainingSalary = "trainingSalary",
    TrainingHourlySalary = "trainingHourlySalary",
    TrainingMonthlySalary = "trainingMonthlySalary",
}

export interface Holidays {
    newYearsDay?: HolidayDate | undefined;
    epiphany?: HolidayDate | undefined;
    goodFriday?: HolidayDate | undefined;
    easterSunday?: HolidayDate | undefined;
    easterSaturday?: HolidayDate | undefined;
    easterMonday?: HolidayDate | undefined;
    mayDay?: HolidayDate | undefined;
    ascensionDay?: HolidayDate | undefined;
    pentecost?: HolidayDate | undefined;
    midsummerEve?: HolidayDate | undefined;
    midsummerDay?: HolidayDate | undefined;
    allSaintsDay?: HolidayDate | undefined;
    independenceDay?: HolidayDate | undefined;
    christmasEve?: HolidayDate | undefined;
    christmasDay?: HolidayDate | undefined;
    stStephensDay?: HolidayDate | undefined;
}

export interface holidays {
    newYearsDay?: HolidayDate | undefined;
    epiphany?: HolidayDate | undefined;
    goodFriday?: HolidayDate | undefined;
    easterSunday?: HolidayDate | undefined;
    easterSaturday?: HolidayDate | undefined;
    easterMonday?: HolidayDate | undefined;
    mayDay?: HolidayDate | undefined;
    ascensionDay?: HolidayDate | undefined;
    pentecost?: HolidayDate | undefined;
    midsummerEve?: HolidayDate | undefined;
    midsummerDay?: HolidayDate | undefined;
    allSaintsDay?: HolidayDate | undefined;
    independenceDay?: HolidayDate | undefined;
    christmasEve?: HolidayDate | undefined;
    christmasDay?: HolidayDate | undefined;
    stStephensDay?: HolidayDate | undefined;
}

export enum UserInfoApplicationRole {
    Unknown = "unknown",
    NoAccess = "noAccess",
    ReadOnly = "readOnly",
    ReadWrite = "readWrite",
    Owner = "owner",
}

export interface FileParameter {
    data: any;
    fileName: string;
}