//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Salaxy.Client.Api
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbsencesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AbsencesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkerAbsences> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkerAbsences> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/absences/new"
                    urlBuilder_.Append("v03/api/absences/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkerAbsences>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkerAbsences> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkerAbsences> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/absences/{id}"
                    urlBuilder_.Append("v03/api/absences/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkerAbsences>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a Absences object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Absences object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/absences/{id}"
                    urlBuilder_.Append("v03/api/absences/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets latest Absences objects (top 100) for all employment relations.
        /// <br/>Typically, this is enough for most companies. If not, fetch employment ID's and fetch absences objects using employment/set.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerAbsences>> GetLatestAsync()
        {
            return GetLatestAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets latest Absences objects (top 100) for all employment relations.
        /// <br/>Typically, this is enough for most companies. If not, fetch employment ID's and fetch absences objects using employment/set.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerAbsences>> GetLatestAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/absences/latest"
                    urlBuilder_.Append("v03/api/absences/latest");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WorkerAbsences>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfApiListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfApiListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/absences"
                    urlBuilder_.Append("v03/api/absences");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfApiListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkerAbsences> CrudSaveAsync(WorkerAbsences model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkerAbsences> CrudSaveAsync(WorkerAbsences model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/absences"
                    urlBuilder_.Append("v03/api/absences");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkerAbsences>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the Absences object for a specific Employment relation.
        /// </summary>
        /// <param name="employmentId">The employment relation for which to list the Absences.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkerAbsences> EmploymentListAsync(string employmentId)
        {
            return EmploymentListAsync(employmentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the Absences object for a specific Employment relation.
        /// </summary>
        /// <param name="employmentId">The employment relation for which to list the Absences.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkerAbsences> EmploymentListAsync(string employmentId, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentId == null)
                throw new System.ArgumentNullException("employmentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/absences/employment/{employmentId}"
                    urlBuilder_.Append("v03/api/absences/employment/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employmentId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkerAbsences>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns Absences objects for given Employment relations.
        /// </summary>
        /// <param name="employmentIds">Set of employmentIds for which to get the Absences objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerAbsences>> EmploymentListAllAsync(System.Collections.Generic.IEnumerable<string> employmentIds)
        {
            return EmploymentListAllAsync(employmentIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns Absences objects for given Employment relations.
        /// </summary>
        /// <param name="employmentIds">Set of employmentIds for which to get the Absences objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerAbsences>> EmploymentListAllAsync(System.Collections.Generic.IEnumerable<string> employmentIds, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentIds == null)
                throw new System.ArgumentNullException("employmentIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/absences/employment/set"
                    urlBuilder_.Append("v03/api/absences/employment/set");
                    urlBuilder_.Append('?');
                    foreach (var item_ in employmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("employmentIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WorkerAbsences>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AccountClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets the current Person account: Either the current account or the Primary contact person account if the current account is a company.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PersonAccount> CrudGetPersonAsync()
        {
            return CrudGetPersonAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the current Person account: Either the current account or the Primary contact person account if the current account is a company.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PersonAccount> CrudGetPersonAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/person"
                    urlBuilder_.Append("v03/api/accounts/person");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PersonAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves the person account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PersonAccount> CrudSavePersonAsync(PersonAccount person)
        {
            return CrudSavePersonAsync(person, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves the person account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PersonAccount> CrudSavePersonAsync(PersonAccount person, System.Threading.CancellationToken cancellationToken)
        {
            if (person == null)
                throw new System.ArgumentNullException("person");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(person, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/person"
                    urlBuilder_.Append("v03/api/accounts/person");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PersonAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the current company account if the current account is a company
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyAccount> CrudGetCompanyAsync()
        {
            return CrudGetCompanyAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the current company account if the current account is a company
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyAccount> CrudGetCompanyAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/company"
                    urlBuilder_.Append("v03/api/accounts/company");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves the company account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyAccount> CrudSaveCompanyAsync(CompanyAccount company)
        {
            return CrudSaveCompanyAsync(company, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves the company account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyAccount> CrudSaveCompanyAsync(CompanyAccount company, System.Threading.CancellationToken cancellationToken)
        {
            if (company == null)
                throw new System.ArgumentNullException("company");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(company, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/company"
                    urlBuilder_.Append("v03/api/accounts/company");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns workflow data for the given API object.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkflowData> CrudGetWorkflowAsync()
        {
            return CrudGetWorkflowAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns workflow data for the given API object.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowData> CrudGetWorkflowAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/workflows"
                    urlBuilder_.Append("v03/api/accounts/workflows");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds or updates workflow event for the given API object.
        /// </summary>
        /// <param name="workflowEvent">Event to add or update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkflowData> CrudSaveWorkflowAsync(WorkflowEvent workflowEvent)
        {
            return CrudSaveWorkflowAsync(workflowEvent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds or updates workflow event for the given API object.
        /// </summary>
        /// <param name="workflowEvent">Event to add or update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowData> CrudSaveWorkflowAsync(WorkflowEvent workflowEvent, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowEvent == null)
                throw new System.ArgumentNullException("workflowEvent");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(workflowEvent, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/workflows"
                    urlBuilder_.Append("v03/api/accounts/workflows");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lists all credentials which can access to this account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SessionUserCredential>> CrudListCredentialsAsync()
        {
            return CrudListCredentialsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all credentials which can access to this account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SessionUserCredential>> CrudListCredentialsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/credential"
                    urlBuilder_.Append("v03/api/accounts/credential");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SessionUserCredential>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates the credential.
        /// </summary>
        /// <param name="credential">Credential to update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SessionUserCredential> CrudSaveCredentialAsync(SessionUserCredential credential)
        {
            return CrudSaveCredentialAsync(credential, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the credential.
        /// </summary>
        /// <param name="credential">Credential to update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SessionUserCredential> CrudSaveCredentialAsync(SessionUserCredential credential, System.Threading.CancellationToken cancellationToken)
        {
            if (credential == null)
                throw new System.ArgumentNullException("credential");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(credential, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/credential"
                    urlBuilder_.Append("v03/api/accounts/credential");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SessionUserCredential>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lists existing X.509 certificates for the account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Certificate>> CrudListCertificatesAsync()
        {
            return CrudListCertificatesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists existing X.509 certificates for the account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Certificate>> CrudListCertificatesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/certificate"
                    urlBuilder_.Append("v03/api/accounts/certificate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Certificate>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Issues a new X.509 certificate for the account in PFX (PKCS12) format for Microsoft / Windows systems.
        /// </summary>
        /// <param name="certificate">A certificate object containing title and password for the new certificate.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Certificate> CrudSaveCertificateAsync(Certificate certificate)
        {
            return CrudSaveCertificateAsync(certificate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Issues a new X.509 certificate for the account in PFX (PKCS12) format for Microsoft / Windows systems.
        /// </summary>
        /// <param name="certificate">A certificate object containing title and password for the new certificate.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Certificate> CrudSaveCertificateAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken)
        {
            if (certificate == null)
                throw new System.ArgumentNullException("certificate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(certificate, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/certificate"
                    urlBuilder_.Append("v03/api/accounts/certificate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Certificate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lists all accounts to which this account has given authorizations.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizedAvatar>> CrudListAuthorizedAccountsAsync()
        {
            return CrudListAuthorizedAccountsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all accounts to which this account has given authorizations.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizedAvatar>> CrudListAuthorizedAccountsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/authorizedAccount"
                    urlBuilder_.Append("v03/api/accounts/authorizedAccount");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuthorizedAvatar>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Allow an account to act on behalf of this account.
        /// </summary>
        /// <param name="authorizedAccount">Account who is authorized to act on behalf of this account.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AuthorizedAvatar> CrudSaveAuthorizedAccountAsync(AuthorizedAvatar authorizedAccount)
        {
            return CrudSaveAuthorizedAccountAsync(authorizedAccount, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allow an account to act on behalf of this account.
        /// </summary>
        /// <param name="authorizedAccount">Account who is authorized to act on behalf of this account.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizedAvatar> CrudSaveAuthorizedAccountAsync(AuthorizedAvatar authorizedAccount, System.Threading.CancellationToken cancellationToken)
        {
            if (authorizedAccount == null)
                throw new System.ArgumentNullException("authorizedAccount");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(authorizedAccount, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/authorizedAccount"
                    urlBuilder_.Append("v03/api/accounts/authorizedAccount");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizedAvatar>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lists all accounts on behalf of which this account has been authorized to act.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountBase>> CrudListAuthorizingAccountsAsync()
        {
            return CrudListAuthorizingAccountsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all accounts on behalf of which this account has been authorized to act.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountBase>> CrudListAuthorizingAccountsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/authorizingAccount"
                    urlBuilder_.Append("v03/api/accounts/authorizingAccount");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccountBase>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns workflow event for the given API object and event id.
        /// </summary>
        /// <param name="eventId">Unique id for the event.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkflowEvent> CrudGetWorkflowEventAsync(string eventId)
        {
            return CrudGetWorkflowEventAsync(eventId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns workflow event for the given API object and event id.
        /// </summary>
        /// <param name="eventId">Unique id for the event.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowEvent> CrudGetWorkflowEventAsync(string eventId, System.Threading.CancellationToken cancellationToken)
        {
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/workflows/events/{eventId}"
                    urlBuilder_.Append("v03/api/accounts/workflows/events/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowEvent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves the avatar file for the account, does not save the account and avatar.
        /// </summary>
        /// <param name="avatar">Avatar file to upload</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Avatar> SaveAvatarFileAsync(FileParameter avatar)
        {
            return SaveAvatarFileAsync(avatar, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves the avatar file for the account, does not save the account and avatar.
        /// </summary>
        /// <param name="avatar">Avatar file to upload</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Avatar> SaveAvatarFileAsync(FileParameter avatar, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (avatar == null)
                        throw new System.ArgumentNullException("avatar");
                    else
                    {
                        var content_avatar_ = new System.Net.Http.StreamContent(avatar.Data);
                        if (!string.IsNullOrEmpty(avatar.ContentType))
                            content_avatar_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(avatar.ContentType);
                        content_.Add(content_avatar_, "avatar", avatar.FileName ?? "avatar");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/avatar"
                    urlBuilder_.Append("v03/api/accounts/avatar");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Avatar>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Issues a new certificate for the account and provides the certificate in PEM format.
        /// <br/>For this method, also the Certificate Signing Request (CSR) may be passed in the certificate Text field.
        /// </summary>
        /// <param name="certificate">A certificate object containing title for the new certificate.
        /// <br/>You may also pass the Certificate Signing Request (CSR) in the Password field. In this case the private key is not returned by the method.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IssuedCertificate> IssuePemCertificateAsync(Certificate certificate)
        {
            return IssuePemCertificateAsync(certificate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Issues a new certificate for the account and provides the certificate in PEM format.
        /// <br/>For this method, also the Certificate Signing Request (CSR) may be passed in the certificate Text field.
        /// </summary>
        /// <param name="certificate">A certificate object containing title for the new certificate.
        /// <br/>You may also pass the Certificate Signing Request (CSR) in the Password field. In this case the private key is not returned by the method.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IssuedCertificate> IssuePemCertificateAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken)
        {
            if (certificate == null)
                throw new System.ArgumentNullException("certificate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(certificate, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/certificate/pem"
                    urlBuilder_.Append("v03/api/accounts/certificate/pem");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IssuedCertificate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Changes the avatar file for the credential, does not save the credential. It requires a separate save.
        /// </summary>
        /// <param name="avatar">User avatar file to upload</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SessionUserCredential> SaveCredentialFileAsync(string id, FileParameter avatar)
        {
            return SaveCredentialFileAsync(id, avatar, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Changes the avatar file for the credential, does not save the credential. It requires a separate save.
        /// </summary>
        /// <param name="avatar">User avatar file to upload</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SessionUserCredential> SaveCredentialFileAsync(string id, FileParameter avatar, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (avatar == null)
                        throw new System.ArgumentNullException("avatar");
                    else
                    {
                        var content_avatar_ = new System.Net.Http.StreamContent(avatar.Data);
                        if (!string.IsNullOrEmpty(avatar.ContentType))
                            content_avatar_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(avatar.ContentType);
                        content_.Add(content_avatar_, "avatar", avatar.FileName ?? "avatar");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/credential/{id}/avatar"
                    urlBuilder_.Append("v03/api/accounts/credential/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/avatar");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SessionUserCredential>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Changes the avatar file for the credential, does not save the credential. It requires a separate save.
        /// </summary>
        /// <param name="avatar">User avatar file to upload</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SessionUserCredential> SaveCredentialFile2Async(string id, FileParameter avatar)
        {
            return SaveCredentialFile2Async(id, avatar, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Changes the avatar file for the credential, does not save the credential. It requires a separate save.
        /// </summary>
        /// <param name="avatar">User avatar file to upload</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SessionUserCredential> SaveCredentialFile2Async(string id, FileParameter avatar, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (avatar == null)
                        throw new System.ArgumentNullException("avatar");
                    else
                    {
                        var content_avatar_ = new System.Net.Http.StreamContent(avatar.Data);
                        if (!string.IsNullOrEmpty(avatar.ContentType))
                            content_avatar_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(avatar.ContentType);
                        content_.Add(content_avatar_, "avatar", avatar.FileName ?? "avatar");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/credential/avatar"
                    urlBuilder_.Append("v03/api/accounts/credential/avatar");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SessionUserCredential>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove the credential linked to the account.
        /// </summary>
        /// <param name="id">Credential (id) to remove.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteCredentialAsync(string id)
        {
            return CrudDeleteCredentialAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove the credential linked to the account.
        /// </summary>
        /// <param name="id">Credential (id) to remove.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteCredentialAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/credential/{id}"
                    urlBuilder_.Append("v03/api/accounts/credential/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revokes existing X.509 certificate from the account.
        /// </summary>
        /// <param name="id">Certificate (thumbprint) to revoke.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteCertificateAsync(string id)
        {
            return CrudDeleteCertificateAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revokes existing X.509 certificate from the account.
        /// </summary>
        /// <param name="id">Certificate (thumbprint) to revoke.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteCertificateAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/certificate/{id}"
                    urlBuilder_.Append("v03/api/accounts/certificate/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Disallow an account to act on behalf of this account.
        /// </summary>
        /// <param name="id">Account who is no more authorized to act on behalf of this account.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAuthorizedAccountAsync(string id)
        {
            return CrudDeleteAuthorizedAccountAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disallow an account to act on behalf of this account.
        /// </summary>
        /// <param name="id">Account who is no more authorized to act on behalf of this account.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAuthorizedAccountAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/authorizedAccount/{id}"
                    urlBuilder_.Append("v03/api/accounts/authorizedAccount/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes the account. Restricted to the test system only.
        /// </summary>
        /// <param name="id">Id of the account which should be deleted.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAuthorizingAccountAsync(string id)
        {
            return CrudDeleteAuthorizingAccountAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes the account. Restricted to the test system only.
        /// </summary>
        /// <param name="id">Id of the account which should be deleted.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAuthorizingAccountAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/authorizingAccount/{id}"
                    urlBuilder_.Append("v03/api/accounts/authorizingAccount/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes the workflow event from the given API object.
        /// </summary>
        /// <param name="eventIdOrType">Id or type of the event to delete.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteWorkflowAsync(string eventIdOrType)
        {
            return CrudDeleteWorkflowAsync(eventIdOrType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes the workflow event from the given API object.
        /// </summary>
        /// <param name="eventIdOrType">Id or type of the event to delete.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteWorkflowAsync(string eventIdOrType, System.Threading.CancellationToken cancellationToken)
        {
            if (eventIdOrType == null)
                throw new System.ArgumentNullException("eventIdOrType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/workflows/{eventIdOrType}"
                    urlBuilder_.Append("v03/api/accounts/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventIdOrType, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingTargetClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AccountingTargetClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingTarget> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingTarget> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounting-target/new"
                    urlBuilder_.Append("v03/api/accounting-target/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingTarget>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object.
        /// <br/>The indentifier may in format id@owner if the accounting target is a public read-only item owned by another owner.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingTarget> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object.
        /// <br/>The indentifier may in format id@owner if the accounting target is a public read-only item owned by another owner.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingTarget> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounting-target/{id}"
                    urlBuilder_.Append("v03/api/accounting-target/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingTarget>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounting-target/{id}"
                    urlBuilder_.Append("v03/api/accounting-target/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfAccountingTargetListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfAccountingTargetListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounting-target"
                    urlBuilder_.Append("v03/api/accounting-target");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfAccountingTargetListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingTarget> CrudSaveAsync(AccountingTarget model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingTarget> CrudSaveAsync(AccountingTarget model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounting-target"
                    urlBuilder_.Append("v03/api/accounting-target");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingTarget>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountResetClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public AccountResetClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Removes the kyc.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountBase> AddCurrentAccountKycAsync()
        {
            return AddCurrentAccountKycAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the kyc.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountBase> AddCurrentAccountKycAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/kyc"
                    urlBuilder_.Append("v03/api/accounts/kyc");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountBase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Removes the kyc.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteCurrentAccountKycAsync()
        {
            return DeleteCurrentAccountKycAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the kyc.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteCurrentAccountKycAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/kyc"
                    urlBuilder_.Append("v03/api/accounts/kyc");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// For the purposes of Single Sign-On Demo, creates a certificate.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AssertionDemoCertificateResponse> SsoCreateCertificateAsync(AssertionDemoCertificateRequest model)
        {
            return SsoCreateCertificateAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// For the purposes of Single Sign-On Demo, creates a certificate.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AssertionDemoCertificateResponse> SsoCreateCertificateAsync(AssertionDemoCertificateRequest model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/sso-demo/create-certificate"
                    urlBuilder_.Append("v03/api/accounts/sso-demo/create-certificate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AssertionDemoCertificateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the account completely including credentials and Auth0 user.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteCurrentAsync()
        {
            return CrudDeleteCurrentAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the account completely including credentials and Auth0 user.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteCurrentAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/current"
                    urlBuilder_.Append("v03/api/accounts/current");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove all calculations, workers etc. user objects except products and signature from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteDataAsync()
        {
            return CrudDeleteDataAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove all calculations, workers etc. user objects except products and signature from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteDataAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/data/all"
                    urlBuilder_.Append("v03/api/accounts/data/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove the signature from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteSignatureAsync()
        {
            return CrudDeleteSignatureAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove the signature from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteSignatureAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/signature"
                    urlBuilder_.Append("v03/api/accounts/signature");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove all workers from the account, including calculations, employment contracts and tax cards.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteWorkersAsync()
        {
            return CrudDeleteWorkersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove all workers from the account, including calculations, employment contracts and tax cards.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteWorkersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/worker/all"
                    urlBuilder_.Append("v03/api/accounts/worker/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove all products from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteProductsAsync()
        {
            return CrudDeleteProductsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove all products from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteProductsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/product/all"
                    urlBuilder_.Append("v03/api/accounts/product/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove all holiday years as well absences from all workers. 
        /// <br/>Does not touch the default values of holidays in Worker Employment relation.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteHolidaysAndAbsencesAsync()
        {
            return CrudDeleteHolidaysAndAbsencesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove all holiday years as well absences from all workers. 
        /// <br/>Does not touch the default values of holidays in Worker Employment relation.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteHolidaysAndAbsencesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/holidays/all"
                    urlBuilder_.Append("v03/api/accounts/holidays/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove all calculations, payrolls and payments from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteCalculationsAsync()
        {
            return CrudDeleteCalculationsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove all calculations, payrolls and payments from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteCalculationsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/calculation/all"
                    urlBuilder_.Append("v03/api/accounts/calculation/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete all empty accounts (company or worker) created by this account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAuthorizingAccountsAsync()
        {
            return CrudDeleteAuthorizingAccountsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all empty accounts (company or worker) created by this account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAuthorizingAccountsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/authorizingAccount/all"
                    urlBuilder_.Append("v03/api/accounts/authorizingAccount/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove pension and insurance from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeletePensionAndInsuranceAsync()
        {
            return CrudDeletePensionAndInsuranceAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove pension and insurance from the account.
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeletePensionAndInsuranceAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/product/pensionAndInsurance"
                    urlBuilder_.Append("v03/api/accounts/product/pensionAndInsurance");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove invoices with business objects
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteInvoicesByIdAsync(System.Collections.Generic.IEnumerable<string> ids)
        {
            return CrudDeleteInvoicesByIdAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove invoices with business objects
        /// </summary>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteInvoicesByIdAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken)
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/accounts/invoice"
                    urlBuilder_.Append("v03/api/accounts/invoice");
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BeneficialOwnersClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public BeneficialOwnersClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets a single object.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BeneficialOwners> CrudGetAsync()
        {
            return CrudGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BeneficialOwners> CrudGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/beneficial-owners"
                    urlBuilder_.Append("v03/api/beneficial-owners");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BeneficialOwners>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BeneficialOwners> CrudSaveAsync(BeneficialOwners model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BeneficialOwners> CrudSaveAsync(BeneficialOwners model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/beneficial-owners"
                    urlBuilder_.Append("v03/api/beneficial-owners");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BeneficialOwners>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CalculationsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new Calculation object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new Calculation object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/new"
                    urlBuilder_.Append("v03/api/calculations/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single Calculation object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single Calculation object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/{id}"
                    urlBuilder_.Append("v03/api/calculations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a Calculation object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Calculation object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/{id}"
                    urlBuilder_.Append("v03/api/calculations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the EarningsPayment object for a specific calculation.
        /// </summary>
        /// <param name="id">The calculation for which to list the EarningsPayments.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetEprAsync(string id)
        {
            return GetEprAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the EarningsPayment object for a specific calculation.
        /// </summary>
        /// <param name="id">The calculation for which to list the EarningsPayments.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetEprAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/epr/{id}"
                    urlBuilder_.Append("v03/api/calculations/epr/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancels the invoice or payment processing for the given calculation.
        /// <br/>Please note that this is possible only if the payment channel supports the cancel action.
        /// </summary>
        /// <param name="id">Identifier of the Calculation to be cancelled.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> CancelAsync(string id)
        {
            return CancelAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancels the invoice or payment processing for the given calculation.
        /// <br/>Please note that this is possible only if the payment channel supports the cancel action.
        /// </summary>
        /// <param name="id">Identifier of the Calculation to be cancelled.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> CancelAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/cancel/{id}"
                    urlBuilder_.Append("v03/api/calculations/cancel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns list of all calculations for the current employer. Both editable and readonly calculations are returned.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfCalculationListItem> ODataSearchAllAsync(string search, string select, string filter, string orderby, bool? count)
        {
            return ODataSearchAllAsync(search, select, filter, orderby, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns list of all calculations for the current employer. Both editable and readonly calculations are returned.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfCalculationListItem> ODataSearchAllAsync(string search, string select, string filter, string orderby, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations"
                    urlBuilder_.Append("v03/api/calculations");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfCalculationListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates or updates a calculation.
        /// </summary>
        /// <param name="model">The calculation object that is updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> CrudSaveAsync(Calculation model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates or updates a calculation.
        /// </summary>
        /// <param name="model">The calculation object that is updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> CrudSaveAsync(Calculation model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations"
                    urlBuilder_.Append("v03/api/calculations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the Calculation objects for a specific Employment relation.
        /// </summary>
        /// <param name="employmentId">The employment relation for which to list the Calculations.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Calculation>> EmploymentListAsync(string employmentId)
        {
            return EmploymentListAsync(employmentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the Calculation objects for a specific Employment relation.
        /// </summary>
        /// <param name="employmentId">The employment relation for which to list the Calculations.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Calculation>> EmploymentListAsync(string employmentId, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentId == null)
                throw new System.ArgumentNullException("employmentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/employment/{employmentId}"
                    urlBuilder_.Append("v03/api/calculations/employment/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employmentId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Calculation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns Calculation objects for given identifiers.
        /// </summary>
        /// <param name="ids">Unique identifiers for the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Calculation>> CrudGetMultiAsync(System.Collections.Generic.IEnumerable<string> ids)
        {
            return CrudGetMultiAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns Calculation objects for given identifiers.
        /// </summary>
        /// <param name="ids">Unique identifiers for the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Calculation>> CrudGetMultiAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken)
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/set"
                    urlBuilder_.Append("v03/api/calculations/set");
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Calculation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns list of calculations ion the given category for the current employer.
        /// </summary>
        /// <param name="category">Status category for the calculations.</param>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfCalculationListItem> ODataSearchCategoryAsync(CalculationStatusCategory category, string search, string select, string filter, string orderby, bool? count)
        {
            return ODataSearchCategoryAsync(category, search, select, filter, orderby, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns list of calculations ion the given category for the current employer.
        /// </summary>
        /// <param name="category">Status category for the calculations.</param>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfCalculationListItem> ODataSearchCategoryAsync(CalculationStatusCategory category, string search, string select, string filter, string orderby, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            if (category == null)
                throw new System.ArgumentNullException("category");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/category/{category}"
                    urlBuilder_.Append("v03/api/calculations/category/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfCalculationListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a copy of a paid or template calculation and creates a new draft based on that calculation.
        /// <br/>Note that this method just returns a copy of the calculation, it does not save it yet to the DB.
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <param name="startDate">Work start date for the new salary calculation</param>
        /// <param name="endDate">Work end date for the new salary calculation</param>
        /// <param name="numberOfDays">Number of days for the new calculation. If null, the old number of days is maintained.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> CopyAsNewAsync(string id, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? numberOfDays)
        {
            return CopyAsNewAsync(id, startDate, endDate, numberOfDays, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a copy of a paid or template calculation and creates a new draft based on that calculation.
        /// <br/>Note that this method just returns a copy of the calculation, it does not save it yet to the DB.
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <param name="startDate">Work start date for the new salary calculation</param>
        /// <param name="endDate">Work end date for the new salary calculation</param>
        /// <param name="numberOfDays">Number of days for the new calculation. If null, the old number of days is maintained.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> CopyAsNewAsync(string id, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? numberOfDays, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/copy/{id}"
                    urlBuilder_.Append("v03/api/calculations/copy/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (startDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (numberOfDays != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("numberOfDays")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(numberOfDays, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns Calculation objects for given Employment relations.
        /// </summary>
        /// <param name="employmentIds">Set of employmentIds for which to get the Calculation objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Calculation>> EmploymentList2Async(System.Collections.Generic.IEnumerable<string> employmentIds)
        {
            return EmploymentList2Async(employmentIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns Calculation objects for given Employment relations.
        /// </summary>
        /// <param name="employmentIds">Set of employmentIds for which to get the Calculation objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Calculation>> EmploymentList2Async(System.Collections.Generic.IEnumerable<string> employmentIds, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentIds == null)
                throw new System.ArgumentNullException("employmentIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/employment/set"
                    urlBuilder_.Append("v03/api/calculations/employment/set");
                    urlBuilder_.Append('?');
                    foreach (var item_ in employmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("employmentIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Calculation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves the IR related data (rows and salary date) to a calculation.
        /// </summary>
        /// <param name="calculation">The calculation with ir related data to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> SaveCalculationForIrAsync(Calculation calculation)
        {
            return SaveCalculationForIrAsync(calculation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves the IR related data (rows and salary date) to a calculation.
        /// </summary>
        /// <param name="calculation">The calculation with ir related data to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> SaveCalculationForIrAsync(Calculation calculation, System.Threading.CancellationToken cancellationToken)
        {
            if (calculation == null)
                throw new System.ArgumentNullException("calculation");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calculation, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/ir"
                    urlBuilder_.Append("v03/api/calculations/ir");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Converts a calculation to EarningsPayment object.
        /// </summary>
        /// <param name="calculation">The calculation to convert to EarningsPayment report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ConvertToEprAsync(Calculation calculation)
        {
            return ConvertToEprAsync(calculation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Converts a calculation to EarningsPayment object.
        /// </summary>
        /// <param name="calculation">The calculation to convert to EarningsPayment report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ConvertToEprAsync(Calculation calculation, System.Threading.CancellationToken cancellationToken)
        {
            if (calculation == null)
                throw new System.ArgumentNullException("calculation");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calculation, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/epr"
                    urlBuilder_.Append("v03/api/calculations/epr");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the worktime data for Period recalculation from raw calc fetching holidays and absences data from storage.
        /// <br/>These determine how holiday salaries etc. and absence deductions will be added as rows to calculations.
        /// <br/>The idea is that user can still modify these before the actual calculation is done as often manual adjustments need to be made.
        /// <br/>Also, providers that do not use HolidayYears and Absences can skip this step and use recalculate-worktime directly.
        /// </summary>
        /// <param name="calc">The salary calculation that should be recalculated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CalcWorktime> GetWorktimeDataAsync(Calculation calc)
        {
            return GetWorktimeDataAsync(calc, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the worktime data for Period recalculation from raw calc fetching holidays and absences data from storage.
        /// <br/>These determine how holiday salaries etc. and absence deductions will be added as rows to calculations.
        /// <br/>The idea is that user can still modify these before the actual calculation is done as often manual adjustments need to be made.
        /// <br/>Also, providers that do not use HolidayYears and Absences can skip this step and use recalculate-worktime directly.
        /// </summary>
        /// <param name="calc">The salary calculation that should be recalculated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CalcWorktime> GetWorktimeDataAsync(Calculation calc, System.Threading.CancellationToken cancellationToken)
        {
            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/worktime"
                    urlBuilder_.Append("v03/api/calculations/worktime");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CalcWorktime>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates (saves) the employment related information from Calculation to Employment relation.
        /// <br/>Currently only updates rows, OccupationCode and WorkDescription.
        /// </summary>
        /// <param name="calc">Source calculation</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> UpdateToEmploymentAsync(Calculation calc)
        {
            return UpdateToEmploymentAsync(calc, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates (saves) the employment related information from Calculation to Employment relation.
        /// <br/>Currently only updates rows, OccupationCode and WorkDescription.
        /// </summary>
        /// <param name="calc">Source calculation</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> UpdateToEmploymentAsync(Calculation calc, System.Threading.CancellationToken cancellationToken)
        {
            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/update-to-employment"
                    urlBuilder_.Append("v03/api/calculations/update-to-employment");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates a calculation from employment relation by deleting all the rows and re-setting the employment.
        /// <br/>If the calculation has an ID, it is saved, if not it is just recalculated.
        /// </summary>
        /// <param name="calc">Calculation to update</param>
        /// <param name="save">If true, saves the calculation.
        /// <br/>If false just recalculates.
        /// <br/>If omitted, saves if the calculation has an id, otherwise just recalculates.
        /// <br/>The null value may be removed when all clients are updated (defaults to false).</param>
        /// <param name="updateRows">If true, updates also the default salary rows from employment data to calculation.
        /// <br/>False updates only other employment data.
        /// <br/>Null currently defaults to True for backward compatibility, but it may be removed (or default to false) in future versions (when all clients are updated).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> UpdateFromEmploymentAsync(Calculation calc, bool? save, bool? updateRows)
        {
            return UpdateFromEmploymentAsync(calc, save, updateRows, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a calculation from employment relation by deleting all the rows and re-setting the employment.
        /// <br/>If the calculation has an ID, it is saved, if not it is just recalculated.
        /// </summary>
        /// <param name="calc">Calculation to update</param>
        /// <param name="save">If true, saves the calculation.
        /// <br/>If false just recalculates.
        /// <br/>If omitted, saves if the calculation has an id, otherwise just recalculates.
        /// <br/>The null value may be removed when all clients are updated (defaults to false).</param>
        /// <param name="updateRows">If true, updates also the default salary rows from employment data to calculation.
        /// <br/>False updates only other employment data.
        /// <br/>Null currently defaults to True for backward compatibility, but it may be removed (or default to false) in future versions (when all clients are updated).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> UpdateFromEmploymentAsync(Calculation calc, bool? save, bool? updateRows, System.Threading.CancellationToken cancellationToken)
        {
            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/update-from-employment"
                    urlBuilder_.Append("v03/api/calculations/update-from-employment");
                    urlBuilder_.Append('?');
                    if (save != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("save")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(save, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (updateRows != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("updateRows")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(updateRows, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Notify the employer from the shared calculation.
        /// </summary>
        /// <param name="calculationId">Identifier of the calculation.</param>
        /// <param name="to">Employer email address.</param>
        /// <param name="cc">Adress for the copy of the email.</param>
        /// <param name="message">Message to the employer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> NotifySharingAsync(string calculationId, string to, string cc, string message)
        {
            return NotifySharingAsync(calculationId, to, cc, message, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Notify the employer from the shared calculation.
        /// </summary>
        /// <param name="calculationId">Identifier of the calculation.</param>
        /// <param name="to">Employer email address.</param>
        /// <param name="cc">Adress for the copy of the email.</param>
        /// <param name="message">Message to the employer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> NotifySharingAsync(string calculationId, string to, string cc, string message, System.Threading.CancellationToken cancellationToken)
        {
            if (calculationId == null)
                throw new System.ArgumentNullException("calculationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/sharing/{calculationId}/notification"
                    urlBuilder_.Append("v03/api/calculations/sharing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(calculationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/notification");
                    urlBuilder_.Append('?');
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cc != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cc")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cc, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or remove a sharing to a given calculation.
        /// </summary>
        /// <param name="calculationId">Identifier of the calculation.</param>
        /// <param name="type">Sharing method. For typical sharing scenarios, use 'url'.</param>
        /// <param name="employerId">Id of the employer to share the calculation with.</param>
        /// <param name="to">Employer email address.</param>
        /// <param name="cc">Adress for the copy of the email.</param>
        /// <param name="message">Message to the employer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CalculationSharing> SharingAsync(string calculationId, SharingUriType? type, string employerId, string to, string cc, string message)
        {
            return SharingAsync(calculationId, type, employerId, to, cc, message, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or remove a sharing to a given calculation.
        /// </summary>
        /// <param name="calculationId">Identifier of the calculation.</param>
        /// <param name="type">Sharing method. For typical sharing scenarios, use 'url'.</param>
        /// <param name="employerId">Id of the employer to share the calculation with.</param>
        /// <param name="to">Employer email address.</param>
        /// <param name="cc">Adress for the copy of the email.</param>
        /// <param name="message">Message to the employer.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CalculationSharing> SharingAsync(string calculationId, SharingUriType? type, string employerId, string to, string cc, string message, System.Threading.CancellationToken cancellationToken)
        {
            if (calculationId == null)
                throw new System.ArgumentNullException("calculationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculations/sharing/{calculationId}"
                    urlBuilder_.Append("v03/api/calculations/sharing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(calculationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (employerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("employerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(employerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(to, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (cc != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("cc")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(cc, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CalculationSharing>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculatorClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public CalculatorClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new Calculation object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> CreateNewAsync()
        {
            return CreateNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new Calculation object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> CreateNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculator/new"
                    urlBuilder_.Append("v03/api/calculator/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets salary calculation parameters that are changing yearly.
        /// <br/>The method is designed for the end-of-year and as such it only supports 2 years: 
        /// <br/>the current / previous year (from Jan to Nov) OR current / next year (in approx. December).
        /// </summary>
        /// <param name="forDate">Date for which the numbers are fetched</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<YearlyChangingNumbers> GetYearlyChangingNumbersAsync(System.DateTimeOffset forDate)
        {
            return GetYearlyChangingNumbersAsync(forDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets salary calculation parameters that are changing yearly.
        /// <br/>The method is designed for the end-of-year and as such it only supports 2 years: 
        /// <br/>the current / previous year (from Jan to Nov) OR current / next year (in approx. December).
        /// </summary>
        /// <param name="forDate">Date for which the numbers are fetched</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<YearlyChangingNumbers> GetYearlyChangingNumbersAsync(System.DateTimeOffset forDate, System.Threading.CancellationToken cancellationToken)
        {
            if (forDate == null)
                throw new System.ArgumentNullException("forDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculator/yearlyNumbers/{forDate}"
                    urlBuilder_.Append("v03/api/calculator/yearlyNumbers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(forDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<YearlyChangingNumbers>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("When the year is not supported, returns NOT FOUND.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns holidays for the given year.
        /// </summary>
        /// <param name="forDate">Year for which the holidays are fetched</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<YearlyHolidays> GetYearlyHolidaysAsync(System.DateTimeOffset forDate)
        {
            return GetYearlyHolidaysAsync(forDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns holidays for the given year.
        /// </summary>
        /// <param name="forDate">Year for which the holidays are fetched</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<YearlyHolidays> GetYearlyHolidaysAsync(System.DateTimeOffset forDate, System.Threading.CancellationToken cancellationToken)
        {
            if (forDate == null)
                throw new System.ArgumentNullException("forDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculator/yearlyHolidays/{forDate}"
                    urlBuilder_.Append("v03/api/calculator/yearlyHolidays/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(forDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<YearlyHolidays>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the worktime data for Period recalculation from raw calc, holidays andabsences data.
        /// <br/>These determine how holiday salaries etc. and absence deductions will be added as rows to calculations.
        /// <br/>The idea is that user can still modify these before the actual calculation is done as often manual adjustments need to be made.
        /// <br/>Also, providers that do not use HolidayYears and Absences can skip this step and use recalculate-worktime directly.
        /// <br/>NOTE: This is the anonymous method that can be called without storage.
        /// <br/>There is a corresponding method in Calculations-service that fetches the holidayYear and Absences automatically.
        /// </summary>
        /// <param name="model">The salary calculation that should be recalculated and the holidays and absences that should be added to it.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CalcWorktime> GetWorktimeDataAsync(PeriodRecalculationData model)
        {
            return GetWorktimeDataAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the worktime data for Period recalculation from raw calc, holidays andabsences data.
        /// <br/>These determine how holiday salaries etc. and absence deductions will be added as rows to calculations.
        /// <br/>The idea is that user can still modify these before the actual calculation is done as often manual adjustments need to be made.
        /// <br/>Also, providers that do not use HolidayYears and Absences can skip this step and use recalculate-worktime directly.
        /// <br/>NOTE: This is the anonymous method that can be called without storage.
        /// <br/>There is a corresponding method in Calculations-service that fetches the holidayYear and Absences automatically.
        /// </summary>
        /// <param name="model">The salary calculation that should be recalculated and the holidays and absences that should be added to it.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CalcWorktime> GetWorktimeDataAsync(PeriodRecalculationData model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculator/worktime"
                    urlBuilder_.Append("v03/api/calculator/worktime");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CalcWorktime>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Takes in a calculation and recalculates it.
        /// </summary>
        /// <param name="calc">The salary calculation that should be recalculated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> RecalculateAsync(Calculation calc)
        {
            return RecalculateAsync(calc, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Takes in a calculation and recalculates it.
        /// </summary>
        /// <param name="calc">The salary calculation that should be recalculated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> RecalculateAsync(Calculation calc, System.Threading.CancellationToken cancellationToken)
        {
            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculator/recalculate"
                    urlBuilder_.Append("v03/api/calculator/recalculate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Recalculates the Worktime into the rest of the calculation:
        /// <br/>Mainly adds (recreates) rows for absences and holidays to the calculation.
        /// </summary>
        /// <param name="model">The salary calculation that should be recalculated and the holidays and absences that should be added to it.
        /// <br/>Should contain the worktime property that is used as bases of the calculation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> RecalculateWorktimeAsync(Calculation model)
        {
            return RecalculateWorktimeAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recalculates the Worktime into the rest of the calculation:
        /// <br/>Mainly adds (recreates) rows for absences and holidays to the calculation.
        /// </summary>
        /// <param name="model">The salary calculation that should be recalculated and the holidays and absences that should be added to it.
        /// <br/>Should contain the worktime property that is used as bases of the calculation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> RecalculateWorktimeAsync(Calculation model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/calculator/recalculate-worktime"
                    urlBuilder_.Append("v03/api/calculator/recalculate-worktime");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatasetClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public DatasetClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Dataset> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Dataset> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/datasets/new"
                    urlBuilder_.Append("v03/api/datasets/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Dataset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Dataset> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Dataset> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/datasets/{id}"
                    urlBuilder_.Append("v03/api/datasets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Dataset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/datasets/{id}"
                    urlBuilder_.Append("v03/api/datasets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfDatasetListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfDatasetListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/datasets"
                    urlBuilder_.Append("v03/api/datasets");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfDatasetListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Dataset> CrudSaveAsync(Dataset model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Dataset> CrudSaveAsync(Dataset model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/datasets"
                    urlBuilder_.Append("v03/api/datasets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Dataset>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public EmploymentClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Employment> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Employment> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/employments/{id}"
                    urlBuilder_.Append("v03/api/employments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Employment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a worker account that this Employer has created (Owned by this employer).
        /// <br/>The methods looks for the WorkerAccount, deletes it and also deletes all the employment relations, taxcards, holidays and absences.
        /// <br/>This method will fail if there are any calculations (paid or draft in WorkerAccount) or if the person is the contact person for the current company.
        /// </summary>
        /// <param name="id">Identifier of the worker account that will be deleted.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a worker account that this Employer has created (Owned by this employer).
        /// <br/>The methods looks for the WorkerAccount, deletes it and also deletes all the employment relations, taxcards, holidays and absences.
        /// <br/>This method will fail if there are any calculations (paid or draft in WorkerAccount) or if the person is the contact person for the current company.
        /// </summary>
        /// <param name="id">Identifier of the worker account that will be deleted.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/employments/{id}"
                    urlBuilder_.Append("v03/api/employments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets all the active employment relations (the full payload).
        /// </summary>
        /// <param name="date">Date for which the employment relation should be active. Defaults to today.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Employment>> CrudGetActiveAsync(System.DateTimeOffset? date)
        {
            return CrudGetActiveAsync(date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all the active employment relations (the full payload).
        /// </summary>
        /// <param name="date">Date for which the employment relation should be active. Defaults to today.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Employment>> CrudGetActiveAsync(System.DateTimeOffset? date, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/employments/active"
                    urlBuilder_.Append("v03/api/employments/active");
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Employment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the employment relations in search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <param name="activeDate">Provides a helper for filtering only active employment relations. You can provide an ISO date (yyyy-mm-dd) to 
        /// <br/>list only employments that are active on a specific date. Set to "today" for today's date.
        /// <br/>Default "all" lists all employments: active and passive.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfEmploymentListItem> ODataSearchAsync(string search, string activeDate, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, activeDate, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the employment relations in search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <param name="activeDate">Provides a helper for filtering only active employment relations. You can provide an ISO date (yyyy-mm-dd) to 
        /// <br/>list only employments that are active on a specific date. Set to "today" for today's date.
        /// <br/>Default "all" lists all employments: active and passive.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfEmploymentListItem> ODataSearchAsync(string search, string activeDate, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/employments"
                    urlBuilder_.Append("v03/api/employments");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (activeDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("activeDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activeDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfEmploymentListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds or Updates an employment relation this Employer has created (Owned by this employer).
        /// <br/>Workers cannot update employment relations.
        /// </summary>
        /// <param name="model">Employment relation that should be added or updated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Employment> CrudSaveAsync(Employment model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds or Updates an employment relation this Employer has created (Owned by this employer).
        /// <br/>Workers cannot update employment relations.
        /// </summary>
        /// <param name="model">Employment relation that should be added or updated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Employment> CrudSaveAsync(Employment model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/employments"
                    urlBuilder_.Append("v03/api/employments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Employment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public FileClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BlobFile> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BlobFile> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/files/{id}"
                    urlBuilder_.Append("v03/api/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BlobFile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets all the Files of specific type for this user.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BlobFile>> CrudListAsync(BlobFileType type)
        {
            return CrudListAsync(type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all the Files of specific type for this user.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BlobFile>> CrudListAsync(BlobFileType type, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/files/type/{type}"
                    urlBuilder_.Append("v03/api/files/type/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BlobFile>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the file stream / blob for a single file
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<byte[]> GetStreamAsync(string id)
        {
            return GetStreamAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the file stream / blob for a single file
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<byte[]> GetStreamAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/files/{id}/stream"
                    urlBuilder_.Append("v03/api/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stream");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<byte[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the content for a single file.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<byte[]> GetContentAsync(string id)
        {
            return GetContentAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the content for a single file.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<byte[]> GetContentAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/files/{id}/content"
                    urlBuilder_.Append("v03/api/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<byte[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the preview image (currently always PNG) for the file, if available.
        /// </summary>
        /// <param name="id">Identifier of the file that potentially has preview</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<byte[]> GetPreviewAsync(string id)
        {
            return GetPreviewAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the preview image (currently always PNG) for the file, if available.
        /// </summary>
        /// <param name="id">Identifier of the file that potentially has preview</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<byte[]> GetPreviewAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/files/{id}/preview"
                    urlBuilder_.Append("v03/api/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/preview");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<byte[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns list of files for the current owner.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfFileListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns list of files for the current owner.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfFileListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/files"
                    urlBuilder_.Append("v03/api/files");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfFileListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayYearsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public HolidayYearsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HolidayYear> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HolidayYear> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays/new"
                    urlBuilder_.Append("v03/api/holidays/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HolidayYear>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HolidayYear> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HolidayYear> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays/{id}"
                    urlBuilder_.Append("v03/api/holidays/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HolidayYear>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays/{id}"
                    urlBuilder_.Append("v03/api/holidays/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets all the Holiday Year objects of specified year.
        /// </summary>
        /// <param name="year">The holiday year to filter</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HolidayYear>> AllForYearAsync(int year)
        {
            return AllForYearAsync(year, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all the Holiday Year objects of specified year.
        /// </summary>
        /// <param name="year">The holiday year to filter</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HolidayYear>> AllForYearAsync(int year, System.Threading.CancellationToken cancellationToken)
        {
            if (year == null)
                throw new System.ArgumentNullException("year");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays/year/{year}"
                    urlBuilder_.Append("v03/api/holidays/year/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(year, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HolidayYear>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfApiListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfApiListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays"
                    urlBuilder_.Append("v03/api/holidays");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfApiListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HolidayYear> CrudSaveAsync(HolidayYear model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HolidayYear> CrudSaveAsync(HolidayYear model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays"
                    urlBuilder_.Append("v03/api/holidays");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HolidayYear>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the Holiday Year objects for a specific Employment relation.
        /// </summary>
        /// <param name="employmentId">The employment relation for which to list the Holiday Years.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HolidayYear>> EmploymentListAsync(string employmentId)
        {
            return EmploymentListAsync(employmentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the Holiday Year objects for a specific Employment relation.
        /// </summary>
        /// <param name="employmentId">The employment relation for which to list the Holiday Years.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HolidayYear>> EmploymentListAsync(string employmentId, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentId == null)
                throw new System.ArgumentNullException("employmentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays/employment/{employmentId}"
                    urlBuilder_.Append("v03/api/holidays/employment/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employmentId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HolidayYear>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Initializes (or re-creates or assures) the holiday years for an employment relation.
        /// </summary>
        /// <param name="employmentId">Identifier of the Employment relation that stores the holiday specification.</param>
        /// <param name="holidaySpec">The holiday specification tht should be used for inititalization.
        /// <br/>The spec is also stored to the Employment relation.</param>
        /// <param name="assureOnly">If true, does not re-create existing holiday years, but adds missing ones.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HolidayYear>> InitHolidaysForEmploymentIdAsync(string employmentId, HolidaySpecificationForYear holidaySpec, bool? assureOnly)
        {
            return InitHolidaysForEmploymentIdAsync(employmentId, holidaySpec, assureOnly, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Initializes (or re-creates or assures) the holiday years for an employment relation.
        /// </summary>
        /// <param name="employmentId">Identifier of the Employment relation that stores the holiday specification.</param>
        /// <param name="holidaySpec">The holiday specification tht should be used for inititalization.
        /// <br/>The spec is also stored to the Employment relation.</param>
        /// <param name="assureOnly">If true, does not re-create existing holiday years, but adds missing ones.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HolidayYear>> InitHolidaysForEmploymentIdAsync(string employmentId, HolidaySpecificationForYear holidaySpec, bool? assureOnly, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentId == null)
                throw new System.ArgumentNullException("employmentId");

            if (holidaySpec == null)
                throw new System.ArgumentNullException("holidaySpec");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(holidaySpec, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays/employment/{employmentId}"
                    urlBuilder_.Append("v03/api/holidays/employment/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employmentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (assureOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("assureOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(assureOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HolidayYear>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a default holiday specification based on employment relation information.
        /// <br/>This is presented to the user before calling InitHolidaysForEmploymentId().
        /// </summary>
        /// <param name="employmentId">The employment relation ID from which the defaults are fetched.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HolidaySpecificationForYear> GetDefaultSpecForEmploymentIdAsync(string employmentId)
        {
            return GetDefaultSpecForEmploymentIdAsync(employmentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a default holiday specification based on employment relation information.
        /// <br/>This is presented to the user before calling InitHolidaysForEmploymentId().
        /// </summary>
        /// <param name="employmentId">The employment relation ID from which the defaults are fetched.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HolidaySpecificationForYear> GetDefaultSpecForEmploymentIdAsync(string employmentId, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentId == null)
                throw new System.ArgumentNullException("employmentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays/employment/{employmentId}/default-spec"
                    urlBuilder_.Append("v03/api/holidays/employment/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employmentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/default-spec");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HolidaySpecificationForYear>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns Holiday Year objects for given Employment relations.
        /// </summary>
        /// <param name="employmentIds">Set of employmentIds for which to get the Holiday Year objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HolidayYear>> EmploymentList2Async(System.Collections.Generic.IEnumerable<string> employmentIds)
        {
            return EmploymentList2Async(employmentIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns Holiday Year objects for given Employment relations.
        /// </summary>
        /// <param name="employmentIds">Set of employmentIds for which to get the Holiday Year objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HolidayYear>> EmploymentList2Async(System.Collections.Generic.IEnumerable<string> employmentIds, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentIds == null)
                throw new System.ArgumentNullException("employmentIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/holidays/employment/set"
                    urlBuilder_.Append("v03/api/holidays/employment/set");
                    urlBuilder_.Append('?');
                    foreach (var item_ in employmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("employmentIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HolidayYear>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ImportClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Queries the eInvoice address for the given official id (Y-tunnus).
        /// </summary>
        /// <param name="officialId">The official identifier of the company (Y-tunnus).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EInvoiceAddress>> GetEInvoiceAddressAsync(string officialId)
        {
            return GetEInvoiceAddressAsync(officialId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Queries the eInvoice address for the given official id (Y-tunnus).
        /// </summary>
        /// <param name="officialId">The official identifier of the company (Y-tunnus).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EInvoiceAddress>> GetEInvoiceAddressAsync(string officialId, System.Threading.CancellationToken cancellationToken)
        {
            if (officialId == null)
                throw new System.ArgumentNullException("officialId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/import/einvoice/receiver"
                    urlBuilder_.Append("v03/api/import/einvoice/receiver");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("officialId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(officialId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EInvoiceAddress>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates or assures the posted worker employment relations in the system.
        /// </summary>
        /// <param name="workers">Workers for import.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerImport>> ImportWorkersAsync(System.Collections.Generic.IEnumerable<WorkerImport> workers)
        {
            return ImportWorkersAsync(workers, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates or assures the posted worker employment relations in the system.
        /// </summary>
        /// <param name="workers">Workers for import.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerImport>> ImportWorkersAsync(System.Collections.Generic.IEnumerable<WorkerImport> workers, System.Threading.CancellationToken cancellationToken)
        {
            if (workers == null)
                throw new System.ArgumentNullException("workers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(workers, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/import/workers"
                    urlBuilder_.Append("v03/api/import/workers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WorkerImport>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates or assures the posted customer companies in the system.
        /// <br/>Checks required authorizations for the calling account.
        /// <br/>Please note that this method is only for TRUSTED partners.
        /// </summary>
        /// <param name="companies">Companies for import.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyImport>> ImportCompaniesAsync(System.Collections.Generic.IEnumerable<CompanyImport> companies)
        {
            return ImportCompaniesAsync(companies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates or assures the posted customer companies in the system.
        /// <br/>Checks required authorizations for the calling account.
        /// <br/>Please note that this method is only for TRUSTED partners.
        /// </summary>
        /// <param name="companies">Companies for import.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CompanyImport>> ImportCompaniesAsync(System.Collections.Generic.IEnumerable<CompanyImport> companies, System.Threading.CancellationToken cancellationToken)
        {
            if (companies == null)
                throw new System.ArgumentNullException("companies");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(companies, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/import/companies"
                    urlBuilder_.Append("v03/api/import/companies");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CompanyImport>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sends the invoices as einvoices.
        /// </summary>
        /// <param name="invoices">Identifiers (format id@owner) for the invoices for which the einvoices should be generated and sent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EInvoicingRequest>> SendAsEInvoicesAsync(System.Collections.Generic.IEnumerable<EInvoicingRequest> invoices)
        {
            return SendAsEInvoicesAsync(invoices, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sends the invoices as einvoices.
        /// </summary>
        /// <param name="invoices">Identifiers (format id@owner) for the invoices for which the einvoices should be generated and sent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EInvoicingRequest>> SendAsEInvoicesAsync(System.Collections.Generic.IEnumerable<EInvoicingRequest> invoices, System.Threading.CancellationToken cancellationToken)
        {
            if (invoices == null)
                throw new System.ArgumentNullException("invoices");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(invoices, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/import/einvoicing"
                    urlBuilder_.Append("v03/api/import/einvoicing");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EInvoicingRequest>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds posted calculations to a new or existing payroll object.
        /// <br/>The existing payroll object is search by company official id, salary date and source id
        /// </summary>
        /// <param name="calculations">Calculations for import.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CalculationImport>> ImportCalculationsAsync(System.Collections.Generic.IEnumerable<CalculationImport> calculations)
        {
            return ImportCalculationsAsync(calculations, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds posted calculations to a new or existing payroll object.
        /// <br/>The existing payroll object is search by company official id, salary date and source id
        /// </summary>
        /// <param name="calculations">Calculations for import.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CalculationImport>> ImportCalculationsAsync(System.Collections.Generic.IEnumerable<CalculationImport> calculations, System.Threading.CancellationToken cancellationToken)
        {
            if (calculations == null)
                throw new System.ArgumentNullException("calculations");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calculations, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/import/calculations"
                    urlBuilder_.Append("v03/api/import/calculations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CalculationImport>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Checks the existence of given workers.
        /// <br/>The id for worker can be worker ID, social security number of employment ID.
        /// </summary>
        /// <param name="workers">Workers to check.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerCheck>> CheckWorkersAsync(System.Collections.Generic.IEnumerable<WorkerCheck> workers)
        {
            return CheckWorkersAsync(workers, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Checks the existence of given workers.
        /// <br/>The id for worker can be worker ID, social security number of employment ID.
        /// </summary>
        /// <param name="workers">Workers to check.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerCheck>> CheckWorkersAsync(System.Collections.Generic.IEnumerable<WorkerCheck> workers, System.Threading.CancellationToken cancellationToken)
        {
            if (workers == null)
                throw new System.ArgumentNullException("workers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(workers, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/import/workers-check"
                    urlBuilder_.Append("v03/api/import/workers-check");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WorkerCheck>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates invoices for given payroll objects.
        /// </summary>
        /// <param name="payrolls">Identifiers (format id@owner) for the payrolls.</param>
        /// <param name="channel">Payment channel to use.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoicingRequest>> CreateInvoicesForPayrollsAsync(System.Collections.Generic.IEnumerable<InvoicingRequest> payrolls, PaymentChannel channel)
        {
            return CreateInvoicesForPayrollsAsync(payrolls, channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates invoices for given payroll objects.
        /// </summary>
        /// <param name="payrolls">Identifiers (format id@owner) for the payrolls.</param>
        /// <param name="channel">Payment channel to use.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoicingRequest>> CreateInvoicesForPayrollsAsync(System.Collections.Generic.IEnumerable<InvoicingRequest> payrolls, PaymentChannel channel, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (payrolls == null)
                throw new System.ArgumentNullException("payrolls");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(payrolls, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/import/invoicing/{channel}"
                    urlBuilder_.Append("v03/api/import/invoicing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoicingRequest>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Checks the invoice settings for the company.
        /// </summary>
        /// <param name="accounts">Accounts to check.</param>
        /// <param name="type">Check target: "sepa" for sepa-payments, or "eInvoice" for eInvoice -payments.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceSettingsCheck>> CheckInvoiceSettingsAsync(System.Collections.Generic.IEnumerable<InvoiceSettingsCheck> accounts, string type)
        {
            return CheckInvoiceSettingsAsync(accounts, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Checks the invoice settings for the company.
        /// </summary>
        /// <param name="accounts">Accounts to check.</param>
        /// <param name="type">Check target: "sepa" for sepa-payments, or "eInvoice" for eInvoice -payments.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceSettingsCheck>> CheckInvoiceSettingsAsync(System.Collections.Generic.IEnumerable<InvoiceSettingsCheck> accounts, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (accounts == null)
                throw new System.ArgumentNullException("accounts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(accounts, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/import/invoice-settings-check/{type}"
                    urlBuilder_.Append("v03/api/import/invoice-settings-check/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoiceSettingsCheck>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsuranceServicesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public InsuranceServicesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new Varma pension order.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VarmaPensionOrder> CrudVarmaPensionOrderGetNewAsync()
        {
            return CrudVarmaPensionOrderGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new Varma pension order.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VarmaPensionOrder> CrudVarmaPensionOrderGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/partner-services/varma/pension/new"
                    urlBuilder_.Append("v03/api/partner-services/varma/pension/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VarmaPensionOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Factory method that creates a new Local Tapiola insurance order.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LocalTapiolaInsuranceOrder> CrudLocalTapiolaInsuranceOrderCreateNewAsync()
        {
            return CrudLocalTapiolaInsuranceOrderCreateNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new Local Tapiola insurance order.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LocalTapiolaInsuranceOrder> CrudLocalTapiolaInsuranceOrderCreateNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/partner-services/local-tapiola/insurance/new"
                    urlBuilder_.Append("v03/api/partner-services/local-tapiola/insurance/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LocalTapiolaInsuranceOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sends the Varma pension order.
        /// </summary>
        /// <param name="order">The Varma pension order to send.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VarmaPensionOrder> SendVarmaPensionOrderAsync(VarmaPensionOrder order)
        {
            return SendVarmaPensionOrderAsync(order, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sends the Varma pension order.
        /// </summary>
        /// <param name="order">The Varma pension order to send.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VarmaPensionOrder> SendVarmaPensionOrderAsync(VarmaPensionOrder order, System.Threading.CancellationToken cancellationToken)
        {
            if (order == null)
                throw new System.ArgumentNullException("order");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(order, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/partner-services/varma/pension/order"
                    urlBuilder_.Append("v03/api/partner-services/varma/pension/order");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VarmaPensionOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Validates the Varma pension order.
        /// </summary>
        /// <param name="order">The Varma pension order to validate.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VarmaPensionOrder> ValidateVarmaPensionOrderAsync(VarmaPensionOrder order)
        {
            return ValidateVarmaPensionOrderAsync(order, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validates the Varma pension order.
        /// </summary>
        /// <param name="order">The Varma pension order to validate.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VarmaPensionOrder> ValidateVarmaPensionOrderAsync(VarmaPensionOrder order, System.Threading.CancellationToken cancellationToken)
        {
            if (order == null)
                throw new System.ArgumentNullException("order");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(order, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/partner-services/varma/pension/validate"
                    urlBuilder_.Append("v03/api/partner-services/varma/pension/validate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VarmaPensionOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sends the Local Tapiola insurance order.
        /// </summary>
        /// <param name="order">The Local Tapiola insurance order to send.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LocalTapiolaInsuranceOrder> CrudLocalTapiolaInsuranceOrderSaveAsync(LocalTapiolaInsuranceOrder order)
        {
            return CrudLocalTapiolaInsuranceOrderSaveAsync(order, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sends the Local Tapiola insurance order.
        /// </summary>
        /// <param name="order">The Local Tapiola insurance order to send.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LocalTapiolaInsuranceOrder> CrudLocalTapiolaInsuranceOrderSaveAsync(LocalTapiolaInsuranceOrder order, System.Threading.CancellationToken cancellationToken)
        {
            if (order == null)
                throw new System.ArgumentNullException("order");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(order, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/partner-services/local-tapiola/insurance/order"
                    urlBuilder_.Append("v03/api/partner-services/local-tapiola/insurance/order");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LocalTapiolaInsuranceOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Validates the Local Tapiola insurance order.
        /// </summary>
        /// <param name="order">The Local Tapiola insurance to validate.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LocalTapiolaInsuranceOrder> CrudLocalTapiolaInsuranceOrderValidateAsync(LocalTapiolaInsuranceOrder order)
        {
            return CrudLocalTapiolaInsuranceOrderValidateAsync(order, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validates the Local Tapiola insurance order.
        /// </summary>
        /// <param name="order">The Local Tapiola insurance to validate.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LocalTapiolaInsuranceOrder> CrudLocalTapiolaInsuranceOrderValidateAsync(LocalTapiolaInsuranceOrder order, System.Threading.CancellationToken cancellationToken)
        {
            if (order == null)
                throw new System.ArgumentNullException("order");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(order, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/partner-services/local-tapiola/insurance/validate"
                    urlBuilder_.Append("v03/api/partner-services/local-tapiola/insurance/validate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LocalTapiolaInsuranceOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public InvoiceClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets a single invoice. based on identier.
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Invoice> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single invoice. based on identier.
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Invoice> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/{id}"
                    urlBuilder_.Append("v03/api/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/{id}"
                    urlBuilder_.Append("v03/api/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns list of invoices for the current owner.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfInvoiceListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns list of invoices for the current owner.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfInvoiceListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices"
                    urlBuilder_.Append("v03/api/invoices");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfInvoiceListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Requests an update for the status of an invoice.
        /// </summary>
        /// <param name="id">Id of the invoice to update.</param>
        /// <param name="status">The requested status for the invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Invoice> RequestStatusUpdateGETAsync(string id, InvoiceStatus status)
        {
            return RequestStatusUpdateGETAsync(id, status, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests an update for the status of an invoice.
        /// </summary>
        /// <param name="id">Id of the invoice to update.</param>
        /// <param name="status">The requested status for the invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Invoice> RequestStatusUpdateGETAsync(string id, InvoiceStatus status, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (status == null)
                throw new System.ArgumentNullException("status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/{id}/status/{status}"
                    urlBuilder_.Append("v03/api/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/status/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Requests an update for the status of an invoice.
        /// </summary>
        /// <param name="id">Id of the invoice to update.</param>
        /// <param name="status">The requested status for the invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Invoice> RequestStatusUpdatePOSTAsync(string id, InvoiceStatus status)
        {
            return RequestStatusUpdatePOSTAsync(id, status, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Requests an update for the status of an invoice.
        /// </summary>
        /// <param name="id">Id of the invoice to update.</param>
        /// <param name="status">The requested status for the invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Invoice> RequestStatusUpdatePOSTAsync(string id, InvoiceStatus status, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (status == null)
                throw new System.ArgumentNullException("status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/{id}/status/{status}"
                    urlBuilder_.Append("v03/api/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/status/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the pdf file for the invoice.
        /// </summary>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ContentGETAsync(string id, bool? inline)
        {
            return ContentGETAsync(id, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the pdf file for the invoice.
        /// </summary>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ContentGETAsync(string id, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/{id}/content"
                    urlBuilder_.Append("v03/api/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");
                    urlBuilder_.Append('?');
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the finvoice file for the invoice.
        /// </summary>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> FinvoiceGETAsync(string id, bool? inline)
        {
            return FinvoiceGETAsync(id, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the finvoice file for the invoice.
        /// </summary>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> FinvoiceGETAsync(string id, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/{id}/finvoice"
                    urlBuilder_.Append("v03/api/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/finvoice");
                    urlBuilder_.Append('?');
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the sepa file for the posted ids.
        /// </summary>
        /// <param name="ids">Ids of the invoices for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SepaGETAsync(System.Collections.Generic.IEnumerable<string> ids, string payerIbanNumber, string bankPartyId, bool? inline)
        {
            return SepaGETAsync(ids, payerIbanNumber, bankPartyId, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the sepa file for the posted ids.
        /// </summary>
        /// <param name="ids">Ids of the invoices for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SepaGETAsync(System.Collections.Generic.IEnumerable<string> ids, string payerIbanNumber, string bankPartyId, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/sepa"
                    urlBuilder_.Append("v03/api/invoices/sepa");
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (payerIbanNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("payerIbanNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(payerIbanNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bankPartyId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bankPartyId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bankPartyId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the sepa file for the posted invoices.
        /// </summary>
        /// <param name="invoices">Invoices for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SepaPOSTAsync(System.Collections.Generic.IEnumerable<Invoice> invoices, string payerIbanNumber, string bankPartyId, bool? inline)
        {
            return SepaPOSTAsync(invoices, payerIbanNumber, bankPartyId, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the sepa file for the posted invoices.
        /// </summary>
        /// <param name="invoices">Invoices for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SepaPOSTAsync(System.Collections.Generic.IEnumerable<Invoice> invoices, string payerIbanNumber, string bankPartyId, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (invoices == null)
                throw new System.ArgumentNullException("invoices");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(invoices, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/sepa"
                    urlBuilder_.Append("v03/api/invoices/sepa");
                    urlBuilder_.Append('?');
                    if (payerIbanNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("payerIbanNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(payerIbanNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bankPartyId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bankPartyId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bankPartyId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the pdf file for the invoice.
        /// </summary>
        /// <param name="invoice">The invoice for the pdf.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ContentPOSTAsync(Invoice invoice, bool? inline)
        {
            return ContentPOSTAsync(invoice, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the pdf file for the invoice.
        /// </summary>
        /// <param name="invoice">The invoice for the pdf.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ContentPOSTAsync(Invoice invoice, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (invoice == null)
                throw new System.ArgumentNullException("invoice");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(invoice, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/content"
                    urlBuilder_.Append("v03/api/invoices/content");
                    urlBuilder_.Append('?');
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the finvoice file for the invoice.
        /// </summary>
        /// <param name="invoice">The invoice for the finvoice.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachment.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> FinvoicePOSTAsync(Invoice invoice, bool? inline)
        {
            return FinvoicePOSTAsync(invoice, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the finvoice file for the invoice.
        /// </summary>
        /// <param name="invoice">The invoice for the finvoice.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachment.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> FinvoicePOSTAsync(Invoice invoice, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (invoice == null)
                throw new System.ArgumentNullException("invoice");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(invoice, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/finvoice"
                    urlBuilder_.Append("v03/api/invoices/finvoice");
                    urlBuilder_.Append('?');
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new verification invoice.
        /// <br/>Verification invoice is used for verifying the payment channel payments.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Invoice> CreateVerificationInvoiceAsync(PaymentChannel channel)
        {
            return CreateVerificationInvoiceAsync(channel, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new verification invoice.
        /// <br/>Verification invoice is used for verifying the payment channel payments.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Invoice> CreateVerificationInvoiceAsync(PaymentChannel channel, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/create/{channel}/verification"
                    urlBuilder_.Append("v03/api/invoices/create/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/verification");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates/updates a tax invoice for the period.
        /// <br/>If there is already a read-only tax invoice in the period, throws an error.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="month">Month for the tax invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Invoice> CreateTaxInvoiceAsync(PaymentChannel channel, System.DateTimeOffset month)
        {
            return CreateTaxInvoiceAsync(channel, month, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates/updates a tax invoice for the period.
        /// <br/>If there is already a read-only tax invoice in the period, throws an error.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="month">Month for the tax invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Invoice> CreateTaxInvoiceAsync(PaymentChannel channel, System.DateTimeOffset month, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (month == null)
                throw new System.ArgumentNullException("month");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/create/{channel}/tax"
                    urlBuilder_.Append("v03/api/invoices/create/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/tax");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("month")).Append('=').Append(System.Uri.EscapeDataString(month.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates/updates a union invoice for the period.
        /// <br/>If there is already a read-only union invoice in the period, throws an error.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="month">Month for the union invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> CreateUnionInvoiceAsync(PaymentChannel channel, System.DateTimeOffset month)
        {
            return CreateUnionInvoiceAsync(channel, month, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates/updates a union invoice for the period.
        /// <br/>If there is already a read-only union invoice in the period, throws an error.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="month">Month for the union invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> CreateUnionInvoiceAsync(PaymentChannel channel, System.DateTimeOffset month, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (month == null)
                throw new System.ArgumentNullException("month");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/create/{channel}/union"
                    urlBuilder_.Append("v03/api/invoices/create/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/union");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("month")).Append('=').Append(System.Uri.EscapeDataString(month.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sends the invoice as einvoice.
        /// </summary>
        /// <param name="id">Invoice id for which the einvoice should be generated and sent.</param>
        /// <param name="receiver">Receiver address (eivoice)</param>
        /// <param name="intermediator">Intermediator address (einvoice)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SendAsEInvoiceAsync(string id, string receiver, string intermediator)
        {
            return SendAsEInvoiceAsync(id, receiver, intermediator, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sends the invoice as einvoice.
        /// </summary>
        /// <param name="id">Invoice id for which the einvoice should be generated and sent.</param>
        /// <param name="receiver">Receiver address (eivoice)</param>
        /// <param name="intermediator">Intermediator address (einvoice)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SendAsEInvoiceAsync(string id, string receiver, string intermediator, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (receiver == null)
                throw new System.ArgumentNullException("receiver");

            if (intermediator == null)
                throw new System.ArgumentNullException("intermediator");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/{id}/einvoice"
                    urlBuilder_.Append("v03/api/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/einvoice");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("receiver")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(receiver, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("intermediator")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(intermediator, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves the calculation in its current state and creates invoices to pay a salary calculation.
        /// <br/>Note that if the calculation is already read-only, it will NOT be saved =&amp;gt; Will be fetched from storage.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="calc">Calculation for which the invoices are created.</param>
        /// <param name="excludePeriodicInvoices">If true, creates and returns calculation specific invoices immediately and creates periodic invoices in the background. The default option is false, all invoices are created immediately.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> CreateInvoicesAsync(PaymentChannel channel, Calculation calc, bool? excludePeriodicInvoices)
        {
            return CreateInvoicesAsync(channel, calc, excludePeriodicInvoices, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves the calculation in its current state and creates invoices to pay a salary calculation.
        /// <br/>Note that if the calculation is already read-only, it will NOT be saved =&amp;gt; Will be fetched from storage.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="calc">Calculation for which the invoices are created.</param>
        /// <param name="excludePeriodicInvoices">If true, creates and returns calculation specific invoices immediately and creates periodic invoices in the background. The default option is false, all invoices are created immediately.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> CreateInvoicesAsync(PaymentChannel channel, Calculation calc, bool? excludePeriodicInvoices, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/create/{channel}"
                    urlBuilder_.Append("v03/api/invoices/create/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (excludePeriodicInvoices != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludePeriodicInvoices")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludePeriodicInvoices, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates invoices to pay a salary calculation(s) that have already been stored in the database.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="ids">One or several identifiers of the Calculation for which the invoices are created.</param>
        /// <param name="excludePeriodicInvoices">If true, creates and returns calculation specific invoices immediately and creates periodic invoices in the background. The default option is false, all invoices are created immediately.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> CreateInvoices2Async(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, bool? excludePeriodicInvoices)
        {
            return CreateInvoices2Async(channel, ids, excludePeriodicInvoices, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates invoices to pay a salary calculation(s) that have already been stored in the database.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="ids">One or several identifiers of the Calculation for which the invoices are created.</param>
        /// <param name="excludePeriodicInvoices">If true, creates and returns calculation specific invoices immediately and creates periodic invoices in the background. The default option is false, all invoices are created immediately.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> CreateInvoices2Async(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, bool? excludePeriodicInvoices, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(ids, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/create-by-id/{channel}"
                    urlBuilder_.Append("v03/api/invoices/create-by-id/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (excludePeriodicInvoices != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludePeriodicInvoices")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludePeriodicInvoices, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Previews invoices to pay a salary calculation(s) and fetches the ones that have already been created.
        /// <br/>Used for payment dialog preview: Does not yet save the invoices and does not do any other storage saves.
        /// </summary>
        /// <param name="calcs">The calculations for which the invoices are created as preview (not saved to storage).
        /// <br/>Specified as ID's or unsaved Calculations or Payroll detail items.</param>
        /// <param name="channel">Channel to which the invoices are generated.</param>
        /// <param name="excludePeriodicInvoices">If true, does not return periodic invoices. Only calculation specific invoices are returned.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoicePreview>> PreviewInvoicesAsync(CalculationCollection calcs, PaymentChannel channel, bool? excludePeriodicInvoices)
        {
            return PreviewInvoicesAsync(calcs, channel, excludePeriodicInvoices, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Previews invoices to pay a salary calculation(s) and fetches the ones that have already been created.
        /// <br/>Used for payment dialog preview: Does not yet save the invoices and does not do any other storage saves.
        /// </summary>
        /// <param name="calcs">The calculations for which the invoices are created as preview (not saved to storage).
        /// <br/>Specified as ID's or unsaved Calculations or Payroll detail items.</param>
        /// <param name="channel">Channel to which the invoices are generated.</param>
        /// <param name="excludePeriodicInvoices">If true, does not return periodic invoices. Only calculation specific invoices are returned.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoicePreview>> PreviewInvoicesAsync(CalculationCollection calcs, PaymentChannel channel, bool? excludePeriodicInvoices, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (calcs == null)
                throw new System.ArgumentNullException("calcs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calcs, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/preview-and-created/{channel}"
                    urlBuilder_.Append("v03/api/invoices/preview-and-created/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (excludePeriodicInvoices != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludePeriodicInvoices")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludePeriodicInvoices, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoicePreview>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates invoices to pay a Payroll object that has already been stored in the database.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="payrollId">Identifier for the Payroll object.</param>
        /// <param name="excludePeriodicInvoices">If true, creates and returns calculation specific invoices immediately and creates periodic invoices in the background. The default option is false, all invoices are created immediately.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> CreateInvoicesForPayrollAsync(PaymentChannel channel, string payrollId, bool? excludePeriodicInvoices)
        {
            return CreateInvoicesForPayrollAsync(channel, payrollId, excludePeriodicInvoices, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates invoices to pay a Payroll object that has already been stored in the database.
        /// </summary>
        /// <param name="channel">Payment channel to use.</param>
        /// <param name="payrollId">Identifier for the Payroll object.</param>
        /// <param name="excludePeriodicInvoices">If true, creates and returns calculation specific invoices immediately and creates periodic invoices in the background. The default option is false, all invoices are created immediately.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> CreateInvoicesForPayrollAsync(PaymentChannel channel, string payrollId, bool? excludePeriodicInvoices, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (payrollId == null)
                throw new System.ArgumentNullException("payrollId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/invoices/create-for-payroll/{channel}/{payrollId}"
                    urlBuilder_.Append("v03/api/invoices/create-for-payroll/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(payrollId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (excludePeriodicInvoices != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("excludePeriodicInvoices")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(excludePeriodicInvoices, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageThreadClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public MessageThreadClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageThread> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageThread> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages/new"
                    urlBuilder_.Append("v03/api/messages/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageThread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageThread> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageThread> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages/{id}"
                    urlBuilder_.Append("v03/api/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageThread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages/{id}"
                    urlBuilder_.Append("v03/api/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfMessageListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfMessageListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages"
                    urlBuilder_.Append("v03/api/messages");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfMessageListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageThread> CrudSaveAsync(MessageThread model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageThread> CrudSaveAsync(MessageThread model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages"
                    urlBuilder_.Append("v03/api/messages");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageThread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves an attachment file as a message to the thread.
        /// </summary>
        /// <param name="id">Message thread identifier</param>
        /// <param name="file">File attachment (may also contain several).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageThread> AddBlobFileMessagesAsync(string id, FileParameter file)
        {
            return AddBlobFileMessagesAsync(id, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves an attachment file as a message to the thread.
        /// </summary>
        /// <param name="id">Message thread identifier</param>
        /// <param name="file">File attachment (may also contain several).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageThread> AddBlobFileMessagesAsync(string id, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages/{id}/files"
                    urlBuilder_.Append("v03/api/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageThread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds or modifies a message to the thread.
        /// </summary>
        /// <param name="id">Identifier of the thread</param>
        /// <param name="message">The message to add or modify.
        /// <br/>If date is not between thread CreatedAt and Now, it is set to Now.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageThread> AddMessageAsync(string id, Message message)
        {
            return AddMessageAsync(id, message, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds or modifies a message to the thread.
        /// </summary>
        /// <param name="id">Identifier of the thread</param>
        /// <param name="message">The message to add or modify.
        /// <br/>If date is not between thread CreatedAt and Now, it is set to Now.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageThread> AddMessageAsync(string id, Message message, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (message == null)
                throw new System.ArgumentNullException("message");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(message, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages/{id}/messages"
                    urlBuilder_.Append("v03/api/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageThread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Marks all messages as read by a given party
        /// </summary>
        /// <param name="id">Identifier of the thread</param>
        /// <param name="readBy">The party for which the messages are marked as read.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageThread> MarkAsReadAsync(string id, MessageFrom readBy)
        {
            return MarkAsReadAsync(id, readBy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marks all messages as read by a given party
        /// </summary>
        /// <param name="id">Identifier of the thread</param>
        /// <param name="readBy">The party for which the messages are marked as read.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageThread> MarkAsReadAsync(string id, MessageFrom readBy, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (readBy == null)
                throw new System.ArgumentNullException("readBy");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages/{id}/read-by/{readBy}"
                    urlBuilder_.Append("v03/api/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/read-by/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(readBy, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageThread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves an attachment file as a message to the thread.
        /// </summary>
        /// <param name="id">Message thread identifier</param>
        /// <param name="file">File attachment (may also contain several).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageThread> AddBlobFileMessages2Async(string id, FileParameter file)
        {
            return AddBlobFileMessages2Async(id, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves an attachment file as a message to the thread.
        /// </summary>
        /// <param name="id">Message thread identifier</param>
        /// <param name="file">File attachment (may also contain several).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageThread> AddBlobFileMessages2Async(string id, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages/{id}/messages/blobFileMessage"
                    urlBuilder_.Append("v03/api/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/messages/blobFileMessage");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageThread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sends an email notification to the owner of the message.
        /// </summary>
        /// <param name="id">Message thread identifier.</param>
        /// <param name="subject">Subject for the notification.</param>
        /// <param name="body">Plain text content of the notification.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MessageThread> SendNotificationAsync(string id, string subject, string body)
        {
            return SendNotificationAsync(id, subject, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sends an email notification to the owner of the message.
        /// </summary>
        /// <param name="id">Message thread identifier.</param>
        /// <param name="subject">Subject for the notification.</param>
        /// <param name="body">Plain text content of the notification.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageThread> SendNotificationAsync(string id, string subject, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (subject == null)
                throw new System.ArgumentNullException("subject");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/messages/{id}/notifications"
                    urlBuilder_.Append("v03/api/messages/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/notifications");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("subject")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageThread>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OnboardingApiClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public OnboardingApiClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new Onboarding object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Onboarding> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new Onboarding object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Onboarding> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/onboarding/new"
                    urlBuilder_.Append("v03/api/onboarding/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Onboarding>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single Onboarding object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Onboarding> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single Onboarding object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Onboarding> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/onboarding/{id}"
                    urlBuilder_.Append("v03/api/onboarding/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Onboarding>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an Onboarding object from the storage. The for onboarding of any type.
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an Onboarding object from the storage. The for onboarding of any type.
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/onboarding/{id}"
                    urlBuilder_.Append("v03/api/onboarding/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets an existing onboarding object for given authorizing account.
        /// </summary>
        /// <param name="accountId">Account id of the authorizing account.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Onboarding> CrudGetForAccountAsync(string accountId)
        {
            return CrudGetForAccountAsync(accountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets an existing onboarding object for given authorizing account.
        /// </summary>
        /// <param name="accountId">Account id of the authorizing account.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Onboarding> CrudGetForAccountAsync(string accountId, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/onboarding/account/{accountId}"
                    urlBuilder_.Append("v03/api/onboarding/account/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Onboarding>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates or updates an Onboarding object.
        /// </summary>
        /// <param name="model">The Onboarding object that is updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Onboarding> CrudSaveAsync(Onboarding model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates or updates an Onboarding object.
        /// </summary>
        /// <param name="model">The Onboarding object that is updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Onboarding> CrudSaveAsync(Onboarding model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/onboarding"
                    urlBuilder_.Append("v03/api/onboarding");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Onboarding>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Commits the onboarding object and creates/changes the account.
        /// </summary>
        /// <param name="model">The Onboarding object that is committed.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Onboarding> CommitAsync(Onboarding model)
        {
            return CommitAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Commits the onboarding object and creates/changes the account.
        /// </summary>
        /// <param name="model">The Onboarding object that is committed.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Onboarding> CommitAsync(Onboarding model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/onboarding/commit"
                    urlBuilder_.Append("v03/api/onboarding/commit");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Onboarding>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartnerClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PartnerClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// TRUSTED PARTNERS: Gets the public company account information if account has already been created 
        /// <br/>for the company official Id (Y-tunnus in Finnish).
        /// <br/>If the account does not exist, an account stub is created based on the official Id.
        /// <br/>In production, this method is available to trusted partners only.
        /// <br/>NOTE: This method cannot be called with Partner's own Company ID (as of 07/2019) to assure access to partners own account. 
        /// <br/>This would be a security risk in some partner scenarios and the action does not make sense: Just use the partner account directly.
        /// </summary>
        /// <param name="model">The request parameters</param>
        /// <param name="checkAuthorizationOnly">Does not create a new company, but checks the authorization for the given company.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PartnerCompanyAccountInfo> AssureCompanyAccountAsync(AssureCompanyAccountRequest model, bool? checkAuthorizationOnly)
        {
            return AssureCompanyAccountAsync(model, checkAuthorizationOnly, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// TRUSTED PARTNERS: Gets the public company account information if account has already been created 
        /// <br/>for the company official Id (Y-tunnus in Finnish).
        /// <br/>If the account does not exist, an account stub is created based on the official Id.
        /// <br/>In production, this method is available to trusted partners only.
        /// <br/>NOTE: This method cannot be called with Partner's own Company ID (as of 07/2019) to assure access to partners own account. 
        /// <br/>This would be a security risk in some partner scenarios and the action does not make sense: Just use the partner account directly.
        /// </summary>
        /// <param name="model">The request parameters</param>
        /// <param name="checkAuthorizationOnly">Does not create a new company, but checks the authorization for the given company.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PartnerCompanyAccountInfo> AssureCompanyAccountAsync(AssureCompanyAccountRequest model, bool? checkAuthorizationOnly, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/partner/company"
                    urlBuilder_.Append("v03/api/partner/company");
                    urlBuilder_.Append('?');
                    if (checkAuthorizationOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("checkAuthorizationOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checkAuthorizationOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerCompanyAccountInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentChannelClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PaymentChannelClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets a single invoice in the payment channel.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Invoice> CrudGetAsync(PaymentChannel channel, string id)
        {
            return CrudGetAsync(channel, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single invoice in the payment channel.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Invoice> CrudGetAsync(PaymentChannel channel, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/{id}"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(PaymentChannel channel, string id)
        {
            return CrudDeleteAsync(channel, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(PaymentChannel channel, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/{id}"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the calculation in a single net salary invoice.
        /// <br/>Please note that this is applicable only for net invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">The id of the invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> GetCalculationAsync(PaymentChannel channel, string id)
        {
            return GetCalculationAsync(channel, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the calculation in a single net salary invoice.
        /// <br/>Please note that this is applicable only for net invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">The id of the invoice.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> GetCalculationAsync(PaymentChannel channel, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/{id}/calculation"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/calculation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns list of invoices for the payment channel using OData query and search.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfInvoiceListItem> ODataSearchAsync(PaymentChannel channel, string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(channel, search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns list of invoices for the payment channel using OData query and search.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfInvoiceListItem> ODataSearchAsync(PaymentChannel channel, string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfInvoiceListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates a single invoice in the payment channel.
        /// <br/>Please note this is valid only in the test environment, and only very restricted set of changes are allowed.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="invoice">Invoice to update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Invoice> CrudSaveAsync(PaymentChannel channel, Invoice invoice)
        {
            return CrudSaveAsync(channel, invoice, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a single invoice in the payment channel.
        /// <br/>Please note this is valid only in the test environment, and only very restricted set of changes are allowed.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="invoice">Invoice to update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Invoice> CrudSaveAsync(PaymentChannel channel, Invoice invoice, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (invoice == null)
                throw new System.ArgumentNullException("invoice");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(invoice, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the pdf file for the single invoice.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="inline">If true, returns the content as inline (disposition) in browser.
        /// <br/>If false, the content is returned as an attachment (download, default).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ContentGETAsync(PaymentChannel channel, string id, bool? inline)
        {
            return ContentGETAsync(channel, id, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the pdf file for the single invoice.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="inline">If true, returns the content as inline (disposition) in browser.
        /// <br/>If false, the content is returned as an attachment (download, default).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ContentGETAsync(PaymentChannel channel, string id, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/{id}/content"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");
                    urlBuilder_.Append('?');
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the accounting data based on calculation in a single net salary invoice.
        /// <br/>Please note that this is applicable only for net invoices.
        /// <br/>Please note that the accounting does not contain holiday accruals.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="target">Accounting target: contains ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingData> GetAccountingDataAsync(PaymentChannel channel, string id, string target)
        {
            return GetAccountingDataAsync(channel, id, target, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the accounting data based on calculation in a single net salary invoice.
        /// <br/>Please note that this is applicable only for net invoices.
        /// <br/>Please note that the accounting does not contain holiday accruals.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="target">Accounting target: contains ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingData> GetAccountingDataAsync(PaymentChannel channel, string id, string target, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/{id}/accounting"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting");
                    urlBuilder_.Append('?');
                    if (target != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("target")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(target, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the calculations in net salary invoices.
        /// <br/>Please note that this is applicable only for net invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="ids">The ids of the invoices.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Calculation>> GetCalculationsAsync(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids)
        {
            return GetCalculationsAsync(channel, ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the calculations in net salary invoices.
        /// <br/>Please note that this is applicable only for net invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="ids">The ids of the invoices.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Calculation>> GetCalculationsAsync(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/calculation"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/calculation");
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Calculation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the pdf file for the invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="ids">The ids of the invoices.</param>
        /// <param name="inline">If true, returns the content as inline (disposition) in browser.
        /// <br/>If false, the content is returned as an attachment (download, default).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ContentGET2Async(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, bool? inline)
        {
            return ContentGET2Async(channel, ids, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the pdf file for the invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="ids">The ids of the invoices.</param>
        /// <param name="inline">If true, returns the content as inline (disposition) in browser.
        /// <br/>If false, the content is returned as an attachment (download, default).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ContentGET2Async(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/content"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the pdf file for the invoice.
        /// </summary>
        /// <param name="invoice">The invoice for the pdf.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ContentPOSTAsync(PaymentChannel channel, Invoice invoice, bool? inline)
        {
            return ContentPOSTAsync(channel, invoice, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the pdf file for the invoice.
        /// </summary>
        /// <param name="invoice">The invoice for the pdf.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ContentPOSTAsync(PaymentChannel channel, Invoice invoice, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (invoice == null)
                throw new System.ArgumentNullException("invoice");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(invoice, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/content"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/content");
                    urlBuilder_.Append('?');
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the accounting data based on calculations in net salary invoices.
        /// <br/>Please note that this is applicable only for net invoices.
        /// <br/>Please note that the accounting does not contain holiday accruals.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="ids">The ids of the invoices.</param>
        /// <param name="target">Accounting target: contains ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingData> GetAccountingData2Async(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, string target)
        {
            return GetAccountingData2Async(channel, ids, target, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the accounting data based on calculations in net salary invoices.
        /// <br/>Please note that this is applicable only for net invoices.
        /// <br/>Please note that the accounting does not contain holiday accruals.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="ids">The ids of the invoices.</param>
        /// <param name="target">Accounting target: contains ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingData> GetAccountingData2Async(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, string target, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/accounting"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting");
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (target != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("target")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(target, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns invoices to be paid by the partners customer companies.
        /// <br/>The status filter can be set for the query.
        /// <br/>Optionally the period range (start and end date) can be given for the query.
        /// <br/>If the period is not specified, it is last 14 days.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="status">Status filter for the query.</param>
        /// <param name="dateKind">Date specifier for the period: invoicing date, due date or logical date (like salary date).</param>
        /// <param name="start">Optional start date for the period to query the invoices. If not set, defaults to last 14 days.</param>
        /// <param name="end">Optional end date for the period to query the invoices. If not set, today is used.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetInvoicesByStatusAsync(PaymentChannel channel, InvoiceStatus status, InvoiceDateKind? dateKind, System.DateTimeOffset? start, System.DateTimeOffset? end)
        {
            return GetInvoicesByStatusAsync(channel, status, dateKind, start, end, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns invoices to be paid by the partners customer companies.
        /// <br/>The status filter can be set for the query.
        /// <br/>Optionally the period range (start and end date) can be given for the query.
        /// <br/>If the period is not specified, it is last 14 days.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="status">Status filter for the query.</param>
        /// <param name="dateKind">Date specifier for the period: invoicing date, due date or logical date (like salary date).</param>
        /// <param name="start">Optional start date for the period to query the invoices. If not set, defaults to last 14 days.</param>
        /// <param name="end">Optional end date for the period to query the invoices. If not set, today is used.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> GetInvoicesByStatusAsync(PaymentChannel channel, InvoiceStatus status, InvoiceDateKind? dateKind, System.DateTimeOffset? start, System.DateTimeOffset? end, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (status == null)
                throw new System.ArgumentNullException("status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/status/{status}"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/status/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (dateKind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateKind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dateKind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (start != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("start")).Append('=').Append(System.Uri.EscapeDataString(start.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (end != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("end")).Append('=').Append(System.Uri.EscapeDataString(end.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the calculation report pdf file for the single invoice.
        /// <br/>Please note that this is applicable only for net invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="type">Calculation report type. Currently only salarySlip, employerReport, paymentReport and accountingReport are supported.</param>
        /// <param name="inline">If true, returns the content as inline (disposition) in browser.
        /// <br/>If false, the content is returned as an attachment (download, default).</param>
        /// <param name="isSensitive">If true, the pdf hides any personal ids of the worker.</param>
        /// <param name="target">Accounting target: contains ruleset for creating accounting entries. Can be null. Only for accounting reports.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ReportPdfAsync(PaymentChannel channel, string id, ReportType type, bool? inline, bool? isSensitive, string target)
        {
            return ReportPdfAsync(channel, id, type, inline, isSensitive, target, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the calculation report pdf file for the single invoice.
        /// <br/>Please note that this is applicable only for net invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="id">The id of the invoice.</param>
        /// <param name="type">Calculation report type. Currently only salarySlip, employerReport, paymentReport and accountingReport are supported.</param>
        /// <param name="inline">If true, returns the content as inline (disposition) in browser.
        /// <br/>If false, the content is returned as an attachment (download, default).</param>
        /// <param name="isSensitive">If true, the pdf hides any personal ids of the worker.</param>
        /// <param name="target">Accounting target: contains ruleset for creating accounting entries. Can be null. Only for accounting reports.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ReportPdfAsync(PaymentChannel channel, string id, ReportType type, bool? inline, bool? isSensitive, string target, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (type == null)
                throw new System.ArgumentNullException("type");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/{id}/{type}"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isSensitive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isSensitive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isSensitive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (target != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("target")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(target, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the sepa file for the single invoice.
        /// </summary>
        /// <param name="id">Id of the invoice for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SepaGETAsync(PaymentChannel channel, string id, string payerIbanNumber, string bankPartyId, bool? inline)
        {
            return SepaGETAsync(channel, id, payerIbanNumber, bankPartyId, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the sepa file for the single invoice.
        /// </summary>
        /// <param name="id">Id of the invoice for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SepaGETAsync(PaymentChannel channel, string id, string payerIbanNumber, string bankPartyId, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/{id}/sepa"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sepa");
                    urlBuilder_.Append('?');
                    if (payerIbanNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("payerIbanNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(payerIbanNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bankPartyId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bankPartyId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bankPartyId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the calculation report pdf file for the invoice.
        /// <br/>Please note that this is applicable only for net invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="ids">The id of the invoice.</param>
        /// <param name="type">Calculation report type. Currently only salarySlip, employerReport, paymentReport and accountingReport are supported.</param>
        /// <param name="inline">If true, returns the content as inline (disposition) in browser.
        /// <br/>If false, the content is returned as an attachment (download, default).</param>
        /// <param name="isSensitive">If true, the pdf hides any personal ids of the worker.</param>
        /// <param name="target">Accounting target: contains ruleset for creating accounting entries. Can be null. Only for accounting reports.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ReportPdfsAsync(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, ReportType type, bool? inline, bool? isSensitive, string target)
        {
            return ReportPdfsAsync(channel, ids, type, inline, isSensitive, target, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the calculation report pdf file for the invoice.
        /// <br/>Please note that this is applicable only for net invoices.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="ids">The id of the invoice.</param>
        /// <param name="type">Calculation report type. Currently only salarySlip, employerReport, paymentReport and accountingReport are supported.</param>
        /// <param name="inline">If true, returns the content as inline (disposition) in browser.
        /// <br/>If false, the content is returned as an attachment (download, default).</param>
        /// <param name="isSensitive">If true, the pdf hides any personal ids of the worker.</param>
        /// <param name="target">Accounting target: contains ruleset for creating accounting entries. Can be null. Only for accounting reports.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ReportPdfsAsync(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, ReportType type, bool? inline, bool? isSensitive, string target, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/{type}"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isSensitive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isSensitive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isSensitive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (target != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("target")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(target, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the sepa file for the given invoices.
        /// </summary>
        /// <param name="ids">Ids of the invoices for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SepaGET2Async(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, string payerIbanNumber, string bankPartyId, bool? inline)
        {
            return SepaGET2Async(channel, ids, payerIbanNumber, bankPartyId, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the sepa file for the given invoices.
        /// </summary>
        /// <param name="ids">Ids of the invoices for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SepaGET2Async(PaymentChannel channel, System.Collections.Generic.IEnumerable<string> ids, string payerIbanNumber, string bankPartyId, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/sepa"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sepa");
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (payerIbanNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("payerIbanNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(payerIbanNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bankPartyId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bankPartyId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bankPartyId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Downloads the sepa file for the posted invoices.
        /// </summary>
        /// <param name="invoices">Invoices for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SepaPOSTAsync(PaymentChannel channel, System.Collections.Generic.IEnumerable<Invoice> invoices, string payerIbanNumber, string bankPartyId, bool? inline)
        {
            return SepaPOSTAsync(channel, invoices, payerIbanNumber, bankPartyId, inline, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Downloads the sepa file for the posted invoices.
        /// </summary>
        /// <param name="invoices">Invoices for the sepa payment.</param>
        /// <param name="payerIbanNumber">Payer iban number.</param>
        /// <param name="bankPartyId">Payer bank party id. Depends on the bank.</param>
        /// <param name="inline">If true, returns the content as inline (disposition). If false, the content is returned as an attachmnent.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SepaPOSTAsync(PaymentChannel channel, System.Collections.Generic.IEnumerable<Invoice> invoices, string payerIbanNumber, string bankPartyId, bool? inline, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (invoices == null)
                throw new System.ArgumentNullException("invoices");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(invoices, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/sepa"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sepa");
                    urlBuilder_.Append('?');
                    if (payerIbanNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("payerIbanNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(payerIbanNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (bankPartyId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("bankPartyId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bankPartyId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inline != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inline")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inline, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Accepts and processes an invoice status notification message.
        /// <br/>The 3rd party system can notify the invoice to be unread, read, paid or canceled.
        /// <br/>The external id can be set in the notification for the invoice for later messaging. 
        /// <br/>If the notification message contains an external id and not a regular id,
        /// <br/>the system tries to find the correct invoice using the earlier given external id for the invoice.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="invoiceStatusNotifications">An array of status notification messages.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> UpdateStatusAsync(PaymentChannel channel, System.Collections.Generic.IEnumerable<InvoiceStatusNotification> invoiceStatusNotifications)
        {
            return UpdateStatusAsync(channel, invoiceStatusNotifications, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Accepts and processes an invoice status notification message.
        /// <br/>The 3rd party system can notify the invoice to be unread, read, paid or canceled.
        /// <br/>The external id can be set in the notification for the invoice for later messaging. 
        /// <br/>If the notification message contains an external id and not a regular id,
        /// <br/>the system tries to find the correct invoice using the earlier given external id for the invoice.
        /// </summary>
        /// <param name="channel">Payment channel key.</param>
        /// <param name="invoiceStatusNotifications">An array of status notification messages.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Invoice>> UpdateStatusAsync(PaymentChannel channel, System.Collections.Generic.IEnumerable<InvoiceStatusNotification> invoiceStatusNotifications, System.Threading.CancellationToken cancellationToken)
        {
            if (channel == null)
                throw new System.ArgumentNullException("channel");

            if (invoiceStatusNotifications == null)
                throw new System.ArgumentNullException("invoiceStatusNotifications");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(invoiceStatusNotifications, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payment-channel/{channel}/update-status"
                    urlBuilder_.Append("v03/api/payment-channel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(channel, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/update-status");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Invoice>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayrollClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PayrollClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new Payroll object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new Payroll object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/new"
                    urlBuilder_.Append("v03/api/payroll/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single Payroll object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single Payroll object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/{id}"
                    urlBuilder_.Append("v03/api/payroll/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a Payroll object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Payroll object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/{id}"
                    urlBuilder_.Append("v03/api/payroll/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancels the invoice or payment processing for the given payroll.
        /// <br/>Please note that this is possible only if the payment channel supports the cancel action.
        /// </summary>
        /// <param name="id">Identifier of the Payroll to be cancelled.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> CancelAsync(string id)
        {
            return CancelAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancels the invoice or payment processing for the given payroll.
        /// <br/>Please note that this is possible only if the payment channel supports the cancel action.
        /// </summary>
        /// <param name="id">Identifier of the Payroll to be cancelled.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> CancelAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/cancel/{id}"
                    urlBuilder_.Append("v03/api/payroll/cancel/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets absences for a single payroll report.
        /// </summary>
        /// <param name="id">Payroll ID for which to fetch the absences.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerAbsencePeriod>> GetAbsencesAsync(string id)
        {
            return GetAbsencesAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets absences for a single payroll report.
        /// </summary>
        /// <param name="id">Payroll ID for which to fetch the absences.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerAbsencePeriod>> GetAbsencesAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/{id}/absences"
                    urlBuilder_.Append("v03/api/payroll/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/absences");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WorkerAbsencePeriod>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfPayrollListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfPayrollListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll"
                    urlBuilder_.Append("v03/api/payroll");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfPayrollListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new Payroll object
        /// </summary>
        /// <param name="model">The Payroll message object.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> CrudSaveAsync(PayrollDetails model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new Payroll object
        /// </summary>
        /// <param name="model">The Payroll message object.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> CrudSaveAsync(PayrollDetails model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll"
                    urlBuilder_.Append("v03/api/payroll");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Validates a Payroll object without storing it to the database.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> ValidateAsync(PayrollDetails model)
        {
            return ValidateAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validates a Payroll object without storing it to the database.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> ValidateAsync(PayrollDetails model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/validate"
                    urlBuilder_.Append("v03/api/payroll/validate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves changes to a Calculation that is part of a Payroll and returns the Paryoll validation data.
        /// </summary>
        /// <param name="model">The calculation object that is updated</param>
        /// <param name="id">Payroll ID where calculation belongs to.
        /// <br/>Note, that the current implementation does not assure that the calculation is within a Payroll
        /// <br/>nor set the salary date and the payment channel for the Payroll.
        /// <br/>This may later be added without that being a breaking change.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> CalculationSaveAsync(Calculation model, string id)
        {
            return CalculationSaveAsync(model, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves changes to a Calculation that is part of a Payroll and returns the Paryoll validation data.
        /// </summary>
        /// <param name="model">The calculation object that is updated</param>
        /// <param name="id">Payroll ID where calculation belongs to.
        /// <br/>Note, that the current implementation does not assure that the calculation is within a Payroll
        /// <br/>nor set the salary date and the payment channel for the Payroll.
        /// <br/>This may later be added without that being a breaking change.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> CalculationSaveAsync(Calculation model, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/{id}/calcs"
                    urlBuilder_.Append("v03/api/payroll/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/calcs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds existing calculations to the payroll and saves the payroll object.
        /// <br/>If calculation is read-only, a copy is made. If it is draft, the calculation is moved.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <param name="ids">A comma separated list of calculation id's that are copied / moved to the Payroll list.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> AddCalculationsAsync(PayrollDetails model, string ids)
        {
            return AddCalculationsAsync(model, ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds existing calculations to the payroll and saves the payroll object.
        /// <br/>If calculation is read-only, a copy is made. If it is draft, the calculation is moved.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <param name="ids">A comma separated list of calculation id's that are copied / moved to the Payroll list.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> AddCalculationsAsync(PayrollDetails model, string ids, System.Threading.CancellationToken cancellationToken)
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/add-calc"
                    urlBuilder_.Append("v03/api/payroll/add-calc");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove calculations from the payroll and saves the payroll object.
        /// <br/>The calculations are completely deleted. 
        /// <br/>This can only be done if the calculations and the payroll have not been paid yet.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <param name="ids">A comma separated list of calculation id's that are deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> DeleteCalculationsAsync(PayrollDetails model, string ids)
        {
            return DeleteCalculationsAsync(model, ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove calculations from the payroll and saves the payroll object.
        /// <br/>The calculations are completely deleted. 
        /// <br/>This can only be done if the calculations and the payroll have not been paid yet.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <param name="ids">A comma separated list of calculation id's that are deleted.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> DeleteCalculationsAsync(PayrollDetails model, string ids, System.Threading.CancellationToken cancellationToken)
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/delete-calc"
                    urlBuilder_.Append("v03/api/payroll/delete-calc");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove calculations from the payroll and saves the payroll object.
        /// <br/>The calculations are unlinked and they become individual calculations in the draft list (and can then be processed individually).
        /// <br/>This can only be done if the calculations and the payroll have not been paid yet.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <param name="ids">A comma separated list of calculation id's that are unlinked from the Payroll list.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> UnlinkCalculationsAsync(PayrollDetails model, string ids)
        {
            return UnlinkCalculationsAsync(model, ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove calculations from the payroll and saves the payroll object.
        /// <br/>The calculations are unlinked and they become individual calculations in the draft list (and can then be processed individually).
        /// <br/>This can only be done if the calculations and the payroll have not been paid yet.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <param name="ids">A comma separated list of calculation id's that are unlinked from the Payroll list.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> UnlinkCalculationsAsync(PayrollDetails model, string ids, System.Threading.CancellationToken cancellationToken)
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/unlink-calc"
                    urlBuilder_.Append("v03/api/payroll/unlink-calc");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds new calculations to the payroll and saves the payroll object.
        /// <br/>The calculations are added based on employment relation ID's.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <param name="ids">A comma separated list of employment relation id's for which the a new calculation is added to the Payroll list.
        /// <br/>Also supports personal ID's when personal ID has an active employment relation as of SalaryDate
        /// <br/>(currently supports only Employers of up to 500 employment relations).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> AddEmploymentsAsync(PayrollDetails model, string ids)
        {
            return AddEmploymentsAsync(model, ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds new calculations to the payroll and saves the payroll object.
        /// <br/>The calculations are added based on employment relation ID's.
        /// </summary>
        /// <param name="model">The Payroll  object.</param>
        /// <param name="ids">A comma separated list of employment relation id's for which the a new calculation is added to the Payroll list.
        /// <br/>Also supports personal ID's when personal ID has an active employment relation as of SalaryDate
        /// <br/>(currently supports only Employers of up to 500 employment relations).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> AddEmploymentsAsync(PayrollDetails model, string ids, System.Threading.CancellationToken cancellationToken)
        {
            if (ids == null)
                throw new System.ArgumentNullException("ids");

            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/payroll/add-employment"
                    urlBuilder_.Append("v03/api/payroll/add-employment");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecordClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public RecordClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Record> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Record> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records/new"
                    urlBuilder_.Append("v03/api/records/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Record>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Record> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Record> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records/{id}"
                    urlBuilder_.Append("v03/api/records/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Record>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records/{id}"
                    urlBuilder_.Append("v03/api/records/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lists all distinct employment record types for the employer
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ListRecordTypesAsync()
        {
            return ListRecordTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all distinct employment record types for the employer
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ListRecordTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records/recordTypes"
                    urlBuilder_.Append("v03/api/records/recordTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfRecordListItem> ODataSearchAsync(string search, string select, string filter, string orderby, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfRecordListItem> ODataSearchAsync(string search, string select, string filter, string orderby, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records"
                    urlBuilder_.Append("v03/api/records");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfRecordListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Record> CrudSaveAsync(Record model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Record> CrudSaveAsync(Record model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records"
                    urlBuilder_.Append("v03/api/records");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Record>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lists records for employment.
        /// </summary>
        /// <param name="entityType">Entity type</param>
        /// <param name="entityId">Entity id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Record>> CrudListForEntityAsync(string entityType, string entityId)
        {
            return CrudListForEntityAsync(entityType, entityId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists records for employment.
        /// </summary>
        /// <param name="entityType">Entity type</param>
        /// <param name="entityId">Entity id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Record>> CrudListForEntityAsync(string entityType, string entityId, System.Threading.CancellationToken cancellationToken)
        {
            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            if (entityId == null)
                throw new System.ArgumentNullException("entityId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records/{entityType}/{entityId}"
                    urlBuilder_.Append("v03/api/records/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Record>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves an attachment file for the employment.
        /// </summary>
        /// <param name="entityType">Entity type</param>
        /// <param name="entityId">Entity id</param>
        /// <param name="file">File attachment (may also contain several).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> SaveFilesAsync(string entityType, string entityId, FileParameter file)
        {
            return SaveFilesAsync(entityType, entityId, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves an attachment file for the employment.
        /// </summary>
        /// <param name="entityType">Entity type</param>
        /// <param name="entityId">Entity id</param>
        /// <param name="file">File attachment (may also contain several).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> SaveFilesAsync(string entityType, string entityId, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            if (entityId == null)
                throw new System.ArgumentNullException("entityId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records/{entityType}/{entityId}/files"
                    urlBuilder_.Append("v03/api/records/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves an attachment file for the employment.
        /// </summary>
        /// <param name="entityType">Entity type</param>
        /// <param name="entityId">Entity id</param>
        /// <param name="file">File attachment (may also contain several).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> SaveFiles2Async(string entityType, string entityId, FileParameter file)
        {
            return SaveFiles2Async(entityType, entityId, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves an attachment file for the employment.
        /// </summary>
        /// <param name="entityType">Entity type</param>
        /// <param name="entityId">Entity id</param>
        /// <param name="file">File attachment (may also contain several).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> SaveFiles2Async(string entityType, string entityId, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/records/{entityType}/files"
                    urlBuilder_.Append("v03/api/records/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/files");
                    urlBuilder_.Append('?');
                    if (entityId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("entityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReportsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ReportsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets all the generated reports of specific type for this user.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Report>> CrudListAsync(ReportType type)
        {
            return CrudListAsync(type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all the generated reports of specific type for this user.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Report>> CrudListAsync(ReportType type, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/type/{type}"
                    urlBuilder_.Append("v03/api/reports/type/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Report>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the calculation with cumulative data.
        /// <br/>Please note that the cumulative data is calculated from several calculations preceding the the calculation.
        /// </summary>
        /// <param name="id">The calculation for which the cumulative report is created for.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CumulativeCalculation> GetCumulativeCalculationAsync(string id)
        {
            return GetCumulativeCalculationAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the calculation with cumulative data.
        /// <br/>Please note that the cumulative data is calculated from several calculations preceding the the calculation.
        /// </summary>
        /// <param name="id">The calculation for which the cumulative report is created for.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CumulativeCalculation> GetCumulativeCalculationAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/cumulative-calculation/{id}"
                    urlBuilder_.Append("v03/api/reports/cumulative-calculation/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CumulativeCalculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single report by type and id for this user.
        /// </summary>
        /// <param name="type">Report type.</param>
        /// <param name="id">Report id.</param>
        /// <param name="wait">Optional flag to indicate, whether to wait for the report to be generated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Report>> CrudGetAsync(ReportType type, string id, bool? wait)
        {
            return CrudGetAsync(type, id, wait, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single report by type and id for this user.
        /// </summary>
        /// <param name="type">Report type.</param>
        /// <param name="id">Report id.</param>
        /// <param name="wait">Optional flag to indicate, whether to wait for the report to be generated.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Report>> CrudGetAsync(ReportType type, string id, bool? wait, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/type/{type}/{id}"
                    urlBuilder_.Append("v03/api/reports/type/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (wait != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("wait")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wait, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Report>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the accounting data from the saved report id.
        /// </summary>
        /// <param name="id">Saved accounting data file id.</param>
        /// <param name="target">Accounting target: contains default ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingData> GetAccountingDataGETAsync(string id, string target)
        {
            return GetAccountingDataGETAsync(id, target, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the accounting data from the saved report id.
        /// </summary>
        /// <param name="id">Saved accounting data file id.</param>
        /// <param name="target">Accounting target: contains default ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingData> GetAccountingDataGETAsync(string id, string target, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accounting/{id}"
                    urlBuilder_.Append("v03/api/reports/accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (target != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("target")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(target, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assures that the report (pdf) exists for given calculations (ids).
        /// </summary>
        /// <param name="type">Calculation report type.</param>
        /// <param name="ids">Ids for calculations.</param>
        /// <param name="language">Language for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> AssureGETAsync(ReportType type, System.Collections.Generic.IEnumerable<string> ids, Language? language)
        {
            return AssureGETAsync(type, ids, language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assures that the report (pdf) exists for given calculations (ids).
        /// </summary>
        /// <param name="type">Calculation report type.</param>
        /// <param name="ids">Ids for calculations.</param>
        /// <param name="language">Language for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> AssureGETAsync(ReportType type, System.Collections.Generic.IEnumerable<string> ids, Language? language, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/assure/{type}"
                    urlBuilder_.Append("v03/api/reports/assure/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assures that the report (pdf) exists for given calculations.
        /// </summary>
        /// <param name="type">Calculation report type.</param>
        /// <param name="calculations">Calculations.</param>
        /// <param name="language">Language for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> AssurePOSTAsync(ReportType type, System.Collections.Generic.IEnumerable<ReportingCalculation> calculations, Language? language)
        {
            return AssurePOSTAsync(type, calculations, language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assures that the report (pdf) exists for given calculations.
        /// </summary>
        /// <param name="type">Calculation report type.</param>
        /// <param name="calculations">Calculations.</param>
        /// <param name="language">Language for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> AssurePOSTAsync(ReportType type, System.Collections.Generic.IEnumerable<ReportingCalculation> calculations, Language? language, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (calculations == null)
                throw new System.ArgumentNullException("calculations");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calculations, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/assure/{type}"
                    urlBuilder_.Append("v03/api/reports/assure/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for the summary reports.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SummaryReportData> GetSummaryReportDataAsync(System.Collections.Generic.IEnumerable<string> calculationIds)
        {
            return GetSummaryReportDataAsync(calculationIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for the summary reports.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SummaryReportData> GetSummaryReportDataAsync(System.Collections.Generic.IEnumerable<string> calculationIds, System.Threading.CancellationToken cancellationToken)
        {
            if (calculationIds == null)
                throw new System.ArgumentNullException("calculationIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/summary"
                    urlBuilder_.Append("v03/api/reports/summary");
                    urlBuilder_.Append('?');
                    foreach (var item_ in calculationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("calculationIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SummaryReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for cumulative reports calculated from given set of calculations.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CalculationReportData> GetCalculationReportDataAsync(System.Collections.Generic.IEnumerable<string> calculationIds)
        {
            return GetCalculationReportDataAsync(calculationIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for cumulative reports calculated from given set of calculations.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CalculationReportData> GetCalculationReportDataAsync(System.Collections.Generic.IEnumerable<string> calculationIds, System.Threading.CancellationToken cancellationToken)
        {
            if (calculationIds == null)
                throw new System.ArgumentNullException("calculationIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/calculation"
                    urlBuilder_.Append("v03/api/reports/calculation");
                    urlBuilder_.Append('?');
                    foreach (var item_ in calculationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("calculationIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CalculationReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for row reports calculated from given set of calculations.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingRowReportData> GetAccountingRowReportDataAsync(System.Collections.Generic.IEnumerable<string> calculationIds)
        {
            return GetAccountingRowReportDataAsync(calculationIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for row reports calculated from given set of calculations.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingRowReportData> GetAccountingRowReportDataAsync(System.Collections.Generic.IEnumerable<string> calculationIds, System.Threading.CancellationToken cancellationToken)
        {
            if (calculationIds == null)
                throw new System.ArgumentNullException("calculationIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accountingRow"
                    urlBuilder_.Append("v03/api/reports/accountingRow");
                    urlBuilder_.Append('?');
                    foreach (var item_ in calculationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("calculationIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingRowReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for row reports calculated from given set of calculations.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingRowReportData> GetAccountingRowReportData2Async(System.Collections.Generic.IEnumerable<string> calculationIds)
        {
            return GetAccountingRowReportData2Async(calculationIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for row reports calculated from given set of calculations.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingRowReportData> GetAccountingRowReportData2Async(System.Collections.Generic.IEnumerable<string> calculationIds, System.Threading.CancellationToken cancellationToken)
        {
            if (calculationIds == null)
                throw new System.ArgumentNullException("calculationIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accounting-row"
                    urlBuilder_.Append("v03/api/reports/accounting-row");
                    urlBuilder_.Append('?');
                    foreach (var item_ in calculationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("calculationIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingRowReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assures that the report (pdf) exists for given calculations (ids).
        /// </summary>
        /// <param name="type">Calculation report type.</param>
        /// <param name="ids">Ids for calculations.</param>
        /// <param name="language">Language for the report.</param>
        /// <param name="disposition">Optional content disposition parameter (inline or attachment), if the response should be returned as file.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<byte[]> AssurePdfGETAsync(ReportType type, System.Collections.Generic.IEnumerable<string> ids, Language? language, string disposition)
        {
            return AssurePdfGETAsync(type, ids, language, disposition, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assures that the report (pdf) exists for given calculations (ids).
        /// </summary>
        /// <param name="type">Calculation report type.</param>
        /// <param name="ids">Ids for calculations.</param>
        /// <param name="language">Language for the report.</param>
        /// <param name="disposition">Optional content disposition parameter (inline or attachment), if the response should be returned as file.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<byte[]> AssurePdfGETAsync(ReportType type, System.Collections.Generic.IEnumerable<string> ids, Language? language, string disposition, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (ids == null)
                throw new System.ArgumentNullException("ids");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/assure-pdf/{type}"
                    urlBuilder_.Append("v03/api/reports/assure-pdf/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (disposition != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("disposition")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(disposition, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<byte[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assures that the report (pdf) exists for given calculations.
        /// </summary>
        /// <param name="type">Calculation report type.</param>
        /// <param name="calculations">Calculations.</param>
        /// <param name="language">Language for the report.</param>
        /// <param name="disposition">Optional content disposition parameter (inline or attachment), if the response should be returned as file.</param>
        /// <param name="watermark">Optional watermark text for the report. Value "default" will show the default language versioned watermark.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<byte[]> AssurePdfPOSTAsync(ReportType type, System.Collections.Generic.IEnumerable<ReportingCalculation> calculations, Language? language, string disposition, string watermark)
        {
            return AssurePdfPOSTAsync(type, calculations, language, disposition, watermark, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assures that the report (pdf) exists for given calculations.
        /// </summary>
        /// <param name="type">Calculation report type.</param>
        /// <param name="calculations">Calculations.</param>
        /// <param name="language">Language for the report.</param>
        /// <param name="disposition">Optional content disposition parameter (inline or attachment), if the response should be returned as file.</param>
        /// <param name="watermark">Optional watermark text for the report. Value "default" will show the default language versioned watermark.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<byte[]> AssurePdfPOSTAsync(ReportType type, System.Collections.Generic.IEnumerable<ReportingCalculation> calculations, Language? language, string disposition, string watermark, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (calculations == null)
                throw new System.ArgumentNullException("calculations");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calculations, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/assure-pdf/{type}"
                    urlBuilder_.Append("v03/api/reports/assure-pdf/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (language != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (disposition != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("disposition")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(disposition, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (watermark != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("watermark")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(watermark, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<byte[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the accounting data based on given set of calculations.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <param name="target">Accounting target: contains default ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingData> GetAccountingDataGET2Async(System.Collections.Generic.IEnumerable<string> calculationIds, string target)
        {
            return GetAccountingDataGET2Async(calculationIds, target, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the accounting data based on given set of calculations.
        /// </summary>
        /// <param name="calculationIds">Calculations that are the bases for the report.</param>
        /// <param name="target">Accounting target: contains default ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingData> GetAccountingDataGET2Async(System.Collections.Generic.IEnumerable<string> calculationIds, string target, System.Threading.CancellationToken cancellationToken)
        {
            if (calculationIds == null)
                throw new System.ArgumentNullException("calculationIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accounting"
                    urlBuilder_.Append("v03/api/reports/accounting");
                    urlBuilder_.Append('?');
                    foreach (var item_ in calculationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("calculationIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (target != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("target")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(target, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the accounting data based on given set of calculations.
        /// <br/>This method can be accessed anonymously for testing / development purposes.
        /// <br/>In this case, last valid calculation employer is set as employer avatar, but other employer information is not filled in.
        /// </summary>
        /// <param name="calculations">Calculations that are the bases for the report.</param>
        /// <param name="target">Accounting target: contains default ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingData> GetAccountingDataPOSTAsync(System.Collections.Generic.IEnumerable<ReportingCalculation> calculations, string target)
        {
            return GetAccountingDataPOSTAsync(calculations, target, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the accounting data based on given set of calculations.
        /// <br/>This method can be accessed anonymously for testing / development purposes.
        /// <br/>In this case, last valid calculation employer is set as employer avatar, but other employer information is not filled in.
        /// </summary>
        /// <param name="calculations">Calculations that are the bases for the report.</param>
        /// <param name="target">Accounting target: contains default ruleset for creating accounting entries.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingData> GetAccountingDataPOSTAsync(System.Collections.Generic.IEnumerable<ReportingCalculation> calculations, string target, System.Threading.CancellationToken cancellationToken)
        {
            if (calculations == null)
                throw new System.ArgumentNullException("calculations");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calculations, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accounting"
                    urlBuilder_.Append("v03/api/reports/accounting");
                    urlBuilder_.Append('?');
                    if (target != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("target")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(target, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Validates the request for pay certificate.
        /// </summary>
        /// <param name="id">Worker ID.</param>
        /// <param name="calculationIds">IDs of the calculations selected for the period.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiValidation> ValidatePayCertificateAsync(string id, System.Collections.Generic.IEnumerable<string> calculationIds)
        {
            return ValidatePayCertificateAsync(id, calculationIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validates the request for pay certificate.
        /// </summary>
        /// <param name="id">Worker ID.</param>
        /// <param name="calculationIds">IDs of the calculations selected for the period.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiValidation> ValidatePayCertificateAsync(string id, System.Collections.Generic.IEnumerable<string> calculationIds, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (calculationIds == null)
                throw new System.ArgumentNullException("calculationIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/validate/payCertificate/{id}"
                    urlBuilder_.Append("v03/api/reports/validate/payCertificate/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    foreach (var item_ in calculationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("calculationIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiValidation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Validates the request for pay certificate.
        /// </summary>
        /// <param name="id">Worker ID.</param>
        /// <param name="calculationIds">IDs of the calculations selected for the period.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiValidation> ValidatePayCertificate2Async(string id, System.Collections.Generic.IEnumerable<string> calculationIds)
        {
            return ValidatePayCertificate2Async(id, calculationIds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validates the request for pay certificate.
        /// </summary>
        /// <param name="id">Worker ID.</param>
        /// <param name="calculationIds">IDs of the calculations selected for the period.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiValidation> ValidatePayCertificate2Async(string id, System.Collections.Generic.IEnumerable<string> calculationIds, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (calculationIds == null)
                throw new System.ArgumentNullException("calculationIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/validate/pay-certificate/{id}"
                    urlBuilder_.Append("v03/api/reports/validate/pay-certificate/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    foreach (var item_ in calculationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("calculationIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiValidation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for the worker summary reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="workerId">Worker id or keyword "self" to get the WorkerCopies for the current account instead. Please note that ID can be social security number or workers technical id.</param>
        /// <param name="employerId">Employer id. If null, first employer report will be returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is Salary date.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkerSummaryReportData> GetWorkerSummaryReportDataForPeriodAsync(System.DateTimeOffset refDate, string workerId, string employerId, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind)
        {
            return GetWorkerSummaryReportDataForPeriodAsync(refDate, workerId, employerId, periodType, endDate, periodDateKind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for the worker summary reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="workerId">Worker id or keyword "self" to get the WorkerCopies for the current account instead. Please note that ID can be social security number or workers technical id.</param>
        /// <param name="employerId">Employer id. If null, first employer report will be returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is Salary date.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkerSummaryReportData> GetWorkerSummaryReportDataForPeriodAsync(System.DateTimeOffset refDate, string workerId, string employerId, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Threading.CancellationToken cancellationToken)
        {
            if (refDate == null)
                throw new System.ArgumentNullException("refDate");

            if (workerId == null)
                throw new System.ArgumentNullException("workerId");

            if (employerId == null)
                throw new System.ArgumentNullException("employerId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/summary/{refDate}/{workerId}/{employerId}"
                    urlBuilder_.Append("v03/api/reports/summary/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(refDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(workerId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employerId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (periodType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodDateKind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodDateKind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodDateKind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkerSummaryReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the monthly / yearly accounting data.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="target">Accounting target: contains default ruleset for creating accounting entries.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="minStatus">Minimum status level for the calculations: draft-paymentStarted-paymentSucceeded. The default level is paymentSucceeded.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingData> GetAccountingDataForPeriodAsync(System.DateTimeOffset refDate, string target, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, CalculationStatus? minStatus)
        {
            return GetAccountingDataForPeriodAsync(refDate, target, periodType, endDate, periodDateKind, minStatus, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the monthly / yearly accounting data.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="target">Accounting target: contains default ruleset for creating accounting entries.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="minStatus">Minimum status level for the calculations: draft-paymentStarted-paymentSucceeded. The default level is paymentSucceeded.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingData> GetAccountingDataForPeriodAsync(System.DateTimeOffset refDate, string target, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, CalculationStatus? minStatus, System.Threading.CancellationToken cancellationToken)
        {
            if (refDate == null)
                throw new System.ArgumentNullException("refDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accounting/{refDate}"
                    urlBuilder_.Append("v03/api/reports/accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(refDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (target != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("target")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(target, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodDateKind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodDateKind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodDateKind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minStatus != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for the summary reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="workers">List of workers (by official id) to include in the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SummaryReportData> GetSummaryReportDataForPeriodAsync(System.DateTimeOffset refDate, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Collections.Generic.IEnumerable<string> workers)
        {
            return GetSummaryReportDataForPeriodAsync(refDate, periodType, endDate, periodDateKind, workers, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for the summary reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="workers">List of workers (by official id) to include in the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SummaryReportData> GetSummaryReportDataForPeriodAsync(System.DateTimeOffset refDate, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Collections.Generic.IEnumerable<string> workers, System.Threading.CancellationToken cancellationToken)
        {
            if (refDate == null)
                throw new System.ArgumentNullException("refDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/summary/{refDate}"
                    urlBuilder_.Append("v03/api/reports/summary/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(refDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (periodType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodDateKind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodDateKind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodDateKind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (workers != null)
                    {
                        foreach (var item_ in workers) { urlBuilder_.Append(System.Uri.EscapeDataString("workers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SummaryReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for the calculation based reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="workers">List of workers (by official id) to include in the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CalculationReportData> GetCalculationReportDataForPeriodAsync(System.DateTimeOffset refDate, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Collections.Generic.IEnumerable<string> workers)
        {
            return GetCalculationReportDataForPeriodAsync(refDate, periodType, endDate, periodDateKind, workers, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for the calculation based reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="workers">List of workers (by official id) to include in the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CalculationReportData> GetCalculationReportDataForPeriodAsync(System.DateTimeOffset refDate, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Collections.Generic.IEnumerable<string> workers, System.Threading.CancellationToken cancellationToken)
        {
            if (refDate == null)
                throw new System.ArgumentNullException("refDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/calculation/{refDate}"
                    urlBuilder_.Append("v03/api/reports/calculation/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(refDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (periodType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodDateKind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodDateKind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodDateKind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (workers != null)
                    {
                        foreach (var item_ in workers) { urlBuilder_.Append(System.Uri.EscapeDataString("workers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CalculationReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for the accounting row reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="workers">List of workers (by official id) to include in the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingRowReportData> GetAccountingRowReportDataForPeriodAsync(System.DateTimeOffset refDate, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Collections.Generic.IEnumerable<string> workers)
        {
            return GetAccountingRowReportDataForPeriodAsync(refDate, periodType, endDate, periodDateKind, workers, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for the accounting row reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="workers">List of workers (by official id) to include in the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingRowReportData> GetAccountingRowReportDataForPeriodAsync(System.DateTimeOffset refDate, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Collections.Generic.IEnumerable<string> workers, System.Threading.CancellationToken cancellationToken)
        {
            if (refDate == null)
                throw new System.ArgumentNullException("refDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accountingRow/{refDate}"
                    urlBuilder_.Append("v03/api/reports/accountingRow/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(refDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (periodType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodDateKind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodDateKind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodDateKind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (workers != null)
                    {
                        foreach (var item_ in workers) { urlBuilder_.Append(System.Uri.EscapeDataString("workers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingRowReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the raw data for the accounting row reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="workers">List of workers (by official id) to include in the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingRowReportData> GetAccountingRowReportDataForPeriod2Async(System.DateTimeOffset refDate, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Collections.Generic.IEnumerable<string> workers)
        {
            return GetAccountingRowReportDataForPeriod2Async(refDate, periodType, endDate, periodDateKind, workers, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the raw data for the accounting row reports.
        /// </summary>
        /// <param name="refDate">Reference date for the period. Please note that even if the date is not the first day of the given period, the entire period is returned.</param>
        /// <param name="periodType">Month, quarter, year or a custom period. The custom period requires endDate. Default value is the month.</param>
        /// <param name="endDate">End date for the period. Required only for the custom period.</param>
        /// <param name="periodDateKind">Date kind for the period: either PaidAt date (paid by employer) or Salary date (paid to worker). The default is PaidAt date.</param>
        /// <param name="workers">List of workers (by official id) to include in the report.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingRowReportData> GetAccountingRowReportDataForPeriod2Async(System.DateTimeOffset refDate, PeriodType? periodType, System.DateTimeOffset? endDate, PeriodDateKind? periodDateKind, System.Collections.Generic.IEnumerable<string> workers, System.Threading.CancellationToken cancellationToken)
        {
            if (refDate == null)
                throw new System.ArgumentNullException("refDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accounting-row/{refDate}"
                    urlBuilder_.Append("v03/api/reports/accounting-row/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(refDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (periodType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodDateKind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodDateKind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodDateKind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (workers != null)
                    {
                        foreach (var item_ in workers) { urlBuilder_.Append(System.Uri.EscapeDataString("workers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingRowReportData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Closes the accounting period (month).
        /// </summary>
        /// <param name="refDate">Date for the period. The first date of the month.</param>
        /// <param name="option">Option for closing the period. Currently only default -option supporte.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> CloseAccountingPeriodAsync(System.DateTimeOffset refDate, AccountingPeriodClosingOption? option)
        {
            return CloseAccountingPeriodAsync(refDate, option, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Closes the accounting period (month).
        /// </summary>
        /// <param name="refDate">Date for the period. The first date of the month.</param>
        /// <param name="option">Option for closing the period. Currently only default -option supporte.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> CloseAccountingPeriodAsync(System.DateTimeOffset refDate, AccountingPeriodClosingOption? option, System.Threading.CancellationToken cancellationToken)
        {
            if (refDate == null)
                throw new System.ArgumentNullException("refDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/reports/accounting/{refDate}/close"
                    urlBuilder_.Append("v03/api/reports/accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(refDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/close");
                    urlBuilder_.Append('?');
                    if (option != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("option")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(option, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RowUsecasesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public RowUsecasesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Stand-alone test method for TaxAtSource usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="taxValue">Tax value is either the fixed value (euro) or percentage (0-1) depending on the kind.</param>
        /// <param name="deductionPrice">Deduction for the tax at source: Fixed, Monthly or Daily</param>
        /// <param name="deductionCount">Count of deduction units: 1 or number of months or days.</param>
        /// <param name="deduction">Value of the deduction: Deduction * DeductionCount</param>
        /// <param name="totalTaxable">Total taxable value of the salary calculation.</param>
        /// <param name="employmentData_percent">Tax percent. As of writing, this is 35% by default and 15% for athletes and performingg artists,
        /// <br/>but the percentage may change and bust be checked from the taxcard (or legistlattion if there is no card available).</param>
        /// <param name="employmentData_deductionMonthly">Monthly deduction (e.g. 510 €/month) if one can be used for this card.</param>
        /// <param name="employmentData_deductionDaily">Daily deduction (e.g. 17 €/day) if one can be used for this card.</param>
        /// <param name="allowedKinds">List of allowed kinds (deductions based on source data).
        /// <br/>Currently as a comma separated string.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> TaxAtSourceAsync(double price, Calculation calc, double? count, string message, double? taxValue, double? deductionPrice, double? deductionCount, double? deduction, double? totalTaxable, double? employmentData_percent, double? employmentData_deductionMonthly, double? employmentData_deductionDaily, string allowedKinds, TaxAtSourceKind? kind)
        {
            return TaxAtSourceAsync(price, calc, count, message, taxValue, deductionPrice, deductionCount, deduction, totalTaxable, employmentData_percent, employmentData_deductionMonthly, employmentData_deductionDaily, allowedKinds, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for TaxAtSource usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="taxValue">Tax value is either the fixed value (euro) or percentage (0-1) depending on the kind.</param>
        /// <param name="deductionPrice">Deduction for the tax at source: Fixed, Monthly or Daily</param>
        /// <param name="deductionCount">Count of deduction units: 1 or number of months or days.</param>
        /// <param name="deduction">Value of the deduction: Deduction * DeductionCount</param>
        /// <param name="totalTaxable">Total taxable value of the salary calculation.</param>
        /// <param name="employmentData_percent">Tax percent. As of writing, this is 35% by default and 15% for athletes and performingg artists,
        /// <br/>but the percentage may change and bust be checked from the taxcard (or legistlattion if there is no card available).</param>
        /// <param name="employmentData_deductionMonthly">Monthly deduction (e.g. 510 €/month) if one can be used for this card.</param>
        /// <param name="employmentData_deductionDaily">Daily deduction (e.g. 17 €/day) if one can be used for this card.</param>
        /// <param name="allowedKinds">List of allowed kinds (deductions based on source data).
        /// <br/>Currently as a comma separated string.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> TaxAtSourceAsync(double price, Calculation calc, double? count, string message, double? taxValue, double? deductionPrice, double? deductionCount, double? deduction, double? totalTaxable, double? employmentData_percent, double? employmentData_deductionMonthly, double? employmentData_deductionDaily, string allowedKinds, TaxAtSourceKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/TaxAtSource"
                    urlBuilder_.Append("v03/api/row-usecases/TaxAtSource");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (taxValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("taxValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(taxValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deductionPrice != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deductionPrice")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deductionPrice, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deductionCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deductionCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deductionCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deduction != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deduction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deduction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (totalTaxable != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("totalTaxable")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(totalTaxable, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (employmentData_percent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("employmentData.percent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(employmentData_percent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (employmentData_deductionMonthly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("employmentData.deductionMonthly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(employmentData_deductionMonthly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (employmentData_deductionDaily != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("employmentData.deductionDaily")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(employmentData_deductionDaily, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (allowedKinds != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("allowedKinds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(allowedKinds, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for IrIncomeType usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="irData_code">The number code in Incomes Register.</param>
        /// <param name="irData_flags">Boolean flags that can be set on transaction.</param>
        /// <param name="irData_insuranceExceptions">Defines the exceptions to Insurance / Sidecost defaults that are set by the row type.</param>
        /// <param name="irData_dailyAllowance">Daily allowance code.</param>
        /// <param name="irData_mealBenefitIsTaxValue">Set this to true if meak benefit is of tax value - false if it si not.
        /// <br/>The value should be null if the row is not mealBenefit.</param>
        /// <param name="irData_carBenefit_carBenefitCode">Car benefit type</param>
        /// <param name="irData_carBenefit_ageGroupCode">Car age group</param>
        /// <param name="irData_carBenefit_kilometers">Odometer reading
        /// <br/>
        /// <br/>The value must be greater than or equal to 0</param>
        /// <param name="irData_carBenefit_emissionsValue">Car emissions value
        /// <br/>
        /// <br/>The car emissions value must be greater than or equal to 0, and smaller than or
        /// <br/>equal to 100. The car emissions value can only be reported if the payment date
        /// <br/>or other reporting date is in 2022–2025.</param>
        /// <param name="irData_noTransactionAmount">If true, report zero amount to IR.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> IrIncomeTypeAsync(double price, Calculation calc, double? count, string message, int? irData_code, System.Collections.Generic.IEnumerable<string> irData_flags, System.Collections.Generic.IEnumerable<string> irData_insuranceExceptions, System.Collections.Generic.IEnumerable<string> irData_dailyAllowance, bool? irData_mealBenefitIsTaxValue, CarBenefitCode? irData_carBenefit_carBenefitCode, AgeGroupCode? irData_carBenefit_ageGroupCode, int? irData_carBenefit_kilometers, double? irData_carBenefit_emissionsValue, bool? irData_noTransactionAmount, TransactionCode? kind)
        {
            return IrIncomeTypeAsync(price, calc, count, message, irData_code, irData_flags, irData_insuranceExceptions, irData_dailyAllowance, irData_mealBenefitIsTaxValue, irData_carBenefit_carBenefitCode, irData_carBenefit_ageGroupCode, irData_carBenefit_kilometers, irData_carBenefit_emissionsValue, irData_noTransactionAmount, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for IrIncomeType usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="irData_code">The number code in Incomes Register.</param>
        /// <param name="irData_flags">Boolean flags that can be set on transaction.</param>
        /// <param name="irData_insuranceExceptions">Defines the exceptions to Insurance / Sidecost defaults that are set by the row type.</param>
        /// <param name="irData_dailyAllowance">Daily allowance code.</param>
        /// <param name="irData_mealBenefitIsTaxValue">Set this to true if meak benefit is of tax value - false if it si not.
        /// <br/>The value should be null if the row is not mealBenefit.</param>
        /// <param name="irData_carBenefit_carBenefitCode">Car benefit type</param>
        /// <param name="irData_carBenefit_ageGroupCode">Car age group</param>
        /// <param name="irData_carBenefit_kilometers">Odometer reading
        /// <br/>
        /// <br/>The value must be greater than or equal to 0</param>
        /// <param name="irData_carBenefit_emissionsValue">Car emissions value
        /// <br/>
        /// <br/>The car emissions value must be greater than or equal to 0, and smaller than or
        /// <br/>equal to 100. The car emissions value can only be reported if the payment date
        /// <br/>or other reporting date is in 2022–2025.</param>
        /// <param name="irData_noTransactionAmount">If true, report zero amount to IR.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> IrIncomeTypeAsync(double price, Calculation calc, double? count, string message, int? irData_code, System.Collections.Generic.IEnumerable<string> irData_flags, System.Collections.Generic.IEnumerable<string> irData_insuranceExceptions, System.Collections.Generic.IEnumerable<string> irData_dailyAllowance, bool? irData_mealBenefitIsTaxValue, CarBenefitCode? irData_carBenefit_carBenefitCode, AgeGroupCode? irData_carBenefit_ageGroupCode, int? irData_carBenefit_kilometers, double? irData_carBenefit_emissionsValue, bool? irData_noTransactionAmount, TransactionCode? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/IrIncomeType"
                    urlBuilder_.Append("v03/api/row-usecases/IrIncomeType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (irData_code != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("irData.code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(irData_code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (irData_flags != null)
                    {
                        foreach (var item_ in irData_flags) { urlBuilder_.Append(System.Uri.EscapeDataString("irData.flags")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (irData_insuranceExceptions != null)
                    {
                        foreach (var item_ in irData_insuranceExceptions) { urlBuilder_.Append(System.Uri.EscapeDataString("irData.insuranceExceptions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (irData_dailyAllowance != null)
                    {
                        foreach (var item_ in irData_dailyAllowance) { urlBuilder_.Append(System.Uri.EscapeDataString("irData.dailyAllowance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (irData_mealBenefitIsTaxValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("irData.mealBenefitIsTaxValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(irData_mealBenefitIsTaxValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (irData_carBenefit_carBenefitCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("irData.carBenefit.carBenefitCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(irData_carBenefit_carBenefitCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (irData_carBenefit_ageGroupCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("irData.carBenefit.ageGroupCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(irData_carBenefit_ageGroupCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (irData_carBenefit_kilometers != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("irData.carBenefit.kilometers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(irData_carBenefit_kilometers, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (irData_carBenefit_emissionsValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("irData.carBenefit.emissionsValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(irData_carBenefit_emissionsValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (irData_noTransactionAmount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("irData.noTransactionAmount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(irData_noTransactionAmount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for Board usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> BoardAsync(double price, Calculation calc, double? count, string message, BoardKind? kind)
        {
            return BoardAsync(price, calc, count, message, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for Board usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> BoardAsync(double price, Calculation calc, double? count, string message, BoardKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/Board"
                    urlBuilder_.Append("v03/api/row-usecases/Board");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for Training usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> TrainingAsync(double price, Calculation calc, double? count, string message, TrainingKind? kind)
        {
            return TrainingAsync(price, calc, count, message, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for Training usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> TrainingAsync(double price, Calculation calc, double? count, string message, TrainingKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/Training"
                    urlBuilder_.Append("v03/api/row-usecases/Training");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for NonProfitOrg usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> NonProfitOrgAsync(double price, Calculation calc, double? count, string message, NonProfitOrgKind? kind)
        {
            return NonProfitOrgAsync(price, calc, count, message, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for NonProfitOrg usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> NonProfitOrgAsync(double price, Calculation calc, double? count, string message, NonProfitOrgKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/NonProfitOrg"
                    urlBuilder_.Append("v03/api/row-usecases/NonProfitOrg");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for Remuneration usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> RemunerationAsync(double price, Calculation calc, double? count, string message, RemunerationKind? kind)
        {
            return RemunerationAsync(price, calc, count, message, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for Remuneration usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> RemunerationAsync(double price, Calculation calc, double? count, string message, RemunerationKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/Remuneration"
                    urlBuilder_.Append("v03/api/row-usecases/Remuneration");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for PaidSickLeave usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> PaidSickLeaveAsync(double price, Calculation calc, double? count, string message, PaidSickLeaveKind? kind)
        {
            return PaidSickLeaveAsync(price, calc, count, message, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for PaidSickLeave usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> PaidSickLeaveAsync(double price, Calculation calc, double? count, string message, PaidSickLeaveKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/PaidSickLeave"
                    urlBuilder_.Append("v03/api/row-usecases/PaidSickLeave");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for OtherCompensation usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> OtherCompensationAsync(double price, Calculation calc, double? count, string message, OtherCompensationKind? kind)
        {
            return OtherCompensationAsync(price, calc, count, message, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for OtherCompensation usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> OtherCompensationAsync(double price, Calculation calc, double? count, string message, OtherCompensationKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/OtherCompensation"
                    urlBuilder_.Append("v03/api/row-usecases/OtherCompensation");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for EmploymentTermination usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> EmploymentTerminationAsync(double price, Calculation calc, double? count, string message, EmploymentTerminationKind? kind)
        {
            return EmploymentTerminationAsync(price, calc, count, message, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for EmploymentTermination usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> EmploymentTerminationAsync(double price, Calculation calc, double? count, string message, EmploymentTerminationKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/EmploymentTermination"
                    urlBuilder_.Append("v03/api/row-usecases/EmploymentTermination");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for WorkingTimeCompensation usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> WorkingTimeCompensationAsync(double price, Calculation calc, double? count, string message, WorkingTimeCompensationKind? kind)
        {
            return WorkingTimeCompensationAsync(price, calc, count, message, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for WorkingTimeCompensation usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> WorkingTimeCompensationAsync(double price, Calculation calc, double? count, string message, WorkingTimeCompensationKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/WorkingTimeCompensation"
                    urlBuilder_.Append("v03/api/row-usecases/WorkingTimeCompensation");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for HourlySalaryWithWorkingTimeCompensation usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="compensationRows">Collection of compensation rows.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> HourlySalaryWithWorkingTimeCompensationAsync(double price, Calculation calc, double? count, string message, System.Collections.Generic.IEnumerable<object> compensationRows, WorkingTimeCompensationKind? kind)
        {
            return HourlySalaryWithWorkingTimeCompensationAsync(price, calc, count, message, compensationRows, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for HourlySalaryWithWorkingTimeCompensation usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="compensationRows">Collection of compensation rows.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> HourlySalaryWithWorkingTimeCompensationAsync(double price, Calculation calc, double? count, string message, System.Collections.Generic.IEnumerable<object> compensationRows, WorkingTimeCompensationKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/HourlySalaryWithWorkingTimeCompensation"
                    urlBuilder_.Append("v03/api/row-usecases/HourlySalaryWithWorkingTimeCompensation");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (compensationRows != null)
                    {
                        foreach (var item_ in compensationRows) { urlBuilder_.Append(System.Uri.EscapeDataString("compensationRows")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for DailyAllowance usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="isHalf">If true, the daily allowance is paid in half: The Worker has received 2 free meals (1 if PartialDailyAllowance).
        /// <br/>This information is currently not reported to Incomes Register, it is only as information for calculation.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> DailyAllowanceAsync(double price, Calculation calc, double? count, string message, string country, bool? isHalf, DailyAllowanceKind? kind)
        {
            return DailyAllowanceAsync(price, calc, count, message, country, isHalf, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for DailyAllowance usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="isHalf">If true, the daily allowance is paid in half: The Worker has received 2 free meals (1 if PartialDailyAllowance).
        /// <br/>This information is currently not reported to Incomes Register, it is only as information for calculation.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> DailyAllowanceAsync(double price, Calculation calc, double? count, string message, string country, bool? isHalf, DailyAllowanceKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/DailyAllowance"
                    urlBuilder_.Append("v03/api/row-usecases/DailyAllowance");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (country != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("country")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isHalf != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isHalf")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isHalf, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for TaxWithholding usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="taxValue">Tax percent (0 - 1) {Palkkaus.Model.Usecases.CalculationRows.TaxWithholdingKind.Percentage} or fixed euro amount {Palkkaus.Model.Usecases.CalculationRows.TaxWithholdingKind.FixedValue} for tax with holding.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> TaxWithholdingAsync(double price, Calculation calc, double? count, string message, double? taxValue, TaxWithholdingKind? kind)
        {
            return TaxWithholdingAsync(price, calc, count, message, taxValue, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for TaxWithholding usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="taxValue">Tax percent (0 - 1) {Palkkaus.Model.Usecases.CalculationRows.TaxWithholdingKind.Percentage} or fixed euro amount {Palkkaus.Model.Usecases.CalculationRows.TaxWithholdingKind.FixedValue} for tax with holding.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> TaxWithholdingAsync(double price, Calculation calc, double? count, string message, double? taxValue, TaxWithholdingKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/TaxWithholding"
                    urlBuilder_.Append("v03/api/row-usecases/TaxWithholding");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (taxValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("taxValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(taxValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for TotalWorkerPayment usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="messageQuery">Message for the usecase row.</param>
        /// <param name="rowType">Calculation row type for adjusting the amount.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> TotalWorkerPaymentAsync(double price, Calculation calc, double? count, string messageQuery, CalculationRowType? rowType, TotalWorkerPaymentKind? kind)
        {
            return TotalWorkerPaymentAsync(price, calc, count, messageQuery, rowType, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for TotalWorkerPayment usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="messageQuery">Message for the usecase row.</param>
        /// <param name="rowType">Calculation row type for adjusting the amount.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> TotalWorkerPaymentAsync(double price, Calculation calc, double? count, string messageQuery, CalculationRowType? rowType, TotalWorkerPaymentKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/TotalWorkerPayment"
                    urlBuilder_.Append("v03/api/row-usecases/TotalWorkerPayment");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (messageQuery != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(messageQuery, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (rowType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("rowType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(rowType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for BicycleBenefit usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="deduction">Deduction from salary</param>
        /// <param name="taxable">Taxable amount of the benefit.</param>
        /// <param name="periodDivider">Number of periods if Kind is PeriodicalDeduction. 
        /// <br/>Otherwise this value is null.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> BicycleBenefitAsync(double price, Calculation calc, string message, double? deduction, double? taxable, int? periodDivider, BicycleBenefitKind? kind)
        {
            return BicycleBenefitAsync(price, calc, message, deduction, taxable, periodDivider, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for BicycleBenefit usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="deduction">Deduction from salary</param>
        /// <param name="taxable">Taxable amount of the benefit.</param>
        /// <param name="periodDivider">Number of periods if Kind is PeriodicalDeduction. 
        /// <br/>Otherwise this value is null.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> BicycleBenefitAsync(double price, Calculation calc, string message, double? deduction, double? taxable, int? periodDivider, BicycleBenefitKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/BicycleBenefit"
                    urlBuilder_.Append("v03/api/row-usecases/BicycleBenefit");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deduction != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deduction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deduction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (taxable != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("taxable")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(taxable, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodDivider != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodDivider")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodDivider, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for SubsidisedCommute usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="deduction">Deduction from salary</param>
        /// <param name="taxable">Taxable amount of the benefit.</param>
        /// <param name="periodDivider">Number of periods if Kind is PeriodicalDeduction. 
        /// <br/>Otherwise this value is null.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> SubsidisedCommuteAsync(double price, Calculation calc, string message, double? deduction, double? taxable, int? periodDivider, SubsidisedCommuteKind? kind)
        {
            return SubsidisedCommuteAsync(price, calc, message, deduction, taxable, periodDivider, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for SubsidisedCommute usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="deduction">Deduction from salary</param>
        /// <param name="taxable">Taxable amount of the benefit.</param>
        /// <param name="periodDivider">Number of periods if Kind is PeriodicalDeduction. 
        /// <br/>Otherwise this value is null.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> SubsidisedCommuteAsync(double price, Calculation calc, string message, double? deduction, double? taxable, int? periodDivider, SubsidisedCommuteKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/SubsidisedCommute"
                    urlBuilder_.Append("v03/api/row-usecases/SubsidisedCommute");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deduction != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deduction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deduction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (taxable != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("taxable")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(taxable, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodDivider != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodDivider")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodDivider, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for CarBenefit usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="ageGroup">Age group as in A,B,C or I for international.</param>
        /// <param name="isKilometersBased">If true, the calculation is kilometers based.</param>
        /// <param name="kilometers">Number of kilometers is filled in only if that type of benefit calculation is used.</param>
        /// <param name="emissionsValue">Car emissions value
        /// <br/>
        /// <br/>The car emissions value must be greater than or equal to 0, and smaller than or
        /// <br/>equal to 100. The car emissions value can only be reported if the payment date
        /// <br/>or other reporting date is in 2022–2025.</param>
        /// <param name="deduction">Deduction from salary</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> CarBenefitAsync(double price, Calculation calc, string message, AgeGroupCode? ageGroup, bool? isKilometersBased, int? kilometers, double? emissionsValue, double? deduction, CarBenefitKind? kind)
        {
            return CarBenefitAsync(price, calc, message, ageGroup, isKilometersBased, kilometers, emissionsValue, deduction, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for CarBenefit usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="ageGroup">Age group as in A,B,C or I for international.</param>
        /// <param name="isKilometersBased">If true, the calculation is kilometers based.</param>
        /// <param name="kilometers">Number of kilometers is filled in only if that type of benefit calculation is used.</param>
        /// <param name="emissionsValue">Car emissions value
        /// <br/>
        /// <br/>The car emissions value must be greater than or equal to 0, and smaller than or
        /// <br/>equal to 100. The car emissions value can only be reported if the payment date
        /// <br/>or other reporting date is in 2022–2025.</param>
        /// <param name="deduction">Deduction from salary</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> CarBenefitAsync(double price, Calculation calc, string message, AgeGroupCode? ageGroup, bool? isKilometersBased, int? kilometers, double? emissionsValue, double? deduction, CarBenefitKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/CarBenefit"
                    urlBuilder_.Append("v03/api/row-usecases/CarBenefit");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ageGroup != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ageGroup")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ageGroup, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isKilometersBased != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isKilometersBased")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isKilometersBased, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kilometers != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kilometers")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kilometers, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (emissionsValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("emissionsValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(emissionsValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deduction != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deduction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deduction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for MealBenefit usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="deduction">Deduction from salary</param>
        /// <param name="taxablePrice">The taxable price calculated by the server.</param>
        /// <param name="isTaxValue">If true, the deduction from Worker salary corresponds to taxable value.</param>
        /// <param name="isTaxValueDeductionDone">If true, the deduction from Worker Salary has already been done or will be done and is not added to this calculation.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> MealBenefitAsync(double price, Calculation calc, double? count, string message, double? deduction, double? taxablePrice, bool? isTaxValue, bool? isTaxValueDeductionDone, MealBenefitKind? kind)
        {
            return MealBenefitAsync(price, calc, count, message, deduction, taxablePrice, isTaxValue, isTaxValueDeductionDone, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for MealBenefit usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="deduction">Deduction from salary</param>
        /// <param name="taxablePrice">The taxable price calculated by the server.</param>
        /// <param name="isTaxValue">If true, the deduction from Worker salary corresponds to taxable value.</param>
        /// <param name="isTaxValueDeductionDone">If true, the deduction from Worker Salary has already been done or will be done and is not added to this calculation.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> MealBenefitAsync(double price, Calculation calc, double? count, string message, double? deduction, double? taxablePrice, bool? isTaxValue, bool? isTaxValueDeductionDone, MealBenefitKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/MealBenefit"
                    urlBuilder_.Append("v03/api/row-usecases/MealBenefit");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deduction != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deduction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deduction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (taxablePrice != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("taxablePrice")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(taxablePrice, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isTaxValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isTaxValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isTaxValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isTaxValueDeductionDone != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isTaxValueDeductionDone")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isTaxValueDeductionDone, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for UnionPayment usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="referenceNumber">Reference for the union payment.</param>
        /// <param name="recipientFullName">The full name of the union for payment purposes.</param>
        /// <param name="iban">The International Bank Account Number of the union.</param>
        /// <param name="paymentPercentage">Percentage of the total taxable amount to pay.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.</param>
        /// <param name="maximumPayment">Maximum payment limit, or null if not desired.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.</param>
        /// <param name="minimumPayment">Minimum payment limit, or null if not desired.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> UnionPaymentAsync(double price, Calculation calc, double? count, string message, string referenceNumber, string recipientFullName, string iban, double? paymentPercentage, double? maximumPayment, double? minimumPayment, UnionPaymentKind? kind)
        {
            return UnionPaymentAsync(price, calc, count, message, referenceNumber, recipientFullName, iban, paymentPercentage, maximumPayment, minimumPayment, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for UnionPayment usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="referenceNumber">Reference for the union payment.</param>
        /// <param name="recipientFullName">The full name of the union for payment purposes.</param>
        /// <param name="iban">The International Bank Account Number of the union.</param>
        /// <param name="paymentPercentage">Percentage of the total taxable amount to pay.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.</param>
        /// <param name="maximumPayment">Maximum payment limit, or null if not desired.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.</param>
        /// <param name="minimumPayment">Minimum payment limit, or null if not desired.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> UnionPaymentAsync(double price, Calculation calc, double? count, string message, string referenceNumber, string recipientFullName, string iban, double? paymentPercentage, double? maximumPayment, double? minimumPayment, UnionPaymentKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/UnionPayment"
                    urlBuilder_.Append("v03/api/row-usecases/UnionPayment");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (referenceNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("referenceNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (recipientFullName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("recipientFullName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(recipientFullName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (iban != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("iban")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(iban, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (paymentPercentage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paymentPercentage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paymentPercentage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maximumPayment != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maximumPayment")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maximumPayment, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minimumPayment != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minimumPayment")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minimumPayment, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stand-alone test method for Foreclosure usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="referenceNumber">Reference for the payment.</param>
        /// <param name="periodLength">Length of the salary payment period.</param>
        /// <param name="dependantsCount">Count of dependants of the debtor. Typically spouse and children.</param>
        /// <param name="protectedPortionBase">Amount of the protected portion for each day.</param>
        /// <param name="protectedPortionDependant">Amount of the protected portion for each dependant for each day.</param>
        /// <param name="incomeFromOtherSources">Income from other sources.</param>
        /// <param name="additionalAmountLeftToDebtor">Additional amount to be left to debtor.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> ForeclosureAsync(double price, Calculation calc, double? count, string message, string referenceNumber, int? periodLength, int? dependantsCount, double? protectedPortionBase, double? protectedPortionDependant, double? incomeFromOtherSources, double? additionalAmountLeftToDebtor, ForeclosureKind? kind)
        {
            return ForeclosureAsync(price, calc, count, message, referenceNumber, periodLength, dependantsCount, protectedPortionBase, protectedPortionDependant, incomeFromOtherSources, additionalAmountLeftToDebtor, kind, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stand-alone test method for Foreclosure usecase.
        /// </summary>
        /// <param name="price">Row price</param>
        /// <param name="calc">Calculation that is the bases for testing. If null, a new one is created.</param>
        /// <param name="count">Row count, default is 1</param>
        /// <param name="message">Message for the usecase row.</param>
        /// <param name="referenceNumber">Reference for the payment.</param>
        /// <param name="periodLength">Length of the salary payment period.</param>
        /// <param name="dependantsCount">Count of dependants of the debtor. Typically spouse and children.</param>
        /// <param name="protectedPortionBase">Amount of the protected portion for each day.</param>
        /// <param name="protectedPortionDependant">Amount of the protected portion for each dependant for each day.</param>
        /// <param name="incomeFromOtherSources">Income from other sources.</param>
        /// <param name="additionalAmountLeftToDebtor">Additional amount to be left to debtor.</param>
        /// <param name="kind">Primary subtyping of the usecase.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> ForeclosureAsync(double price, Calculation calc, double? count, string message, string referenceNumber, int? periodLength, int? dependantsCount, double? protectedPortionBase, double? protectedPortionDependant, double? incomeFromOtherSources, double? additionalAmountLeftToDebtor, ForeclosureKind? kind, System.Threading.CancellationToken cancellationToken)
        {
            if (price == null)
                throw new System.ArgumentNullException("price");

            if (calc == null)
                throw new System.ArgumentNullException("calc");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(calc, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/row-usecases/Foreclosure"
                    urlBuilder_.Append("v03/api/row-usecases/Foreclosure");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("price")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(price, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (message != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (referenceNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("referenceNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(referenceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodLength != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodLength")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodLength, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dependantsCount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dependantsCount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dependantsCount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (protectedPortionBase != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("protectedPortionBase")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(protectedPortionBase, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (protectedPortionDependant != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("protectedPortionDependant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(protectedPortionDependant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (incomeFromOtherSources != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("incomeFromOtherSources")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(incomeFromOtherSources, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (additionalAmountLeftToDebtor != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("additionalAmountLeftToDebtor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(additionalAmountLeftToDebtor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (kind != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("kind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(kind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ServiceModelClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ServiceModel> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceModel> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/service-models/new"
                    urlBuilder_.Append("v03/api/service-models/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ServiceModel> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceModel> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/service-models/{id}"
                    urlBuilder_.Append("v03/api/service-models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/service-models/{id}"
                    urlBuilder_.Append("v03/api/service-models/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfServiceModelListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfServiceModelListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/service-models"
                    urlBuilder_.Append("v03/api/service-models");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfServiceModelListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ServiceModel> CrudSaveAsync(ServiceModel model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceModel> CrudSaveAsync(ServiceModel model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/service-models"
                    urlBuilder_.Append("v03/api/service-models");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SessionClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SessionClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets the current session information - even if the user is not yet authorized.
        /// <br/>Check for IsAuthorized or HasCredential to see if the user can perform operations.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserSession> GetSessionAsync()
        {
            return GetSessionAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the current session information - even if the user is not yet authorized.
        /// <br/>Check for IsAuthorized or HasCredential to see if the user can perform operations.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserSession> GetSessionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/session/current"
                    urlBuilder_.Append("v03/api/session/current");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserSession>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Checks whether the current browser session is authorized:
        /// <br/>This means that there is both UserCredential and valid CurrentAccount
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> IsAuthorizedAsync()
        {
            return IsAuthorizedAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Checks whether the current browser session is authorized:
        /// <br/>This means that there is both UserCredential and valid CurrentAccount
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> IsAuthorizedAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/session/isAuthorized"
                    urlBuilder_.Append("v03/api/session/isAuthorized");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SettingsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SettingsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Returns the main account settings for company employers.
        /// <br/>This is the full set of employer settings.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyAccountSettings> CrudGetCompanyAsync()
        {
            return CrudGetCompanyAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the main account settings for company employers.
        /// <br/>This is the full set of employer settings.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyAccountSettings> CrudGetCompanyAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/company"
                    urlBuilder_.Append("v03/api/settings/company");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyAccountSettings>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves the main account settings for company employers.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompanyAccountSettings> CrudPostCompanyAsync(CompanyAccountSettings model)
        {
            return CrudPostCompanyAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves the main account settings for company employers.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompanyAccountSettings> CrudPostCompanyAsync(CompanyAccountSettings model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/company"
                    urlBuilder_.Append("v03/api/settings/company");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompanyAccountSettings>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the logo for the layout template.
        /// </summary>
        /// <param name="id">Id of the logo in format id@owner</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> CrudGetLogoAsync(string id)
        {
            return CrudGetLogoAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the logo for the layout template.
        /// </summary>
        /// <param name="id">Id of the logo in format id@owner</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> CrudGetLogoAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/logo/{id}"
                    urlBuilder_.Append("v03/api/settings/logo/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns all the cost accounting dimensions for the account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CostAccountingDimensionDefinition>> CrudGetDimensionsAsync()
        {
            return CrudGetDimensionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all the cost accounting dimensions for the account.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CostAccountingDimensionDefinition>> CrudGetDimensionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/dimensions"
                    urlBuilder_.Append("v03/api/settings/dimensions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CostAccountingDimensionDefinition>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves a single cost accounting dimensions for the account.
        /// </summary>
        /// <param name="dimension">Cost accounting dimension.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CostAccountingDimensionDefinition> CrudSaveDimensionAsync(CostAccountingDimensionDefinition dimension)
        {
            return CrudSaveDimensionAsync(dimension, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves a single cost accounting dimensions for the account.
        /// </summary>
        /// <param name="dimension">Cost accounting dimension.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CostAccountingDimensionDefinition> CrudSaveDimensionAsync(CostAccountingDimensionDefinition dimension, System.Threading.CancellationToken cancellationToken)
        {
            if (dimension == null)
                throw new System.ArgumentNullException("dimension");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dimension, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/dimensions"
                    urlBuilder_.Append("v03/api/settings/dimensions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CostAccountingDimensionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the layout template.
        /// </summary>
        /// <param name="id">Id of the layout template in format id@owner</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReportingLayoutTemplate> CrudGetLayoutTemplateAsync(string id)
        {
            return CrudGetLayoutTemplateAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the layout template.
        /// </summary>
        /// <param name="id">Id of the layout template in format id@owner</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReportingLayoutTemplate> CrudGetLayoutTemplateAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/layout/{id}"
                    urlBuilder_.Append("v03/api/settings/layout/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReportingLayoutTemplate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a single cost accounting dimension for the account.
        /// </summary>
        /// <param name="id">Identifier for the dimension.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CostAccountingDimensionDefinition> CrudGetDimensionAsync(string id)
        {
            return CrudGetDimensionAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a single cost accounting dimension for the account.
        /// </summary>
        /// <param name="id">Identifier for the dimension.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CostAccountingDimensionDefinition> CrudGetDimensionAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/dimensions/{id}"
                    urlBuilder_.Append("v03/api/settings/dimensions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CostAccountingDimensionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Removes a single cost accounting dimension from the account.
        /// </summary>
        /// <param name="id">Identifier for the dimension.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteDimensionAsync(string id)
        {
            return CrudDeleteDimensionAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes a single cost accounting dimension from the account.
        /// </summary>
        /// <param name="id">Identifier for the dimension.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteDimensionAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/dimensions/{id}"
                    urlBuilder_.Append("v03/api/settings/dimensions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns all brands in service models.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfBrandListItem> ODataSearchBrandsAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchBrandsAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all brands in service models.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfBrandListItem> ODataSearchBrandsAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/brands"
                    urlBuilder_.Append("v03/api/settings/brands");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfBrandListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns the partners.
        /// </summary>
        /// <param name="search">Search text. Company name or business id.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountInIndex>> SearchPartnersAsync(string search)
        {
            return SearchPartnersAsync(search, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the partners.
        /// </summary>
        /// <param name="search">Search text. Company name or business id.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountInIndex>> SearchPartnersAsync(string search, System.Threading.CancellationToken cancellationToken)
        {
            if (search == null)
                throw new System.ArgumentNullException("search");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/partners"
                    urlBuilder_.Append("v03/api/settings/partners");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccountInIndex>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Makes a search to ytj for companies.
        /// </summary>
        /// <param name="search">Sarch text. Company name or business id.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountInIndex>> SearchYtjAsync(string search)
        {
            return SearchYtjAsync(search, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Makes a search to ytj for companies.
        /// </summary>
        /// <param name="search">Sarch text. Company name or business id.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountInIndex>> SearchYtjAsync(string search, System.Threading.CancellationToken cancellationToken)
        {
            if (search == null)
                throw new System.ArgumentNullException("search");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/ytj-companies"
                    urlBuilder_.Append("v03/api/settings/ytj-companies");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccountInIndex>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Saves the cost accounting dimensions for the account.
        /// <br/>Please note that this method replaces all the dimensions with the posted dimensions.
        /// </summary>
        /// <param name="dimensions">Cost accounting dimensions for the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CostAccountingDimensionDefinition>> CrudSaveDimensionsAsync(System.Collections.Generic.IEnumerable<CostAccountingDimensionDefinition> dimensions)
        {
            return CrudSaveDimensionsAsync(dimensions, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Saves the cost accounting dimensions for the account.
        /// <br/>Please note that this method replaces all the dimensions with the posted dimensions.
        /// </summary>
        /// <param name="dimensions">Cost accounting dimensions for the account.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CostAccountingDimensionDefinition>> CrudSaveDimensionsAsync(System.Collections.Generic.IEnumerable<CostAccountingDimensionDefinition> dimensions, System.Threading.CancellationToken cancellationToken)
        {
            if (dimensions == null)
                throw new System.ArgumentNullException("dimensions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dimensions, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/settings/dimensions/all"
                    urlBuilder_.Append("v03/api/settings/dimensions/all");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CostAccountingDimensionDefinition>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TaxcardsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Taxcard> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Taxcard> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/new"
                    urlBuilder_.Append("v03/api/taxcards/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Taxcard>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfTaxcardListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfTaxcardListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards"
                    urlBuilder_.Append("v03/api/taxcards");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfTaxcardListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object.
        /// <br/>Paid calculations may be checked and added as Diff rows depending on taxcardOnly parameter.
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <param name="calcDiffCheck">Defines the behavior of how to check and handle existing paid calculations when saving the taxcard.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Taxcard> CrudSaveAsync(Taxcard model, TaxcardCalcDiffCheck? calcDiffCheck)
        {
            return CrudSaveAsync(model, calcDiffCheck, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object.
        /// <br/>Paid calculations may be checked and added as Diff rows depending on taxcardOnly parameter.
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <param name="calcDiffCheck">Defines the behavior of how to check and handle existing paid calculations when saving the taxcard.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Taxcard> CrudSaveAsync(Taxcard model, TaxcardCalcDiffCheck? calcDiffCheck, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards"
                    urlBuilder_.Append("v03/api/taxcards");
                    urlBuilder_.Append('?');
                    if (calcDiffCheck != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("calcDiffCheck")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(calcDiffCheck, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Taxcard>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier. 
        /// <br/>By default also returns Diff if paid calculations are different in database than in the taxcard.
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <param name="calcDiffCheck">Defines the behavior of how to check and handle existing paid calculations.
        /// <br/>Default is "getDiff" where the system fetches the paid calculations in the database and adds them as Diff-rows.
        /// <br/>Note that "commitDiff" is not currently supported. May later be supported if necessary.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Taxcard> CrudGetAsync(string id, TaxcardCalcDiffCheck? calcDiffCheck)
        {
            return CrudGetAsync(id, calcDiffCheck, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier. 
        /// <br/>By default also returns Diff if paid calculations are different in database than in the taxcard.
        /// </summary>
        /// <param name="id">Unique identifier for the object</param>
        /// <param name="calcDiffCheck">Defines the behavior of how to check and handle existing paid calculations.
        /// <br/>Default is "getDiff" where the system fetches the paid calculations in the database and adds them as Diff-rows.
        /// <br/>Note that "commitDiff" is not currently supported. May later be supported if necessary.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Taxcard> CrudGetAsync(string id, TaxcardCalcDiffCheck? calcDiffCheck, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/{id}"
                    urlBuilder_.Append("v03/api/taxcards/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (calcDiffCheck != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("calcDiffCheck")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(calcDiffCheck, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Taxcard>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/{id}"
                    urlBuilder_.Append("v03/api/taxcards/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of all non-terminated employments of the employer and resolves their current taxcards.
        /// <br/>The current taxcards may be for the current year or for next year if the current date is either December or January.
        /// </summary>
        /// <param name="paymentDate">Payment date for which the validity (current card in use) is calculated. If null, Next workday is used.
        /// <br/>This may be changed to next default payment date without that being a breaking change.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfTaxcardListItem> GetCurrentTaxcardsAsync(System.DateTimeOffset paymentDate, string search, string select, string filter, string orderby, bool? count)
        {
            return GetCurrentTaxcardsAsync(paymentDate, search, select, filter, orderby, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of all non-terminated employments of the employer and resolves their current taxcards.
        /// <br/>The current taxcards may be for the current year or for next year if the current date is either December or January.
        /// </summary>
        /// <param name="paymentDate">Payment date for which the validity (current card in use) is calculated. If null, Next workday is used.
        /// <br/>This may be changed to next default payment date without that being a breaking change.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfTaxcardListItem> GetCurrentTaxcardsAsync(System.DateTimeOffset paymentDate, string search, string select, string filter, string orderby, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            if (paymentDate == null)
                throw new System.ArgumentNullException("paymentDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/current/{paymentDate}"
                    urlBuilder_.Append("v03/api/taxcards/current/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(paymentDate.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfTaxcardListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets all available / current taxcards for an employment.
        /// <br/>By default, these taxcards are added by the Employer, but there may also be the latest taxcard added by the Worker.
        /// </summary>
        /// <param name="id">Employent ID</param>
        /// <param name="paymentDate">Payment date for which the validity (current card in use) is calculated. If null, Next workday is used.
        /// <br/>This may be changed to next default payment date without that being a breaking change.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkerCurrentTaxcards> GetTaxcardsForEmploymentAsync(string id, System.DateTimeOffset? paymentDate)
        {
            return GetTaxcardsForEmploymentAsync(id, paymentDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all available / current taxcards for an employment.
        /// <br/>By default, these taxcards are added by the Employer, but there may also be the latest taxcard added by the Worker.
        /// </summary>
        /// <param name="id">Employent ID</param>
        /// <param name="paymentDate">Payment date for which the validity (current card in use) is calculated. If null, Next workday is used.
        /// <br/>This may be changed to next default payment date without that being a breaking change.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkerCurrentTaxcards> GetTaxcardsForEmploymentAsync(string id, System.DateTimeOffset? paymentDate, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/employment/{id}"
                    urlBuilder_.Append("v03/api/taxcards/employment/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (paymentDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paymentDate")).Append('=').Append(System.Uri.EscapeDataString(paymentDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkerCurrentTaxcards>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of all non-terminated employments of the employer and resolves their current taxcards.
        /// <br/>The current taxcards may be for the current year or for next year if the current date is either December or January.
        /// </summary>
        /// <param name="paymentDate">Payment date for which the validity (current card in use) is calculated. If null, Next workday is used.
        /// <br/>This may be changed to next default payment date without that being a breaking change.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfTaxcardListItem> GetCurrentTaxcards2Async(System.DateTimeOffset? paymentDate, string search, string select, string filter, string orderby, bool? count)
        {
            return GetCurrentTaxcards2Async(paymentDate, search, select, filter, orderby, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of all non-terminated employments of the employer and resolves their current taxcards.
        /// <br/>The current taxcards may be for the current year or for next year if the current date is either December or January.
        /// </summary>
        /// <param name="paymentDate">Payment date for which the validity (current card in use) is calculated. If null, Next workday is used.
        /// <br/>This may be changed to next default payment date without that being a breaking change.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfTaxcardListItem> GetCurrentTaxcards2Async(System.DateTimeOffset? paymentDate, string search, string select, string filter, string orderby, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/current"
                    urlBuilder_.Append("v03/api/taxcards/current");
                    urlBuilder_.Append('?');
                    if (paymentDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paymentDate")).Append('=').Append(System.Uri.EscapeDataString(paymentDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfTaxcardListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Calculates the widhholding tax based on a given tax card
        /// </summary>
        /// <param name="id">Identifier of the tax card</param>
        /// <param name="income">New salary or other income, for which the widthholding tax is calculated.</param>
        /// <param name="paymentDate">Date of payment (typically SalaryDate) determines the taxation year.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TaxcardResult> CalculateWithIdAsync(string id, double income, System.DateTimeOffset? paymentDate)
        {
            return CalculateWithIdAsync(id, income, paymentDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Calculates the widhholding tax based on a given tax card
        /// </summary>
        /// <param name="id">Identifier of the tax card</param>
        /// <param name="income">New salary or other income, for which the widthholding tax is calculated.</param>
        /// <param name="paymentDate">Date of payment (typically SalaryDate) determines the taxation year.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TaxcardResult> CalculateWithIdAsync(string id, double income, System.DateTimeOffset? paymentDate, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (income == null)
                throw new System.ArgumentNullException("income");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/calculate/{id}"
                    urlBuilder_.Append("v03/api/taxcards/calculate/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("income")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(income, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (paymentDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paymentDate")).Append('=').Append(System.Uri.EscapeDataString(paymentDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaxcardResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reloads the income log based on the calculations.
        /// <br/>Gets all the paid calculations that are relevant to this taxcard and lists them in the income log.
        /// <br/>This method does not yet save the changes.
        /// </summary>
        /// <param name="taxcard">Taxcard for which the calculations are fetched.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Taxcard> ReloadCalculationsAsync(Taxcard taxcard, string id)
        {
            return ReloadCalculationsAsync(taxcard, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reloads the income log based on the calculations.
        /// <br/>Gets all the paid calculations that are relevant to this taxcard and lists them in the income log.
        /// <br/>This method does not yet save the changes.
        /// </summary>
        /// <param name="taxcard">Taxcard for which the calculations are fetched.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Taxcard> ReloadCalculationsAsync(Taxcard taxcard, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (taxcard == null)
                throw new System.ArgumentNullException("taxcard");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(taxcard, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/reload-calcs/{id}"
                    urlBuilder_.Append("v03/api/taxcards/reload-calcs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Taxcard>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Calculates the widhholding tax based on a given tax card
        /// </summary>
        /// <param name="income">New salary or other income, for which the widthholding tax is calculated.</param>
        /// <param name="taxCard">Tax card based on which the widthholding tax is calculated.
        /// <br/>This method will not connect to database in any way so the taxcard may or may not be stored.</param>
        /// <param name="paymentDate">Date of payment (typically SalaryDate) determines the taxation year.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TaxcardResult> CalculateAsync(double income, Taxcard taxCard, System.DateTimeOffset? paymentDate)
        {
            return CalculateAsync(income, taxCard, paymentDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Calculates the widhholding tax based on a given tax card
        /// </summary>
        /// <param name="income">New salary or other income, for which the widthholding tax is calculated.</param>
        /// <param name="taxCard">Tax card based on which the widthholding tax is calculated.
        /// <br/>This method will not connect to database in any way so the taxcard may or may not be stored.</param>
        /// <param name="paymentDate">Date of payment (typically SalaryDate) determines the taxation year.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TaxcardResult> CalculateAsync(double income, Taxcard taxCard, System.DateTimeOffset? paymentDate, System.Threading.CancellationToken cancellationToken)
        {
            if (income == null)
                throw new System.ArgumentNullException("income");

            if (taxCard == null)
                throw new System.ArgumentNullException("taxCard");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(taxCard, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/calculate"
                    urlBuilder_.Append("v03/api/taxcards/calculate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("income")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(income, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (paymentDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paymentDate")).Append('=').Append(System.Uri.EscapeDataString(paymentDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaxcardResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sets the automatic taxcard on for the given personal ID.
        /// <br/>Method will make the request to tax authorities API immediately.
        /// <br/>NOTE: In current implementation, the income type is always Salary (00024: Palkkaa).
        /// </summary>
        /// <param name="personalId">Personal ID for which the auto taxcard is set.
        /// <br/>If null, the current user is used: Must be a Worker account.</param>
        /// <param name="taxPercentMinimum">A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
        /// <br/>This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created.</param>
        /// <param name="salaryDate">The first salary date for which the taxcard is fetched. If null, uses today.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Taxcard> SetAutoAsync(string personalId, double? taxPercentMinimum, System.DateTimeOffset? salaryDate)
        {
            return SetAutoAsync(personalId, taxPercentMinimum, salaryDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the automatic taxcard on for the given personal ID.
        /// <br/>Method will make the request to tax authorities API immediately.
        /// <br/>NOTE: In current implementation, the income type is always Salary (00024: Palkkaa).
        /// </summary>
        /// <param name="personalId">Personal ID for which the auto taxcard is set.
        /// <br/>If null, the current user is used: Must be a Worker account.</param>
        /// <param name="taxPercentMinimum">A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
        /// <br/>This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created.</param>
        /// <param name="salaryDate">The first salary date for which the taxcard is fetched. If null, uses today.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Taxcard> SetAutoAsync(string personalId, double? taxPercentMinimum, System.DateTimeOffset? salaryDate, System.Threading.CancellationToken cancellationToken)
        {
            if (personalId == null)
                throw new System.ArgumentNullException("personalId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/auto-set"
                    urlBuilder_.Append("v03/api/taxcards/auto-set");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("personalId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(personalId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (taxPercentMinimum != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("taxPercentMinimum")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(taxPercentMinimum, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salaryDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salaryDate")).Append('=').Append(System.Uri.EscapeDataString(salaryDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Taxcard>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Checks automatic taxcards from the Tax authorities API: If the taxcard has been checked within 2 days, does nothing.
        /// <br/>If there are no changes, updates the LastChecked date only. If there are changes, creates a new taxcard container and returns it instead.
        /// </summary>
        /// <param name="taxcardIds">List of taxcards ids that should be checked</param>
        /// <param name="salaryDate">The salary date for which the taxcard is fetched. If null, uses today.</param>
        /// <param name="forceUpdate">If true, skips the 2 day rule and always checks from the tax athorities API.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaxcardListItem>> RefreshAutoAsync(System.Collections.Generic.IEnumerable<string> taxcardIds, System.DateTimeOffset? salaryDate, bool? forceUpdate)
        {
            return RefreshAutoAsync(taxcardIds, salaryDate, forceUpdate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Checks automatic taxcards from the Tax authorities API: If the taxcard has been checked within 2 days, does nothing.
        /// <br/>If there are no changes, updates the LastChecked date only. If there are changes, creates a new taxcard container and returns it instead.
        /// </summary>
        /// <param name="taxcardIds">List of taxcards ids that should be checked</param>
        /// <param name="salaryDate">The salary date for which the taxcard is fetched. If null, uses today.</param>
        /// <param name="forceUpdate">If true, skips the 2 day rule and always checks from the tax athorities API.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaxcardListItem>> RefreshAutoAsync(System.Collections.Generic.IEnumerable<string> taxcardIds, System.DateTimeOffset? salaryDate, bool? forceUpdate, System.Threading.CancellationToken cancellationToken)
        {
            if (taxcardIds == null)
                throw new System.ArgumentNullException("taxcardIds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/taxcards/auto-refresh"
                    urlBuilder_.Append("v03/api/taxcards/auto-refresh");
                    urlBuilder_.Append('?');
                    foreach (var item_ in taxcardIds) { urlBuilder_.Append(System.Uri.EscapeDataString("taxcardIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    if (salaryDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salaryDate")).Append('=').Append(System.Uri.EscapeDataString(salaryDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (forceUpdate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("forceUpdate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(forceUpdate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TaxcardListItem>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TestClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets the user name of the current user. Requires authorization.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetUserNameAsync()
        {
            return GetUserNameAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the user name of the current user. Requires authorization.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetUserNameAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/user-name"
                    urlBuilder_.Append("v03/api/test/user-name");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Basic welcome message with authorization.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> AuthorizationAsync()
        {
            return AuthorizationAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Basic welcome message with authorization.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> AuthorizationAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/authorization"
                    urlBuilder_.Append("v03/api/test/authorization");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test JSON serialization using GET.
        /// </summary>
        /// <param name="values_intValue">Test integer.</param>
        /// <param name="values_doubleValue">Test double.</param>
        /// <param name="values_decimalValue">Test decimal.</param>
        /// <param name="values_stringValue">Test string.</param>
        /// <param name="values_dateTimeValue">Test DateTime.</param>
        /// <param name="values_dateValue">Test Date.</param>
        /// <param name="values_boolValue">Test bool.</param>
        /// <param name="values_objectValue">Test object.</param>
        /// <param name="values_arrayValue">Test array</param>
        /// <param name="values_enumValue">Test enum</param>
        /// <param name="values_dictValue">Free values dictionary.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TestValues> SerializationGetAsync(int? values_intValue, double? values_doubleValue, double? values_decimalValue, string values_stringValue, System.DateTimeOffset? values_dateTimeValue, System.DateTimeOffset? values_dateValue, bool? values_boolValue, object values_objectValue, System.Collections.Generic.IEnumerable<object> values_arrayValue, TestEnum? values_enumValue, object values_dictValue)
        {
            return SerializationGetAsync(values_intValue, values_doubleValue, values_decimalValue, values_stringValue, values_dateTimeValue, values_dateValue, values_boolValue, values_objectValue, values_arrayValue, values_enumValue, values_dictValue, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test JSON serialization using GET.
        /// </summary>
        /// <param name="values_intValue">Test integer.</param>
        /// <param name="values_doubleValue">Test double.</param>
        /// <param name="values_decimalValue">Test decimal.</param>
        /// <param name="values_stringValue">Test string.</param>
        /// <param name="values_dateTimeValue">Test DateTime.</param>
        /// <param name="values_dateValue">Test Date.</param>
        /// <param name="values_boolValue">Test bool.</param>
        /// <param name="values_objectValue">Test object.</param>
        /// <param name="values_arrayValue">Test array</param>
        /// <param name="values_enumValue">Test enum</param>
        /// <param name="values_dictValue">Free values dictionary.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TestValues> SerializationGetAsync(int? values_intValue, double? values_doubleValue, double? values_decimalValue, string values_stringValue, System.DateTimeOffset? values_dateTimeValue, System.DateTimeOffset? values_dateValue, bool? values_boolValue, object values_objectValue, System.Collections.Generic.IEnumerable<object> values_arrayValue, TestEnum? values_enumValue, object values_dictValue, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/serialization"
                    urlBuilder_.Append("v03/api/test/serialization");
                    urlBuilder_.Append('?');
                    if (values_intValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.intValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(values_intValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_doubleValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.doubleValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(values_doubleValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_decimalValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.decimalValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(values_decimalValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_stringValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.stringValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(values_stringValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_dateTimeValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.dateTimeValue")).Append('=').Append(System.Uri.EscapeDataString(values_dateTimeValue.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_dateValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.dateValue")).Append('=').Append(System.Uri.EscapeDataString(values_dateValue.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_boolValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.boolValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(values_boolValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_objectValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.objectValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(values_objectValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_arrayValue != null)
                    {
                        foreach (var item_ in values_arrayValue) { urlBuilder_.Append(System.Uri.EscapeDataString("values.arrayValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (values_enumValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.enumValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(values_enumValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (values_dictValue != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("values.dictValue")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(values_dictValue, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TestValues>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test JSON serialization using POST.
        /// </summary>
        /// <param name="values">Object of test values that is mirrored in serialization.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TestValues> SerializationPostAsync(TestValues values)
        {
            return SerializationPostAsync(values, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test JSON serialization using POST.
        /// </summary>
        /// <param name="values">Object of test values that is mirrored in serialization.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TestValues> SerializationPostAsync(TestValues values, System.Threading.CancellationToken cancellationToken)
        {
            if (values == null)
                throw new System.ArgumentNullException("values");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(values, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/serialization"
                    urlBuilder_.Append("v03/api/test/serialization");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TestValues>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Basic hello world message
        /// </summary>
        /// <param name="message">This text is mirrored in response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> HelloAsync(string message)
        {
            return HelloAsync(message, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Basic hello world message
        /// </summary>
        /// <param name="message">This text is mirrored in response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> HelloAsync(string message, System.Threading.CancellationToken cancellationToken)
        {
            if (message == null)
                throw new System.ArgumentNullException("message");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/hello/{message}"
                    urlBuilder_.Append("v03/api/test/hello/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Throws an exception. Used in testing error handling and alert user interfaces.
        /// </summary>
        /// <param name="type">Type of error to throw</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> UserFriendlyExceptionAsync(ApiTestErrorType type)
        {
            return UserFriendlyExceptionAsync(type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Throws an exception. Used in testing error handling and alert user interfaces.
        /// </summary>
        /// <param name="type">Type of error to throw</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> UserFriendlyExceptionAsync(ApiTestErrorType type, System.Threading.CancellationToken cancellationToken)
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/exceptions/{type}"
                    urlBuilder_.Append("v03/api/test/exceptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the user name of the current user. DOES NOT require authorization.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetUserNameAllowAnonAsync()
        {
            return GetUserNameAllowAnonAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the user name of the current user. DOES NOT require authorization.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetUserNameAllowAnonAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/user-name-allow-anon"
                    urlBuilder_.Append("v03/api/test/user-name-allow-anon");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test a long lasting request.
        /// <br/>Returns the incoming parameter.
        /// <br/>Available in test environment only.
        /// </summary>
        /// <param name="seconds">Delay in seconds.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<int> DelayAsync(int seconds)
        {
            return DelayAsync(seconds, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test a long lasting request.
        /// <br/>Returns the incoming parameter.
        /// <br/>Available in test environment only.
        /// </summary>
        /// <param name="seconds">Delay in seconds.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> DelayAsync(int seconds, System.Threading.CancellationToken cancellationToken)
        {
            if (seconds == null)
                throw new System.ArgumentNullException("seconds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/delay"
                    urlBuilder_.Append("v03/api/test/delay");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("seconds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(seconds, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Basic hello world message
        /// </summary>
        /// <param name="message">This text is mirrored in response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> Hello2Async(string message)
        {
            return Hello2Async(message, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Basic hello world message
        /// </summary>
        /// <param name="message">This text is mirrored in response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> Hello2Async(string message, System.Threading.CancellationToken cancellationToken)
        {
            if (message == null)
                throw new System.ArgumentNullException("message");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/hello"
                    urlBuilder_.Append("v03/api/test/hello");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("message")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Tests the OData parsing as an nonymous method
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ODataAsync(string search, string select)
        {
            return ODataAsync(search, select, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Tests the OData parsing as an nonymous method
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ODataAsync(string search, string select, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/odata"
                    urlBuilder_.Append("v03/api/test/odata");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reports a metrics value for the AppInsight.
        /// </summary>
        /// <param name="name">Name of the metrics.</param>
        /// <param name="value">Value of the metrics.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> MetricsAsync(string name, double value)
        {
            return MetricsAsync(name, value, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reports a metrics value for the AppInsight.
        /// </summary>
        /// <param name="name">Name of the metrics.</param>
        /// <param name="value">Value of the metrics.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> MetricsAsync(string name, double value, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");

            if (value == null)
                throw new System.ArgumentNullException("value");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/metrics/{name}"
                    urlBuilder_.Append("v03/api/test/metrics/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("value")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(value, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Test JSON serialization.
        /// </summary>
        /// <param name="values">Object of test values that is mirrored in serialization.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TestValues> ValuesAsync(TestValues values)
        {
            return ValuesAsync(values, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test JSON serialization.
        /// </summary>
        /// <param name="values">Object of test values that is mirrored in serialization.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TestValues> ValuesAsync(TestValues values, System.Threading.CancellationToken cancellationToken)
        {
            if (values == null)
                throw new System.ArgumentNullException("values");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(values, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/values"
                    urlBuilder_.Append("v03/api/test/values");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TestValues>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a test account and returns test account details.
        /// <br/>Available in test environment only.
        /// </summary>
        /// <param name="onboarding">Onboarding object that defines the test user.
        /// <br/>For Person, fill in names and PersonalId.
        /// <br/>For company, fill in Company id, type and name as well as the above infor for company contact person.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TestAccountInfo> CrudSaveAccountAsync(Onboarding onboarding)
        {
            return CrudSaveAccountAsync(onboarding, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a test account and returns test account details.
        /// <br/>Available in test environment only.
        /// </summary>
        /// <param name="onboarding">Onboarding object that defines the test user.
        /// <br/>For Person, fill in names and PersonalId.
        /// <br/>For company, fill in Company id, type and name as well as the above infor for company contact person.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TestAccountInfo> CrudSaveAccountAsync(Onboarding onboarding, System.Threading.CancellationToken cancellationToken)
        {
            if (onboarding == null)
                throw new System.ArgumentNullException("onboarding");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(onboarding, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/accounts"
                    urlBuilder_.Append("v03/api/test/accounts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TestAccountInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a test message for federation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FederationSampleViewModel> GetFederationSampleAsync(FederationSampleViewModel model)
        {
            return GetFederationSampleAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a test message for federation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FederationSampleViewModel> GetFederationSampleAsync(FederationSampleViewModel model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/federation"
                    urlBuilder_.Append("v03/api/test/federation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FederationSampleViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a test account 3.
        /// <br/>Available in test environment only.
        /// </summary>
        /// <param name="id">Identifier of the account.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAccountAsync(string id)
        {
            return CrudDeleteAccountAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a test account 3.
        /// <br/>Available in test environment only.
        /// </summary>
        /// <param name="id">Identifier of the account.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAccountAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test/accounts/{id}"
                    urlBuilder_.Append("v03/api/test/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestDataClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public TestDataClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Gets taxcard information for a personal Id.
        /// </summary>
        /// <param name="personalId">Personal ID for which the data is fetched.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TaxcardInput> GetTaxcardApiAsync(string personalId)
        {
            return GetTaxcardApiAsync(personalId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets taxcard information for a personal Id.
        /// </summary>
        /// <param name="personalId">Personal ID for which the data is fetched.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TaxcardInput> GetTaxcardApiAsync(string personalId, System.Threading.CancellationToken cancellationToken)
        {
            if (personalId == null)
                throw new System.ArgumentNullException("personalId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test-data/taxcard-api/{personalId}"
                    urlBuilder_.Append("v03/api/test-data/taxcard-api/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(personalId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaxcardInput>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sets the data for taxcards API for a personal Id.
        /// </summary>
        /// <param name="testData">The data that is stored as test data.
        /// <br/>If the taxcard kind is Undefined, the data is cleared for that taxcard. Other kinds will be set as Auto.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TaxcardInput> SetTaxcardApiAsync(TaxcardInput testData)
        {
            return SetTaxcardApiAsync(testData, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the data for taxcards API for a personal Id.
        /// </summary>
        /// <param name="testData">The data that is stored as test data.
        /// <br/>If the taxcard kind is Undefined, the data is cleared for that taxcard. Other kinds will be set as Auto.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TaxcardInput> SetTaxcardApiAsync(TaxcardInput testData, System.Threading.CancellationToken cancellationToken)
        {
            if (testData == null)
                throw new System.ArgumentNullException("testData");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(testData, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/test-data/taxcard-api"
                    urlBuilder_.Append("v03/api/test-data/taxcard-api");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaxcardInput>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecasesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public UsecasesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Usecase> CrudGetNewAsync()
        {
            return CrudGetNewAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Factory method that creates a new object
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Usecase> CrudGetNewAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/usecases/new"
                    urlBuilder_.Append("v03/api/usecases/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Usecase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object.
        /// <br/>The indentifier may in format id@owner if the use case is a public read-only item owned by another owner.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Usecase> CrudGetAsync(string id)
        {
            return CrudGetAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a single object based on identier
        /// </summary>
        /// <param name="id">Unique identifier for the object.
        /// <br/>The indentifier may in format id@owner if the use case is a public read-only item owned by another owner.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Usecase> CrudGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/usecases/{id}"
                    urlBuilder_.Append("v03/api/usecases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Usecase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string id)
        {
            return CrudDeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an object from the storage
        /// </summary>
        /// <param name="id">Unique identifier for the object.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/usecases/{id}"
                    urlBuilder_.Append("v03/api/usecases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets an html view from a usecase.
        /// </summary>
        /// <param name="id">Unique identifier for the object.
        /// <br/>The indentifier may in format id@owner if the use case is a public read-only item owned by another owner.</param>
        /// <param name="ix">Index number of the view if there are several. Default is 0.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> CrudGetViewAsync(string id, int ix)
        {
            return CrudGetViewAsync(id, ix, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets an html view from a usecase.
        /// </summary>
        /// <param name="id">Unique identifier for the object.
        /// <br/>The indentifier may in format id@owner if the use case is a public read-only item owned by another owner.</param>
        /// <param name="ix">Index number of the view if there are several. Default is 0.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> CrudGetViewAsync(string id, int ix, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (ix == null)
                throw new System.ArgumentNullException("ix");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/usecases/{id}/views/{ix}"
                    urlBuilder_.Append("v03/api/usecases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/views/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ix, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PageResultOfUsecaseListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count)
        {
            return ODataSearchAsync(search, select, filter, orderby, top, skip, count, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Performs an OData query to the search index.
        /// </summary>
        /// <param name="search">Performs free-text search to the objects.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PageResultOfUsecaseListItem> ODataSearchAsync(string search, string select, string filter, string orderby, int? top, int? skip, bool? count, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/usecases"
                    urlBuilder_.Append("v03/api/usecases");
                    urlBuilder_.Append('?');
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (select != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$select")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(select, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$filter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderby != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$orderby")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderby, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (top != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$top")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(top, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (skip != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$skip")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("$count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PageResultOfUsecaseListItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Usecase> CrudSaveAsync(Usecase model)
        {
            return CrudSaveAsync(model, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates or creates a new object
        /// </summary>
        /// <param name="model">The object to save.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Usecase> CrudSaveAsync(Usecase model, System.Threading.CancellationToken cancellationToken)
        {
            if (model == null)
                throw new System.ArgumentNullException("model");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(model, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/usecases"
                    urlBuilder_.Append("v03/api/usecases");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Usecase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public VersionClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get list of available versions.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VersionInfo>> ListVersionsAsync(string apiType, string id)
        {
            return ListVersionsAsync(apiType, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of available versions.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VersionInfo>> ListVersionsAsync(string apiType, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (apiType == null)
                throw new System.ArgumentNullException("apiType");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/{apiType}/{id}/versions"
                    urlBuilder_.Append("v03/api/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(apiType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VersionInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get specific version of the resource
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiCrudObject> GetVersionAsync(string apiType, string id, string versionId)
        {
            return GetVersionAsync(apiType, id, versionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get specific version of the resource
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiCrudObject> GetVersionAsync(string apiType, string id, string versionId, System.Threading.CancellationToken cancellationToken)
        {
            if (apiType == null)
                throw new System.ArgumentNullException("apiType");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (versionId == null)
                throw new System.ArgumentNullException("versionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/{apiType}/{id}/versions/{versionId}"
                    urlBuilder_.Append("v03/api/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(apiType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiCrudObject>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public WorkflowClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://secure.salaxy.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Returns workflow data for the given API object.
        /// </summary>
        /// <param name="apiType">API type for the object: calculations, payroll, workers</param>
        /// <param name="id">Unique identifier for the API object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkflowData> CrudGetAsync(string apiType, string id)
        {
            return CrudGetAsync(apiType, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns workflow data for the given API object.
        /// </summary>
        /// <param name="apiType">API type for the object: calculations, payroll, workers</param>
        /// <param name="id">Unique identifier for the API object</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowData> CrudGetAsync(string apiType, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (apiType == null)
                throw new System.ArgumentNullException("apiType");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/{apiType}/{id}/workflows"
                    urlBuilder_.Append("v03/api/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(apiType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/workflows");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Adds or updates workflow event for the given API object.
        /// </summary>
        /// <param name="apiType">API type for the object: calculations, payroll, workers</param>
        /// <param name="id">Unique identifier for the API object</param>
        /// <param name="workflowEvent">Event to add or update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkflowData> CrudSaveAsync(string apiType, string id, WorkflowEvent workflowEvent)
        {
            return CrudSaveAsync(apiType, id, workflowEvent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds or updates workflow event for the given API object.
        /// </summary>
        /// <param name="apiType">API type for the object: calculations, payroll, workers</param>
        /// <param name="id">Unique identifier for the API object</param>
        /// <param name="workflowEvent">Event to add or update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowData> CrudSaveAsync(string apiType, string id, WorkflowEvent workflowEvent, System.Threading.CancellationToken cancellationToken)
        {
            if (apiType == null)
                throw new System.ArgumentNullException("apiType");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (workflowEvent == null)
                throw new System.ArgumentNullException("workflowEvent");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(workflowEvent, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/{apiType}/{id}/workflows"
                    urlBuilder_.Append("v03/api/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(apiType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/workflows");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns workflow event for the given API object and event id.
        /// </summary>
        /// <param name="apiType">API type for the object: calculations, payroll, workers</param>
        /// <param name="id">Unique identifier for the API object</param>
        /// <param name="eventId">Unique id for the event.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorkflowEvent> CrudGetEventAsync(string apiType, string id, string eventId)
        {
            return CrudGetEventAsync(apiType, id, eventId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns workflow event for the given API object and event id.
        /// </summary>
        /// <param name="apiType">API type for the object: calculations, payroll, workers</param>
        /// <param name="id">Unique identifier for the API object</param>
        /// <param name="eventId">Unique id for the event.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowEvent> CrudGetEventAsync(string apiType, string id, string eventId, System.Threading.CancellationToken cancellationToken)
        {
            if (apiType == null)
                throw new System.ArgumentNullException("apiType");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (eventId == null)
                throw new System.ArgumentNullException("eventId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/{apiType}/{id}/workflows/events/{eventId}"
                    urlBuilder_.Append("v03/api/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(apiType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/workflows/events/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowEvent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes the workflow event from the given API object.
        /// </summary>
        /// <param name="apiType">API type for the object: calculations, payroll, workers</param>
        /// <param name="id">Unique identifier for the API object</param>
        /// <param name="eventIdOrType">Id or type of the event to delete.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CrudDeleteAsync(string apiType, string id, string eventIdOrType)
        {
            return CrudDeleteAsync(apiType, id, eventIdOrType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes the workflow event from the given API object.
        /// </summary>
        /// <param name="apiType">API type for the object: calculations, payroll, workers</param>
        /// <param name="id">Unique identifier for the API object</param>
        /// <param name="eventIdOrType">Id or type of the event to delete.</param>
        /// <returns>Returns string: 'Object deleted'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CrudDeleteAsync(string apiType, string id, string eventIdOrType, System.Threading.CancellationToken cancellationToken)
        {
            if (apiType == null)
                throw new System.ArgumentNullException("apiType");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (eventIdOrType == null)
                throw new System.ArgumentNullException("eventIdOrType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v03/api/{apiType}/{id}/workflows/{eventIdOrType}"
                    urlBuilder_.Append("v03/api/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(apiType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventIdOrType, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Absences for a single Worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerAbsences
    {
        /// <summary>
        /// Account ID for the worker whose absences are recorded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerId { get; set; }

        /// <summary>
        /// The employment relation id for the worker whose absences are recorded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Collection of absence periods.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AbsencePeriod> Periods { get; set; }

        /// <summary>
        /// Basic information for the Worker. 
        /// <br/>Automatically updated upon save based on WorkerId.
        /// <br/>Mainly for the listings etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSnapshot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar WorkerSnapshot { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Period of absence
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbsencePeriod
    {
        /// <summary>
        /// Period for the absance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Cause / type of the absence
        /// </summary>
        [Newtonsoft.Json.JsonProperty("causeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AbsenceCauseCode? CauseCode { get; set; }

        /// <summary>
        /// If true, the absence is paid by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPaid { get; set; }

        /// <summary>
        /// If true, annual leaves are accrued from the absence. If false, these days are deducted from the accrual.
        /// <br/>By default, you may leave this null and it always follows the IsPaid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHolidayAccrual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHolidayAccrual { get; set; }

        /// <summary>
        /// Amount of salary that is paid for the absense.
        /// <br/>Currently not in use: Would be used in Incomes Register integration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This is a pass-through string that is passed to the result calculations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

    }

    /// <summary>
    /// Defines an avatar for an account, profile etc. - mainly the image that should be shown, names and short description
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Avatar
    {
        /// <summary>
        /// Entity type: person/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// First name or company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name, for companies, this should be null
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Display name. For a person this is 'FirstName LastName' (auto-created).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Sortable name for ordered lists etc. For a person this is 'LastName, FirstName' (auto-created).
        /// <br/>Depending on the data storage, this may be all-lowercase for easier sorting and search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortableName { get; set; }

        /// <summary>
        /// Type of the Avatar picture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pictureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AvatarPictureType? PictureType { get; set; }

        /// <summary>
        /// Color - currently only used by type Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Initials - currently only used by type Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Initials { get; set; }

        /// <summary>
        /// URL of the picture if specified as picture (null in a case of type Icon)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Short description of the user. 
        /// <br/>This may be overriden by a context specific value by the business logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Describes the range of dates from start to end and the number of days in between.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRange
    {
        /// <summary>
        /// Start date of the period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// End date of the period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

        /// <summary>
        /// Number of days in the range.
        /// <br/>Depending of the context, this may be mathematical (end - start) or 
        /// <br/>explicitly specified (typically working days).
        /// <br/>Typically an integer, and calculations and UI's may choose to round it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daysCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DaysCount { get; set; }

        /// <summary>
        /// The collection of days contained in the DateRange if specified by the user.
        /// <br/>Alternative to DaysCount. If set, should also set DaysCount for backward compatibility.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.DateTimeOffset> Days { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfApiListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// The line item class for search and listing results.
    /// <br/>Use this class for building user interfaces.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiListItem
    {
        /// <summary>
        /// The payload type of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiListItemType? Type { get; set; }

        /// <summary>
        /// List item type of the item if the item supports a custom OData interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListType { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Object that represents a Salaxy account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountInIndex
    {
        /// <summary>
        /// Avatar for the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Official id of the person or company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Bank account number (IBAN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

    }

    /// <summary>
    /// An account for a Person - can be both Employer and Worker
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonAccount
    {
        /// <summary>
        /// Information about the verification of the account. 
        /// <br/>NOTE that this object may not be present in many method calls - this is because it contains confidential information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identity Identity { get; set; }

        /// <summary>
        /// Type of the last login - the user role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastLoginAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WebSiteUserRole? LastLoginAs { get; set; }

        /// <summary>
        /// Contact verification pin for securing contact address changes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactVerificationPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactVerificationPin { get; set; }

        /// <summary>
        /// Entity type of the account.
        /// <br/>Type PersonCreatedByEmployer means that the Worker has not yet signed into the system and there may be multiple instances of the same logical person (Official ID) - one for each employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// If true the object Account is and Employer account - it has the EmployerInfo object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEmployer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmployer { get; set; }

        /// <summary>
        /// If true the object Account is and Worker account - it has the WorkerInfo object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWorker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWorker { get; set; }

        /// <summary>
        /// If true, the account has been verified. Typically this means a digitally signed contract.
        /// <br/>This means that the account also has an Identity object.
        /// <br/>However, as the Identity object contains confidential information, it is not necessarily present in all method calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Avatar is the visual representation of the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Contact information for the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Language of the person/company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

        /// <summary>
        /// Service model for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceModelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceModelId { get; set; }

        /// <summary>
        /// Workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Identity is the official identity of an actor.
    /// <br/>This part is not freely editable as changing it requires signature or some other means.
    /// <br/>Identity is also often fetched from external sources such as govenment registries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identity
    {
        /// <summary>
        /// This is an official identifier of the actor:
        /// <br/>Finnish HETU (Soc. sec. number) for a Person or Y-tunnus (Company ID for a company or association)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// This is an official name of the actor.
        /// <br/>It originates from the YTJ or Bank authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialName { get; set; }

        /// <summary>
        /// First name OR company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name
        /// <br/>Available only to real persons (as opposed to companies).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// The latest authorization contract that is the bases for this Identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationContract Contract { get; set; }

        /// <summary>
        /// Tha bank account number of the Worker - in Iban format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

        /// <summary>
        /// Indicates whether the principal user of the customer is a politically exposed person or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPep", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPep { get; set; }

        /// <summary>
        /// Mainly for company accounts, but in special cases for Persons,
        /// <br/>this is the main Contact party and usually the signer for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractParty PrimaryContact { get; set; }

        /// <summary>
        /// List of roles which this account is member of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<Role> Roles { get; set; }

        /// <summary>
        /// Latest contact, bank account or name update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identityUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? IdentityUpdatedAt { get; set; }

        /// <summary>
        /// Latest KYC update, if done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kycUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? KycUpdatedAt { get; set; }

    }

    /// <summary>
    /// Common contact information object for Person, Company, Location etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// Contact e-mail address. Always lower invariant, trimmed and empty string set to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Street address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// City or community (postitoimipaikka)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// This is the ISO code for country.
        /// <br/>Currently, it should always be "fi".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

    }

    /// <summary>
    /// Defines the data that IWorkflowItem must provide.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowData
    {
        /// <summary>
        /// Workflow events for the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowEvent> Events { get; set; }

    }

    /// <summary>
    /// Contract / authorization document that is the bases for Salaxy acting in behalf of this account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationContract
    {
        /// <summary>
        /// Time when the contract was signed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SignedAt { get; set; }

        /// <summary>
        /// If true, there is a valid authorization - the account has been validated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSigned { get; set; }

        /// <summary>
        /// Type of the authorization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AuthorizationType? AuthorizationType { get; set; }

        /// <summary>
        /// A person or other party that authorized the current person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authority AuthorizedBy { get; set; }

    }

    /// <summary>
    /// A signing party in a contract.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractParty
    {
        /// <summary>
        /// Identifier for the party: Currently always an account, but may be an external ID later.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Avatar for the Party. 
        /// <br/>Note that this is not automatically fetched by all methods: Especially when IsSelf is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Contact information - note that for most signatures, only E-mail and phone number are required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// True if Profile is the current Authorization.
        /// <br/>If set to true, will set current Authorization as this contract party.
        /// <br/>If set to false AND was previously true, will set the Profile properties null (unless explicitly set to something else)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSelf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSelf { get; set; }

        /// <summary>
        /// Official ID if needed in signature
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Role of the person - justification for authorization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        /// <summary>
        /// True if the person has signed the contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSigned { get; set; }

        /// <summary>
        /// Reserved for cases where there are several signees and each has a separate signature document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureUrl { get; set; }

        /// <summary>
        /// Bank account IBAN number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban { get; set; }

        /// <summary>
        /// Party type (Person or Prospect)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractPartyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ContractPartyType? ContractPartyType { get; set; }

        /// <summary>
        /// If true, contact is an employer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEmployer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmployer { get; set; }

    }

    /// <summary>
    /// Event in the workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowEvent
    {
        /// <summary>
        /// Event-provider specific identifier for the event.
        /// <br/>For deletable events, this should identify , but do NOT trust this to be 100% unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Type of the event. This typically maps to parent-object specific enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Message for backoffice purposes from the User or system that created the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// User Interface styling of the event: Indicates the severity for the end-user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public BootstrapStyle? Ui { get; set; }

        /// <summary>
        /// Features for this event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<WorkflowEventFeatures> Features { get; set; }

        /// <summary>
        /// UTC time for when the event occured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Time { get; set; }

        /// <summary>
        /// User or system that created the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        /// <summary>
        /// Credential of the user which is responsible of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignedTo { get; set; }

        /// <summary>
        /// Record attached to this event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("record", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Record { get; set; }

    }

    /// <summary>
    /// A person or other party that authorized the current person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Authority
    {
        /// <summary>
        /// Name of the authority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Telephone number of the person. This is currently optional.
        /// <br/>Idea is to send SMS invitations in some scenarios.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// E-mail of the person. This is currently not used, but is expected to be used in the future. 
        /// <br/>So fill it in as it was required unless you have very compelling reasons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Finnish Person ID is the key to signature. This is currently always required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// The Palkkaus.fi Account ID. This is optional and should not be set if the ID is the same as the target account / Person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Date for the authorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AuthorizedAt { get; set; }

    }

    /// <summary>
    /// A company account - note that this can also be an association etc. - something that has a Company ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyAccount
    {
        /// <summary>
        /// Information about the verification of the account. 
        /// <br/>NOTE that this object may not be present in many method calls - this is because it contains confidential information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identity Identity { get; set; }

        /// <summary>
        /// High level company type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CompanyType? CompanyType { get; set; }

        /// <summary>
        /// Entity type of the account.
        /// <br/>Type PersonCreatedByEmployer means that the Worker has not yet signed into the system and there may be multiple instances of the same logical person (Official ID) - one for each employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// If true the object Account is and Employer account - it has the EmployerInfo object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEmployer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmployer { get; set; }

        /// <summary>
        /// If true the object Account is and Worker account - it has the WorkerInfo object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWorker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWorker { get; set; }

        /// <summary>
        /// If true, the account has been verified. Typically this means a digitally signed contract.
        /// <br/>This means that the account also has an Identity object.
        /// <br/>However, as the Identity object contains confidential information, it is not necessarily present in all method calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Avatar is the visual representation of the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Contact information for the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Language of the person/company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

        /// <summary>
        /// Service model for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceModelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceModelId { get; set; }

        /// <summary>
        /// Workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Represents a user credential in session:
    /// <br/>This credential is typically based on Claims and is availble without going to database.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SessionUserCredential
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Unique identitier for the user ID coming from the Auth0 database: 
        /// <br/>'[MethodText]|[ProviderId]', e.g. 'facebook|12345678901234567'
        /// <br/>(Number may contain more characters - not sure for the exact cahracters count)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Avatar object that contains the visual reresentation of the User account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// E-mail address if provided by the authentication provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// The ultimate authentication provider that authenticated the user, e.g. Facebook, Google.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authenticationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AuthenticationMethod? AuthenticationMethod { get; set; }

    }

    /// <summary>
    /// User certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Certificate
    {
        /// <summary>
        /// Certificate thumbprint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Certificate bytes Used in returning the certificate to the user as PFX or ZIP.
        /// <br/>Not persisted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Bytes { get; set; }

        /// <summary>
        /// End user description for the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Password for issuing a new certificate. Not persisted.
        /// <br/>Also used for passing the CSR in request if it is passed as Base64 encoded text. Not persisted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Avatar for authorized account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizedAvatar
    {
        /// <summary>
        /// Optional ID for partner authorization.
        /// <br/>Used to restrict the authorization based on Partner data (typically user account, role etc.).
        /// <br/>Current implementation compares this to partnerAccountId and allows acces only if the two match.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerKey { get; set; }

        /// <summary>
        /// The time when the authorization was done
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AuthorizedAt { get; set; }

        /// <summary>
        /// Scope for the account authorization.
        /// <br/>The value of the scope  is expressed as a list of space-delimited, case-sensitive strings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }

        /// <summary>
        /// Entity type: person/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// First name or company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name, for companies, this should be null
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Display name. For a person this is 'FirstName LastName' (auto-created).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Sortable name for ordered lists etc. For a person this is 'LastName, FirstName' (auto-created).
        /// <br/>Depending on the data storage, this may be all-lowercase for easier sorting and search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortableName { get; set; }

        /// <summary>
        /// Type of the Avatar picture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pictureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AvatarPictureType? PictureType { get; set; }

        /// <summary>
        /// Color - currently only used by type Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Initials - currently only used by type Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Initials { get; set; }

        /// <summary>
        /// URL of the picture if specified as picture (null in a case of type Icon)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Short description of the user. 
        /// <br/>This may be overriden by a context specific value by the business logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Account - either Person or Company - is a juridical entity Paying or receiving salaries, making contracts etc.
    /// <br/>It may be related to zero, one or multiple UserAccounts/Credentials.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountBase
    {
        /// <summary>
        /// Entity type of the account.
        /// <br/>Type PersonCreatedByEmployer means that the Worker has not yet signed into the system and there may be multiple instances of the same logical person (Official ID) - one for each employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// If true the object Account is and Employer account - it has the EmployerInfo object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEmployer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmployer { get; set; }

        /// <summary>
        /// If true the object Account is and Worker account - it has the WorkerInfo object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWorker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWorker { get; set; }

        /// <summary>
        /// If true, the account has been verified. Typically this means a digitally signed contract.
        /// <br/>This means that the account also has an Identity object.
        /// <br/>However, as the Identity object contains confidential information, it is not necessarily present in all method calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Avatar is the visual representation of the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Contact information for the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Language of the person/company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

        /// <summary>
        /// Service model for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceModelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceModelId { get; set; }

        /// <summary>
        /// Workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Provides information about a new issued certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuedCertificate
    {
        /// <summary>
        /// Certificate thumbprint: A unique identifier for the created certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Certificate bytes when the certifcate is a file. Currently PFX or ZIP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Bytes { get; set; }

        /// <summary>
        /// Certificate / public key as text (PEM) if provided by the generation process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cert { get; set; }

        /// <summary>
        /// Private key as text (PEM) if provided by the generation process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

    }

    /// <summary>
    /// Defines an accounting target (system), CoA and ruleset that maps the calculation to the CoA (Chart of Accounts).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingTarget
    {
        /// <summary>
        /// Information and configuration related to the system where the accounting data is to be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingTargetInfo Info { get; set; }

        /// <summary>
        /// The rule set that defines the Chart of Accounts and the mapping of salary payment to it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingRuleSet RuleSet { get; set; }

        /// <summary>
        /// Readonly workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Specifies the general information of the behavior of Accounting target:
    /// <br/>Especially the channel and the related properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingTargetInfo
    {
        /// <summary>
        /// Basic information and visualization for the accounting target.
        /// <br/>Avatar provides the visualization and the name for the target.
        /// <br/>E-mail may be used in sending of the material and telephone in contacting the accounting target.
        /// <br/>IBAN number has no use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex Target { get; set; }

        /// <summary>
        /// Channel is the technical transport mechanism to accounting software
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AccountingChannel? Channel { get; set; }

        /// <summary>
        /// The default export method for exports: whether automatic or manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ExportMethod? Method { get; set; }

        /// <summary>
        /// If specified, defines the available methods in manual exports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<ExportMethod> AvailableMethods { get; set; }

        /// <summary>
        /// The default export format for tabular (csv, excel) data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Accounting channel specific data (default settings) for the accounting target setup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Ruleset containing required tabular logic (rules) and accounts for creating accounting entries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingRuleSet
    {
        /// <summary>
        /// Template to which this ruleset is based on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Accounts which are used in the tabular logic for creating accounting entries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountingRuleSetAccount> Accounts { get; set; }

        /// <summary>
        /// Optional target Chart of Accounts: All the accounts in the target system, not just the ones in use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetCoA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountingRuleSetAccount> TargetCoA { get; set; }

        /// <summary>
        /// Tabular logic for creating accounting entries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountingRuleSetRow> Rows { get; set; }

    }

    /// <summary>
    /// Single account with number, grouping and default text.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingRuleSetAccount
    {
        /// <summary>
        /// Id for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Boolean indicating if the account is non-removable template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account { get; set; }

        /// <summary>
        /// Text for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// Contains a single row of the tabular logic for creating accounting entries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingRuleSetRow
    {
        /// <summary>
        /// Id for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Entry group: income type or total type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryCodeGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryCodeGroup { get; set; }

        /// <summary>
        /// A single code in the code group: single income type code or total row type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryCode { get; set; }

        /// <summary>
        /// Boolean indicating if the row is non-removable template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Boolean indicating if the row is in use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Boolean indicating whether the system should make an accounting entry based on this row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsIncluded { get; set; }

        /// <summary>
        /// Id of the debit account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebitId { get; set; }

        /// <summary>
        /// Grouping text for the account.
        /// <br/>If the account has a grouping defined, it will be listed as a separate row group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debitGrouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebitGrouping { get; set; }

        /// <summary>
        /// Id of the credit account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditId { get; set; }

        /// <summary>
        /// Grouping text for the account.
        /// <br/>If the account has a grouping defined, it will be listed as a separate row group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditGrouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditGrouping { get; set; }

        /// <summary>
        /// Additional flags for directing the logic for creating accounting entry based on given entries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfAccountingTargetListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountingTargetListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of Accounting targets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingTargetListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AccountingTargetStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingTargetData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Accounting Target specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingTargetData
    {
        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Channel is the technical transport mechanism to accounting software
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AccountingChannel? Channel { get; set; }

        /// <summary>
        /// The default export method for exports: whether automatic or manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ExportMethod? Method { get; set; }

        /// <summary>
        /// Available methods in manual exports (comma separated string).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvailableMethods { get; set; }

        /// <summary>
        /// The default export format for tabular (csv, excel) data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Template to which this is based on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateId { get; set; }

    }

    /// <summary>
    /// Request model for Assertion demo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssertionDemoCertificateRequest
    {
        /// <summary>
        /// Certificate bytes as Base64String
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateBytes { get; set; }

        /// <summary>
        /// Certificate password for signing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Account to impersonate as: Will be set as sub in the token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>
        /// Potential proxy (partner) account that is in between the current user and the subject.
        /// <br/>Will be set as salaxy_proxy_act in the token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proxyActor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProxyActor { get; set; }

        /// <summary>
        /// E-mail for the user / credential that is using the system.
        /// <br/>Will be set as salaxy_user.email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserEmail { get; set; }

    }

    /// <summary>
    /// Response model for Assertion demo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssertionDemoCertificateResponse
    {
        /// <summary>
        /// Token as string
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        /// <summary>
        /// Token decoded for deisplay purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tokenDecoded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TokenDecoded { get; set; }

        /// <summary>
        /// If there is an error creating hte certificate, it is displayed here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

    }

    /// <summary>
    /// Contains lists of beneficial owners and other beneficiaries of the company.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BeneficialOwners
    {
        /// <summary>
        /// Additional info about the owned company, e.g. the total number of shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownedCompanyDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OwnedCompanyInfo OwnedCompanyDetails { get; set; }

        /// <summary>
        /// List of beneficial owners of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficialOwner> Owners { get; set; }

        /// <summary>
        /// List of other beneficiaries than beneficial owners of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Beneficiary> Beneficiaries { get; set; }

        /// <summary>
        /// The workflow data for manual editing and approval purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Contains additional info of the owned company.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnedCompanyInfo
    {
        /// <summary>
        /// Total count of shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNumberOfShares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalNumberOfShares { get; set; }

    }

    /// <summary>
    /// Name and ids of the owner and the number/percent of shares.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BeneficialOwner
    {
        /// <summary>
        /// Owned number of shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfShares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumberOfShares { get; set; }

        /// <summary>
        /// Owned percent of shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentOfShares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PercentOfShares { get; set; }

        /// <summary>
        /// Address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// Avatar for the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Official id of the person or company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Bank account number (IBAN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

    }

    /// <summary>
    /// Other beneficiary of the company than beneficial owner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Beneficiary
    {
        /// <summary>
        /// Nationality of the beneficiary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nationality { get; set; }

        /// <summary>
        /// Avatar for the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Official id of the person or company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Bank account number (IBAN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

    }

    /// <summary>
    /// Calculation is the most important model in the Palkkaus.fi API.
    /// <br/>We suggest you open the separately provided documentation and especially the class diagram to understand the whole model in detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Calculation
    {
        /// <summary>
        /// The employer object for this calculation.
        /// <br/>Typically, you do not need to set this before the actual payment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcEmployer Employer { get; set; }

        /// <summary>
        /// The Worker (employee) that has performed the work.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorker Worker { get; set; }

        /// <summary>
        /// Information about the workflow and state of the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorkflow Workflow { get; set; }

        /// <summary>
        /// The main salary element. 
        /// <br/>Alternatively the salary can be set in the Rows object - this will be the only way to set multiple salary rows (not yet supported).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Salary Salary { get; set; }

        /// <summary>
        /// Set of rows that make up the salary calculation:
        /// <br/>Expenses, Benefits, deductions etc. Note that side costs are not rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDefinedRow> Rows { get; set; }

        /// <summary>
        /// DEPRECIATED: Usecase will be replacing this functionality in a next major release.
        /// <br/>The Framework Agreement (TES) parameters that affect the framework based side costs etc. of this calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("framework", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TesParameters Framework { get; set; }

        /// <summary>
        /// A usecase for creating and editing salary calculations.
        /// <br/>In practice, a usecase is either a user interface or a microservice that provides a salary calculation
        /// <br/>and it may be implemented outside Salaxy.
        /// <br/>Provides the possibility to store useacase specific data as part of calculation.
        /// <br/>NOTE: This functionality will replace Framework property in a next major release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// The results of the calculation. In the API, this is a read-only object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationResult Result { get; set; }

        /// <summary>
        /// Information about the work that is not directly related to calculating salary and expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcInfo Info { get; set; }

        /// <summary>
        /// Sharing of the calculation. This object cannot be modified directly, 
        /// <br/>use specialized methods in Calculations service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationSharing Sharing { get; set; }

        /// <summary>
        /// Contains calculation specific data for accounting (both cost and financial accounting).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationAccounting Accounting { get; set; }

        /// <summary>
        /// Worktime data that is stored as part of Salary calculation:
        /// <br/>work days, absences, holidays and holiday accrual.
        /// <br/>In the future may also contain relevant part of timesheet data (work hours).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worktime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorktime Worktime { get; set; }

        /// <summary>
        /// Readonly workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Employer of a calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcEmployer
    {
        /// <summary>
        /// Display image information and type of employer.
        /// <br/>NOTE: Recalculate-method retains the values for display purposes if AccountId or IsSelf is not set.
        /// <br/>This is mainly for demo and testing in anonymous mode.
        /// <br/>However, in storage methods, the value is reset based on values of AccountId or IsSelf
        /// <br/>even if they are not set: Anything stored in Avatar will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// The Palkkaus.fi Account identifier for the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// True if Profile is the current Authorization.
        /// <br/>If set to true, will set current Authorization as this contract party.
        /// <br/>This overrides any value in AccountId, so be sure to switch this back to false if this is switchable.
        /// <br/>Setting to False does not have any immediate effect.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSelf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSelf { get; set; }

        /// <summary>
        /// Current address of the employer.
        /// <br/>Please note that this is a read only field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Official id of the person or company.
        /// <br/>Please note that this is a read only field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

    }

    /// <summary>
    /// Worker object for the current calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcWorker
    {
        /// <summary>
        /// Palkkaus.fi Account Id for the worker.
        /// <br/>Alternatively you can set the Payment data with the required infromation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Employment Id for the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Data that is needed for salary payment.
        /// <br/>This object may be null if AccountId has been set. 
        /// <br/>Also, if AccountId has been set, these properties will be ignored: 
        /// <br/>The Worker will decide on payment properties herself.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorkerPaymentData PaymentData { get; set; }

        /// <summary>
        /// Display image and properties of the Worker. 
        /// <br/>Based on either the AccountId or PaymentData
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// True if Profile is the currently Account
        /// <br/>If set to true, will set current Account as this contract party.
        /// <br/>This overrides any value in AccountId, so be sure to switch this back to false if this is switchable.
        /// <br/>Setting to False does not have any immediate effect.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSelf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSelf { get; set; }

        /// <summary>
        /// Date of birth for the Worker - this affects the side costs. 
        /// <br/>Please also set the DateOfBirthAccuracy, if you set this property.
        /// <br/>If PaymentData or AccountId lead to a valid Social security number, it will override any age set here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfBirth { get; set; }

        /// <summary>
        /// Accuracy of the date of birth
        /// <br/>If PaymentData or AccountId lead to a valid Social security number, it will override any age set here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirthAccuracy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public DateOfBirthAccuracy? DateOfBirthAccuracy { get; set; }

        /// <summary>
        /// New Widthholding tax logic that is based on separately stored tax cards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcTax Tax { get; set; }

        /// <summary>
        /// Current address of the worker.
        /// <br/>Please note that this is a read only field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

    }

    /// <summary>
    /// Defines the properties of salary calculation workflow 
    /// <br/>- typically the workflow from draft to Payment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcWorkflow
    {
        /// <summary>
        /// Status of the calculation from Draft to PaymentSucceeded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationStatus? Status { get; set; }

        /// <summary>
        /// Time when this calculation was paid (if it was paid) to Palkkaus service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paidAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PaidAt { get; set; }

        /// <summary>
        /// Time when the salary was paid by Palkkaus service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPaidAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryPaidAt { get; set; }

        /// <summary>
        /// The estimated date when the salary is withdrawable by the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// The requested date for the SalaryDate from the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedSalaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RequestedSalaryDate { get; set; }

        /// <summary>
        /// Defines the re-setting of the salary date in the calculation re-calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDateKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SalaryDateKind? SalaryDateKind { get; set; }

    }

    /// <summary>
    /// Defines the main salary that is the bases for the calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Salary
    {
        /// <summary>
        /// Type of the salary being calculated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SalaryKind Kind { get; set; }

        /// <summary>
        /// Amount of e.g. hours, months for the salary. Default is 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Price of one unit - e.g. hour, month.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        /// <summary>
        /// E.g. hour, month. Typically this parameter can be left empty/null and the unit is set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        /// <summary>
        /// Optional message for the salary row that is shown in reports. If null, will be set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// If set to true, will calculate the household deduction. Applies only to natural persons - as oppsed to companies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHouseholdDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHouseholdDeductible { get; set; }

        /// <summary>
        /// If tax IsHouseholdDeductible is set to true, please also select the category (categories). 
        /// <br/>Note that "OwnPropety" is a default, it does not need to be set: Only set RelativesProperty if necessary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxDeductionCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxDeductionWorkCategories? TaxDeductionCategories { get; set; }

    }

    /// <summary>
    /// This is a user defined calculation row as opposed to CalculationRow that may 
    /// <br/>be either based on a user defined row or generated by the system based on e.g. TES parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDefinedRow
    {
        /// <summary>
        /// Zero based row index that can be used to match the row to result rows or when deleting.
        /// <br/>NOTE: The Row ID is given values on the fly so setting this will not have any effect at the moment.
        /// <br/>It may reorder the entries in later implementations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RowIndex { get; set; }

        /// <summary>
        /// Logical type of the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowType? RowType { get; set; }

        /// <summary>
        /// Description text of the row that is shown in reports. If null, will be set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count for the row - default is one
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price for the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Unit for the row. Guessed based on the RowType and count, but you are better off setting it to be sure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowUnit? Unit { get; set; }

        /// <summary>
        /// Source of the calculation row - affects how the row is handled in editing / recalculation scenarios.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowSource? Source { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This is a pass-through string that is passed to the result calculations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// Accounting related data for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RowAccounting Accounting { get; set; }

        /// <summary>
        /// Period if different than the Period of calculation.
        /// <br/>Will be reported to the National Incomes registry, but also affect some other calculations.
        /// <br/>Note that this property may be (and by default is) null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Captures the collection of parameters that different Framework agreements (TES) have.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TesParameters
    {
        /// <summary>
        /// Type of the work framework
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public FrameworkAgreement? Type { get; set; }

        /// <summary>
        /// Subtype when one framework has several options
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TesSubtype? SubType { get; set; }

        /// <summary>
        /// Marker that the payments defined by framework agreement are included in the salary (will not be added by the calculation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTesIncludedInSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTesIncludedInSalary { get; set; }

        /// <summary>
        /// Number of days may affect calculation of different payments calculated based on a Framework agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfDays { get; set; }

        /// <summary>
        /// Travel expences per day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyTravelExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DailyTravelExpenses { get; set; }

        /// <summary>
        /// The amount of kilometers travelled by day - used to define the amount of travel expenses in aomse framework agreements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyTravelExpensesKm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DailyTravelExpensesKm { get; set; }

        /// <summary>
        /// Daily expenses amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DailyExpenses { get; set; }

        /// <summary>
        /// If true will calculate the Finnish child care subsidy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isYksityisenHoidonTuki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsYksityisenHoidonTuki { get; set; }

        /// <summary>
        /// Amount of Finnish child care subsidy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yksityisenHoidonTukiAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YksityisenHoidonTukiAmount { get; set; }

    }

    /// <summary>
    /// A usecase for creating and editing salary calculations and other .
    /// <br/>In practice, a usecase is either a user interface or a microservice that provides the bases for the object.
    /// <br/>Provides the possibility to store useacase specific data as part of object.
    /// <br/>NOTE: For Calculations, this functionality will replace TesParameters in the 3.0 version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecaseData
    {
        /// <summary>
        /// Key for the usecase based on which it is resolved. 
        /// <br/>Later, this may resolve to a user interface, microservice or a to manifest registering one.
        /// <br/>For now, just use a unique string starting with a domain you own.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// A short label of that can be shown to the end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Optional description of the use case for the end user.
        /// <br/>Shown in detail views when explaining the logic of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationResult
    {
        /// <summary>
        /// Calculation totals that are common to both Worker and Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalCalculationDTO Totals { get; set; }

        /// <summary>
        /// Rows that are compatible with Incomes Register (tulorekisteri) process.
        /// <br/>These are available only for calculations paid after 7.2.2019 (TODO: estimation as of writing).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irRows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IrRow> IrRows { get; set; }

        /// <summary>
        /// The calculation from the Employer point-of-view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployerCalculationDTO EmployerCalc { get; set; }

        /// <summary>
        /// The calculation from the Worker point-of-view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerCalculationDTO WorkerCalc { get; set; }

        /// <summary>
        /// The result rows. Note that this collection also contains the main Salary entry as one of the rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResultRow> Rows { get; set; }

        /// <summary>
        /// Responsibilities of Employer and parameters that affect those responsibilities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsibilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IEmployerResponsibilities Responsibilities { get; set; }

        /// <summary>
        /// The validation result for the current calculation.
        /// <br/>Please note that this is not serialized into the data storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

    }

    /// <summary>
    /// Informational object that stores data about the salary calculation / payment that is not directly related to calculating the salary.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcInfo
    {
        /// <summary>
        /// Start date of the work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? WorkStartDate { get; set; }

        /// <summary>
        /// End date of the work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? WorkEndDate { get; set; }

        /// <summary>
        /// Description of the work for reporting purposes. Max 32 chars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string WorkDescription { get; set; }

        /// <summary>
        /// Message from worker to employer - when worker sends the salary calculation to the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerMessage { get; set; }

        /// <summary>
        /// Message which will be displayed in the payslip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salarySlipMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalarySlipMessage { get; set; }

        /// <summary>
        /// Payment reference number in payment service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Original Payment reference number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalPaymentId { get; set; }

        /// <summary>
        /// Channel that is used for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? PaymentChannel { get; set; }

        /// <summary>
        /// Application id for invoicing etc. purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The MessageThread Id, if this calculation is referred in a message thread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageThreadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageThreadId { get; set; }

        /// <summary>
        /// Assumed earnings payment report date for the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReportDate { get; set; }

        /// <summary>
        /// Notes related to the payment and other backoffice operations: 
        /// <br/>For example the justification why the sum is in calculation vs. Paytrail payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backofficeNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackofficeNotes { get; set; }

        /// <summary>
        /// Occupation classification, used at least for Accident insurance purposes, but may be used for other reporting. 
        /// <br/>For Finnish Salaries use the Statistics Finland 
        /// <br/>"Classification of Occupations 2010" (TK10): https://www.stat.fi/meta/luokitukset/ammatti/017-2018-05-15/index_en.html
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode { get; set; }

        /// <summary>
        /// Secondary occupation classification. Some earnings payment reports may require two occupation codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode2 { get; set; }

        /// <summary>
        /// Calculated pension insurance payment date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PensionPaymentDate { get; set; }

        /// <summary>
        /// Pension insurance reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPaymentRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionPaymentRef { get; set; }

        /// <summary>
        /// Pension insurance payment specifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPaymentSpecifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionPaymentSpecifier { get; set; }

        /// <summary>
        /// The Payroll Id, if this calculation is part of a Payroll list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrollId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayrollId { get; set; }

        /// <summary>
        /// Cost center for reporting purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costCenter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CostCenter { get; set; }

        /// <summary>
        /// Identifier of the worker in a source system. Used in imports etc.
        /// <br/>This is automatically set from the source id of the employment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerSourceId { get; set; }

        /// <summary>
        /// Identifier of the calculation in a source system. Used in imports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

    }

    /// <summary>
    /// Defines the properties related to sharing and sending of the calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationSharing
    {
        /// <summary>
        /// Type of sharing for this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SharingUriType? Type { get; set; }

        /// <summary>
        /// Sharing uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Email address to which the calculation was shared last time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastSharedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastSharedTo { get; set; }

        /// <summary>
        /// Email address which the calculation was shared as cc last time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastSharedCc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastSharedCc { get; set; }

        /// <summary>
        /// Last shared message to the employer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastSharedMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastSharedMessage { get; set; }

    }

    /// <summary>
    /// Contains calculation specific data for accounting (both cost and financial accounting).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationAccounting
    {
        /// <summary>
        /// Special flags for account number mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AccountNumberFlags { get; set; }

        /// <summary>
        /// Values for cost accounting dimensions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimension> Dimensions { get; set; }

    }

    /// <summary>
    /// Worktime data that is stored as part of Salary calculation:
    /// <br/>work days, absences, holidays and holiday accrual.
    /// <br/>In the future may also contain relevant part of timesheet data (work hours).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcWorktime
    {
        /// <summary>
        /// Specification for the holiday calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidaySpec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidaySpecificationForYear HolidaySpec { get; set; }

        /// <summary>
        /// Employment period that is updated from employment at each recalculation (as opposed to holiday specification).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange EmploymentPeriod { get; set; }

        /// <summary>
        /// Parameters related to Monthly salary.
        /// <br/>Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monthly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcMonthlyData Monthly { get; set; }

        /// <summary>
        /// Parameters related to Hourly or Performance based salary.
        /// <br/>Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hourly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcHourlyData Hourly { get; set; }

        /// <summary>
        /// Parameters related to Holiday Bonus.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcHolidayBonus Bonus { get; set; }

        /// <summary>
        /// Number of days of non-paid absences. 
        /// <br/>These are deducted from the Monthly salary, not from Hourly salary at the moment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absencesDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AbsencesDays { get; set; }

        /// <summary>
        /// Number of days of paid absences,  e.g. paid sick leave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paidAbsencesDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PaidAbsencesDays { get; set; }

        /// <summary>
        /// Periods of 'absences' which are paid, e.g. paid sick leave. 
        /// <br/>These are deducted from the Monthly salary, not from Hourly salary at the moment.
        /// <br/>Additionally corresponding row type e.g. MonthlySickLeave is added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paidAbsencesPeriods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AbsencePeriod> PaidAbsencesPeriods { get; set; }

        /// <summary>
        /// Accruals for each calendar month in this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accruals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MonthlyHolidayAccrual> Accruals { get; set; }

        /// <summary>
        /// Number of paid Leave days that is paid in this salary calculation / for this period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leavesDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeavesDays { get; set; }

        /// <summary>
        /// Price for a single holiday day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leavesDailySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LeavesDailySalary { get; set; }

        /// <summary>
        /// Describes the working days in the period.
        /// <br/>Currently, uses the DaysCount, but later the full days array will be taken to use.
        /// <br/>This includes the absence days (divider in AbsencesDaySalary).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange WorkDays { get; set; }

    }

    /// <summary>
    /// The required information for paying the Salary to Worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcWorkerPaymentData
    {
        /// <summary>
        /// First name of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name / Surname of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets the Social security number the way the user set it in input.
        /// <br/>HOWEVER: The getter will change the string to upper invariant/trim and if the last character is "*", it will be replaced by calculated checksum.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialSecurityNumber { get; set; }

        /// <summary>
        /// Social security number if valid or null
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityNumberValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialSecurityNumberValid { get; set; }

        /// <summary>
        /// IBAN number for the Bank account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

        /// <summary>
        /// Contact e-mail address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

    }

    /// <summary>
    /// Tax card information stored as part of the Calculation object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcTax
    {
        /// <summary>
        /// Identifier for a stored tax card if one is applied to this calculation.
        /// <br/>System updates the TaxCardId automatically in Recalculate / Save if it finds a better candidate
        /// <br/>and also updates the Snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxcardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxcardId { get; set; }

        /// <summary>
        /// Snapshot of the tax card for salary slip etc. purposes.
        /// <br/>Updated in Recalculate / Save based on TaxCardId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxcardSnapshot Snapshot { get; set; }

        /// <summary>
        /// Possibility to set a fixed widthholding tax amount for this calculation regardless of 
        /// <br/>the percentage etc. in the tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedTaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FixedTaxAmount { get; set; }

        /// <summary>
        /// The API returns true if there is a valid taxcard for the PaidAt date for this calculation
        /// <br/>or if FixedTaxAmount is set for th calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Calculated widthholding tax. Note that this is an estimation until the calculation is actually paid.
        /// <br/>Also, if the salary is not paid as cash (e.g. fringe benefits), there may not be enough money to make the full deduction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedTax { get; set; }

        /// <summary>
        /// A flag that during last recalculation, there was a new shared taxcard that was waiting approval.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasNewSharedCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasNewSharedCard { get; set; }

        /// <summary>
        /// Tax percent that is used in visualization. This is mainly used in Unit testing and anonymous calcultors.
        /// <br/>Not used in real paid calculations. This is percent. I.e. for 50% set 50, not 0.5.
        /// <br/>If PaymentData or AccountId lead to a valid tax card type and percent, or if there is FixedTaxAmount, this value is not used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentForVisualization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentForVisualization { get; set; }

    }

    /// <summary>
    /// Provides row specific data for accounting (both cost and financial accounting).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RowAccounting
    {
        /// <summary>
        /// Percent for VAT calculation expressed as decimal: 24% is 0.24.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatPercent { get; set; }

        /// <summary>
        /// Total VAT amount splitted by VAT rates.
        /// <br/>Please note, that if both {Palkkaus.Model.Calc.RowAccounting.VatPercent} and the {Palkkaus.Model.Calc.RowAccounting.VatEntries} with some entries given,
        /// <br/>the {Palkkaus.Model.Calc.RowAccounting.VatEntries} are applied.
        /// <br/>Please note that this is null by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VatEntry> VatEntries { get; set; }

        /// <summary>
        /// Special flags for account number mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AccountNumberFlags { get; set; }

        /// <summary>
        /// Values for cost accounting dimensions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimension> Dimensions { get; set; }

    }

    /// <summary>
    /// Calculates the total numbers - the ones that are common to Employer and worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalCalculationDTO
    {
        /// <summary>
        /// The total pension payment for this calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pension { get; set; }

        /// <summary>
        /// The total unemployment payment sum.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Unemployment { get; set; }

        /// <summary>
        /// The total of all calculation rows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// The base salary without overtime and other such additions that are part of gross salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalBaseSalary { get; set; }

        /// <summary>
        /// Gross salary is the salary including additions like overtime, but not benefits or expenses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalGrossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalGrossSalary { get; set; }

        /// <summary>
        /// Taxable salary is the salary from the taxation point of view - includes some benefits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxable { get; set; }

        /// <summary>
        /// Deduction from TotalTaxable to tax at source calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAtSourceDeduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAtSourceDeduction { get; set; }

        /// <summary>
        /// DEPRICATED: This is now the same as TotalPensionInsuranceBase. For other social insurances, you may want to use 
        /// <br/>TotalUnemploymentInsuranceBase, TotalHealthInsuranceBase or TotalAccidentInsuranceBase,
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSocialSecurityBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalSocialSecurityBase { get; set; }

        /// <summary>
        /// Base income for calculating the Pension insurance contributions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPensionInsuranceBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPensionInsuranceBase { get; set; }

        /// <summary>
        /// Base income for calculating the Unemployment insurance contributions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUnemploymentInsuranceBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalUnemploymentInsuranceBase { get; set; }

        /// <summary>
        /// Base income for calculating the Health insurance contributions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalHealthInsuranceBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalHealthInsuranceBase { get; set; }

        /// <summary>
        /// Base income for calculating the Accident insurance contributions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAccidentInsuranceBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAccidentInsuranceBase { get; set; }

        /// <summary>
        /// Tax free expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalExpenses { get; set; }

        /// <summary>
        /// Total sum of rows that are paid through Salaxy Customer Funds account.
        /// <br/>This is the Gross sum before side costs, deductions etc., but it is not Gross salary as it includes expenses etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPayable { get; set; }

    }

    /// <summary>
    /// Business level modeling corresponding to WageReportsToIRTypes Transaction.
    /// <br/>Also contains additional data for accounting and integration purposes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrRow
    {
        /// <summary>
        /// Type of the row - basically describes the source for this row: 
        /// <br/>Either Manual (default) or Usecase logic, which may be legacy / API v02 or new / API v03.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public IrRowSourceType? Type { get; set; }

        /// <summary>
        /// Description text of the row that is shown in reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count for the row. Default is one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Simple multiplication: Count * Price - no other logic. Not used as Input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// Unit for the row. If specified as Undefined, set by the server-logic based on row type etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Unit? Unit { get; set; }

        /// <summary>
        /// Details for the National Incomes registry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrDetails IrData { get; set; }

        /// <summary>
        /// Details from Salaxy internal calulcation point-of-view (logic not in IR).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrRowCalculationProperties CalcData { get; set; }

        /// <summary>
        /// Earnings period if different than the report period.
        /// <br/>Note that this property may be (and by default is) null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earningPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange EarningPeriod { get; set; }

        /// <summary>
        /// Accounting related data for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RowAccounting Accounting { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Models the business logic of Employer side of the calculation. 
    /// <br/>For documentation, see the IEmployerCalculation interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployerCalculationDTO
    {
        /// <summary>
        /// All side cost: The mandatory side costs + Palkkaus and partner fees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allSideCosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AllSideCosts { get; set; }

        /// <summary>
        /// The final cost after household decuction from the tax authorities:
        /// <br/>Add to the payment the deductions (paid by employer) and deduct House hold deduction (later potentially other such subsidies)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finalCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinalCost { get; set; }

        /// <summary>
        /// Household deduction that the tax man will reimburse in taxation.
        /// <br/>This is an estimation: There is minimum and maximum limits etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdDeduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HouseholdDeduction { get; set; }

        /// <summary>
        /// The mandatory side costs are Pension (TyEL), Social secuirty and Unemployment insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mandatorySideCosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MandatorySideCosts { get; set; }

        /// <summary>
        /// The Palkkaus.fi fee including potential partner fees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("palkkaus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Palkkaus { get; set; }

        /// <summary>
        /// Extra service charge in addition to Palkkaus fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Service { get; set; }

        /// <summary>
        /// The part of the Pension that Employer pays
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pension { get; set; }

        /// <summary>
        /// The social security payment- paid as part of taxation (ennakonpidätys).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SocialSecurity { get; set; }

        /// <summary>
        /// Total payment that is Paid to Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPayment { get; set; }

        /// <summary>
        /// Total payment using pre Insiders register calculation logic.
        /// <br/>DEPRICATED: This is provided for special scenarios and may be removed without warning
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPaymentLegacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPaymentLegacy { get; set; }

        /// <summary>
        /// Total salary cost is the paid salary, deductions and side costs, but not expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSalaryCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalSalaryCost { get; set; }

        /// <summary>
        /// The part of the unemployment insurance that the employer pays
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Unemployment { get; set; }

        /// <summary>
        /// Total deductions that are made from the payment that is paid to Palkkaus and then to Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDeductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDeductions { get; set; }

        /// <summary>
        /// Union payment if it is deducted from the final figure
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionUnionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionUnionPayment { get; set; }

        /// <summary>
        /// Pension payments, when paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionPensionSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionPensionSelfPayment { get; set; }

        /// <summary>
        /// Unemployment insurance (TVR) payments, when paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionUnemploymentSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionUnemploymentSelfPayment { get; set; }

        /// <summary>
        /// Salary advance - this part has already been paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionSalaryAdvance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionSalaryAdvance { get; set; }

        /// <summary>
        /// Foreclosure that has already been paid by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionForeclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionForeclosure { get; set; }

        /// <summary>
        /// Tax and social security payments, when paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionTaxAndSocialSecuritySelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionTaxAndSocialSecuritySelfPayment { get; set; }

        /// <summary>
        /// Worker salary and expense payments, when paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionWorkerSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionWorkerSelfPayment { get; set; }

        /// <summary>
        /// Foreclosure that Palkkaus.fi pays in behalf of employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreclosureByPalkkaus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ForeclosureByPalkkaus { get; set; }

        /// <summary>
        /// Other deductions that are deducted from the net salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionOtherDeductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionOtherDeductions { get; set; }

    }

    /// <summary>
    /// The Worker side of the calculation.
    /// <br/>SalarySlip is largely written based on this calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerCalculationDTO
    {
        /// <summary>
        /// The benefits as valued by the tax authority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Benefits { get; set; }

        /// <summary>
        /// All the items that are deducted from the salary (this is also the order if there is not enough payable money):
        /// <br/>SalaryAdvance + Tax + Pension + UnemploymentInsurance + UnionPayment + OtherDeductions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Deductions { get; set; }

        /// <summary>
        /// The payment that is made to the Worker based on salary after all deductions.
        /// <br/>Does not include expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SalaryPayment { get; set; }

        /// <summary>
        /// The salary advance that was paid to the Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryAdvance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SalaryAdvance { get; set; }

        /// <summary>
        /// The foreclosure that been deducted from the salary by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Foreclosure { get; set; }

        /// <summary>
        /// Ennakonpidätys: The taxes that were deducted from the worker salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax { get; set; }

        /// <summary>
        /// Lähdevero: The tax at source that were deducted from the worker salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAtSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAtSource { get; set; }

        /// <summary>
        /// Net salary after tax - before worker foreclosure or deductions of the side costs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryAfterTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SalaryAfterTax { get; set; }

        /// <summary>
        /// Net salary after tax and foreclosure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryAfterTaxAndForeclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SalaryAfterTaxAndForeclosure { get; set; }

        /// <summary>
        /// Part of the Pension that is taken from the Worker side of the salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pension { get; set; }

        /// <summary>
        /// Workers part of the unemployment insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentInsurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnemploymentInsurance { get; set; }

        /// <summary>
        /// The social security payment. NOT paid as a part of tax withhold .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SocialSecurity { get; set; }

        /// <summary>
        /// The union payment that is deducted from the Worker salarya s per workers request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnionPayment { get; set; }

        /// <summary>
        /// Widthholding tax: The original calulated version - there might not be enough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullTax { get; set; }

        /// <summary>
        /// Tax at source: The original calulated version - there might not be enough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullTaxAtSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullTaxAtSource { get; set; }

        /// <summary>
        /// The salary advance that was paid to the Worker
        /// <br/>The original calulated version - there might not be enough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullSalaryAdvance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullSalaryAdvance { get; set; }

        /// <summary>
        /// Part of the Pension that is taken from the Worker side of the salary.
        /// <br/>The original calulated version - there might not be anough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullPension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullPension { get; set; }

        /// <summary>
        /// Workers part of the unemployment insurance.
        /// <br/>The original calulated version - there might not be anough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullUnemploymentInsurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullUnemploymentInsurance { get; set; }

        /// <summary>
        /// The social security payment. NOT paid as a part of tax withhold .
        /// <br/>The original calculted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullSocialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullSocialSecurity { get; set; }

        /// <summary>
        /// The union payment that is deducted from the Worker salarya s per workers request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullUnionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullUnionPayment { get; set; }

        /// <summary>
        /// The sum that is at the end paid to the Worker:
        /// <br/>Salary payment + expenses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWorkerPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalWorkerPayment { get; set; }

        /// <summary>
        /// Total payment using pre Insiders register calculation logic.
        /// <br/>DEPRICATED: This is provided for special scenarios and may be removed without warning
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWorkerPaymentLegacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalWorkerPaymentLegacy { get; set; }

        /// <summary>
        /// The side costs that are deducted from the Worker salary according to law:
        /// <br/>Pension, Unemployment and Union payment. Tax is not included in this number.
        /// <br/>This is not an official number, really used in the charts etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSideCosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WorkerSideCosts { get; set; }

        /// <summary>
        /// Other deductions that are deducted from the net salary.
        /// <br/>The original calulated version - there might not be enough money to finally deduct this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullOtherDeductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullOtherDeductions { get; set; }

        /// <summary>
        /// Part of the other deductions that are deducted from the net salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherDeductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OtherDeductions { get; set; }

        /// <summary>
        /// Prepaid expenses that are deducted from the expenses to be paid to the worker.
        /// <br/>The original calulated version - there might not be enough money to finally deduct this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullPrepaidExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullPrepaidExpenses { get; set; }

        /// <summary>
        /// Part of the prepaid expenses that are deducted from the expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prepaidExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrepaidExpenses { get; set; }

    }

    /// <summary>
    /// Defines a Calculation row in the calculation results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultRow
    {
        /// <summary>
        /// Row index that matches this row to a user defined row (which is zero-based).
        /// <br/>If the row is generated by calculation business logic (e.g. based on framework agreement), the index is -1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRowIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserRowIndex { get; set; }

        /// <summary>
        /// Logical type of the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowType? RowType { get; set; }

        /// <summary>
        /// Source of the calculation row - affects how the row is handled in editing / recalculation scenarios.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowSource? RowSource { get; set; }

        /// <summary>
        /// Description text of the row that is shown in reports. If null, will be set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count for the row - default is one
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price for the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Unit for the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowUnit? Unit { get; set; }

        /// <summary>
        /// Total for the row - always Price * Count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// Base salary (Peruspalkka) is the monthly salary or total salary without addiotions (overtime, holidays etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalBaseSalary { get; set; }

        /// <summary>
        /// Gross salary (Bruttopalkka) is "real" salary including the additions (overtime, holidays etc.) but not benefits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalGrossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalGrossSalary { get; set; }

        /// <summary>
        /// Taxable income (Ennakonpidätyksen alainen ansio) is the salary from taxation point-of-view. It is basically the Gross Salary plus benefits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxable { get; set; }

        /// <summary>
        /// Social Security Base (Sosiaaliturvan alainen ansio) is typically the same as TotalTaxable, 
        /// <br/>but e.g. child care subsidy (yksityisen hoidon tuki) is handled differently.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSocialSecurityBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalSocialSecurityBase { get; set; }

        /// <summary>
        /// Taxfree expenses compensation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalExpenses { get; set; }

        /// <summary>
        /// Deductions from the salary: Union payment, Advance, Foreclosure
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDeduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDeduction { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This is a pass-through string that is kept as-is in the Salaxy system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// Period if different than the Period of calculation.
        /// <br/>Will be reported to the National Incomes registry, but also affect some other calculations.
        /// <br/>Note that this property may be (and by default is) null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Accounting related data for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RowAccounting Accounting { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Parameters that affect the calculation. 
    /// <br/>EmployerResponsibilities is historical name - currentlty to object holds also other properties 
    /// <br/>that are not well described as responsibilities.
    /// <br/>These based on the EmployerGroups selection or properties of the Employer and Worker snapshots as well as this Calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IEmployerResponsibilities
    {
        /// <summary>
        /// Employer groups that are set on Example calculations.
        /// <br/>These will be replaced by properties from Worker / Employer when these persons are set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployerGroups EmployerGroups { get; set; }

        /// <summary>
        /// Pension is not paid if the salary to this Worker is less than a certain amount in a month (about 60€)
        /// <br/>or worker is less than 17 or more than 64 years old.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noPensionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoPensionPayment { get; set; }

        /// <summary>
        /// If worker is less than 16 or more than 67, social secuiry payment is not paid
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSocialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoSocialSecurity { get; set; }

        /// <summary>
        /// If Worker is less than 17 or more than 64, TVR is not paid.
        /// <br/>Also if the Employer has no accident insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noTvr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoTvr { get; set; }

        /// <summary>
        /// The name of the Pension company because this affects the Pension percentage used in the calculation (only in contract situation).
        /// <br/>It also needs to be shown in the reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCompany? PensionCompany { get; set; }

        /// <summary>
        /// Pension discount percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionDiscountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionDiscountPercent { get; set; }

        /// <summary>
        /// Customer specific pension percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionPercent { get; set; }

        /// <summary>
        /// Company for the current insurance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InsuranceCompany? InsuranceCompany { get; set; }

        /// <summary>
        /// Percent for calculating the estimate for the accident insurance amount to pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurancePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsurancePercent { get; set; }

        /// <summary>
        /// Percent for calculating the estimate for the group life insurance amount to pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupLifeInsurancePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GroupLifeInsurancePercent { get; set; }

        /// <summary>
        /// Accident insurance contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceContractNumber { get; set; }

        /// <summary>
        /// If the Worker is from 53 to 62 years old, more of the Pension payment 
        /// <br/>is deducted from the Worker side of the salary (less for the Employer).
        /// <br/>NOTE: People from 63 to 67 years pay the same amount as 17-52 years old.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionOldAgePayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PensionOldAgePayment { get; set; }

        /// <summary>
        /// The employer should have a Pension contract (not a temporary employer).
        /// <br/>It does not necessarily mean that the user has a contract yet.
        /// <br/>NOTE: At the moment, this is not used for calculation - only in the Side costs visualizer tool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionRegularEmployer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PensionRegularEmployer { get; set; }

        /// <summary>
        /// If true, the employer has a Pension contract and makes the payments 
        /// <br/>in a monthly schedule which means that Pension interest is calculated for the 20th of the next month.
        /// <br/>Currently, this is only enabled to Etera - other companies will follow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPensionMonthlyContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPensionMonthlyContract { get; set; }

        /// <summary>
        /// If true, the employer pays the Unemployment insurance directly to TVR.
        /// <br/>As of writing, this is true for all companies and with calculations starting 1.8.2018,
        /// <br/>false for households or calculations before the date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnemploymentSelfPayment { get; set; }

        /// <summary>
        /// The assumed salary payment date from the worker perspective.
        /// <br/>The system calculates the nearest possible salary date if no any salary date has been given by the
        /// <br/>employer. If given, the system confirms the given date.
        /// <br/>This date affects the yearly percents used in the salary calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculationPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CalculationPaymentDate { get; set; }

        /// <summary>
        /// The age range that is used in the business logic that determines the employer responsibilities.
        /// <br/>This property replaces the EmployerGroups.AgeRange that was previous get/set. 
        /// <br/>This is based on WorkerDateOfBirth and CalculationPaymentDate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionAgeRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AgeRange? PensionAgeRange { get; set; }

        /// <summary>
        /// Date of birth for the Worker - this affects the side costs. 
        /// <br/>Please also set the DateOfBirthAccuracy, if you set this property.
        /// <br/>If SocialSecurityNumber is set, it will override any value set here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerDateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? WorkerDateOfBirth { get; set; }

        /// <summary>
        /// Accuracy of the date of birth
        /// <br/>If SocialSecurityNumber is set, it will override any value set here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerDateOfBirthAccuracy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public DateOfBirthAccuracy? WorkerDateOfBirthAccuracy { get; set; }

        /// <summary>
        /// Pension calculation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCalculation? PensionCalculation { get; set; }

        /// <summary>
        /// Rules (e.g. effect of monthly lower limit) for pension calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionRule? PensionRule { get; set; }

        /// <summary>
        /// Type of the employment relation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationType? EmploymentType { get; set; }

        /// <summary>
        /// Taxcard type from the employment point of view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentTaxcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationTaxcard? EmploymentTaxcard { get; set; }

        /// <summary>
        /// Worker's preferred salary payment method: bank account, external etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationSalaryPaymentMethod? SalaryPaymentMethod { get; set; }

        /// <summary>
        /// Type of additional income earner data by National Incomer Register classification . If several types apply, all of them should be selected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irIncomeEarnerTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IncomeEarnerType> IrIncomeEarnerTypes { get; set; }

        /// <summary>
        /// Sub organization code for the Incomes Registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subOrgCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubOrgCode { get; set; }

        /// <summary>
        /// Employment registration code for Incomes Registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentRegCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentRegCode { get; set; }

        /// <summary>
        /// Tax and social security payments are paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAndSocialSecuritySelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TaxAndSocialSecuritySelfPayment { get; set; }

        /// <summary>
        /// Worker salary and expense payments are paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkerSelfPayment { get; set; }

        /// <summary>
        /// Pension payments are paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PensionSelfPayment { get; set; }

        /// <summary>
        /// Pension insurance contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionContractNumber { get; set; }

        /// <summary>
        /// Status for indicating whether the total amount of paid salaries exceeds the thresold for higher unemployment insurance percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentPayrollLimitStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UnemploymentPayrollLimitStatus? UnemploymentPayrollLimitStatus { get; set; }

        /// <summary>
        /// Options for the delivery of the payslip to the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salarySlipDeliveryMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<WorkerSalarySlipDeliveryMethod> SalarySlipDeliveryMethods { get; set; }

    }

    /// <summary>
    /// Common base class / interface for data validation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiValidation
    {
        /// <summary>
        /// If true, the data is valid - no errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// If true, has required fields missing data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasAllRequiredFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAllRequiredFields { get; set; }

        /// <summary>
        /// Validation errors on invalid field values. 
        /// <br/>Note that required fields missing error messages are not here. Only the invalid values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiValidationError> Errors { get; set; }

    }

    /// <summary>
    /// Id of the cost accounting dimension with optional percentage for shared costs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CostAccountingDimension
    {
        /// <summary>
        /// Dimension Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Cost accounting dimension value id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Sharing percent for the dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

    }

    /// <summary>
    /// Extends the Holiday specification with the properties of employment relation that are required for a specific year.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidaySpecificationForYear
    {
        /// <summary>
        /// Wage basis for a Holiday Year.
        /// <br/>When this is changed, you need to make a rerun to the previous calculations in the holiday year.
        /// <br/>NOTE: This is not in HolidaySpecification because, the same value is stored in Employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WageBasis? WageBasis { get; set; }

        /// <summary>
        /// Employment period for the purposes of holiday calculation (annual leave accrual).
        /// <br/>When this is changed, you need to make a rerun to the previous calculations in the holiday year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange EmploymentPeriod { get; set; }

        /// <summary>
        /// Defines how the holidays are handled for the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayCode? Code { get; set; }

        /// <summary>
        /// Defines the number of holidays that the worker is entitled per month worked.
        /// <br/>If the value is set to 0 (default), the number is 2 for first year and 2,5 thereafter as defined in the law.
        /// <br/>To actually se the daysPerMonth to zero, use code value other than Permanent14Days or Permanent35Hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accrualFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AccrualFixed { get; set; }

        /// <summary>
        /// Holiday compensation as percent of salary (11.5% is 0.115)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Compensation { get; set; }

        /// <summary>
        /// Method for paying holiday bonus in this salary calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayBonusPaymentMethod? BonusMethod { get; set; }

        /// <summary>
        /// Holiday bonus for the worker (lomaraha, lomaltapaluuraha).
        /// <br/>Typically 0.5 for 50%.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bonus { get; set; }

    }

    /// <summary>
    /// Period recalculation parameters that are related to Monthly salary.
    /// <br/>Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcMonthlyData
    {
        /// <summary>
        /// If true the Monthly (weekly) calculation is being applied to absences and holidays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMonthly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMonthly { get; set; }

        /// <summary>
        /// Monthly salary in holiday and absences calculation.
        /// <br/>Typically, the same as the actual monthly calculation, but may be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monthlySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MonthlySalary { get; set; }

        /// <summary>
        /// Price for a single absence day. Typically based on MonthlySalary, but may be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absencesDaySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsencesDaySalary { get; set; }

    }

    /// <summary>
    /// Holiday calculation based on hourly salary OR performance based salaries.
    /// <br/>May also contain other data related to working hours.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcHourlyData
    {
        /// <summary>
        /// If true, the hourly / performance based calculation is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHourly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHourly { get; set; }

    }

    /// <summary>
    /// Holiday Bonus data that is stored into a Salary calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcHolidayBonus
    {
        /// <summary>
        /// Number of yearly leave days. This is for the purposes of calculating the Bonus, 
        /// <br/>so this is yearly salary days, not the complete saldo (including StartSaldo).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yearlyLeaveDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? YearlyLeaveDays { get; set; }

        /// <summary>
        /// Total yearly holiday salary for the purposes of holiday bonus.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalHolidaySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalHolidaySalary { get; set; }

        /// <summary>
        /// The sum of holiday bonus that has already been paid this year.
        /// <br/>The payment is never so big that this would become more than BonusTotalHolidaySalary 
        /// <br/>(by this calculation - the limit can be exceeded manually).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alreadyPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AlreadyPaid { get; set; }

    }

    /// <summary>
    /// Holiday Accrual for a calendar month in releation to a calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonthlyHolidayAccrual
    {
        /// <summary>
        /// First day of month for the holiday month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Month { get; set; }

        /// <summary>
        /// Holiday accrual for this month.
        /// <br/>Note that -1 is indication that accrual should not be updated for this particylar month.
        /// <br/>There is no possiblity for negative accrual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daysAccrued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DaysAccrued { get; set; }

        /// <summary>
        /// Number of absence days used in the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absencesDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AbsencesDays { get; set; }

        /// <summary>
        /// Work days in determining the accrual for the month in 14 days rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkDays { get; set; }

        /// <summary>
        /// Work hours in determining the accrual fot the month in 35 hour rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkHours { get; set; }

    }

    /// <summary>
    /// Basic information about the taxcard: This object has the information printed in SalarySlip etc. 
    /// <br/>but not the full salaries paid to the taxcard etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardSnapshot
    {
        /// <summary>
        /// Year that the tax card is valid for. Typically this means from February of this year to January of the following.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forYear", Required = Newtonsoft.Json.Required.Always)]
        public int ForYear { get; set; }

        /// <summary>
        /// Validity for the taxcard as expressed in the card.
        /// <br/>Note that the end date may not be reliable if new taxcard has replaced this one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Validity { get; set; }

        /// <summary>
        /// Tax percent as percent. I.e. for 50% set 50, not 0.5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent { get; set; }

        /// <summary>
        /// Income up to which the TaxPercent can be used.
        /// <br/>Any income above the limit is taxed with ExcessTaxPercent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IncomeLimit { get; set; }

        /// <summary>
        /// Cumulative income on the taxcard - including this calculation.
        /// <br/>Note that with shared taxcards, this may include income from other employers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cumulativeIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CumulativeIncome { get; set; }

        /// <summary>
        /// Tax percentage that is used in calculating the widthholding tax for the part of income above the IncomeLimit.
        /// <br/>This is percent. I.e. for 50% set 50, not 0.5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent2 { get; set; }

        /// <summary>
        /// A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
        /// <br/>This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentMin { get; set; }

        /// <summary>
        /// TaxPercentMin set by owner of the card.
        /// <br/>This overrides the tax percent min set by the taxcard sharer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentMinOwned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentMinOwned { get; set; }

        /// <summary>
        /// The income type of the taxacard if fetched from the tax authorities taxcard API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardApiIncomeType? IncomeType { get; set; }

        /// <summary>
        /// Type of the taxcard as of 2019, when the taxcards logic was simplified by the Finnish tazx authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardKind? Kind { get; set; }

        /// <summary>
        /// Uri to the file copy of the tax card. 
        /// <br/>Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileUri { get; set; }

        /// <summary>
        /// Uri to the preview image of the tax card. 
        /// <br/>Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previewUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviewUri { get; set; }

        /// <summary>
        /// Explicit value of when the item was last checked. At the moment, updated in API fetches only, but may be used later for other checks.
        /// <br/>Undefined value is 1.1.2000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastChecked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastChecked { get; set; }

    }

    /// <summary>
    /// For VAT breakdown of a receipt (ALV-erittely) represents a single VAT rate and the revenue and tax with that rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VatEntry
    {
        /// <summary>
        /// Tax amount of specific VAT rate in euro.
        /// <br/>This value is mandatory, if the collection of VatEntries contains more than one item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax { get; set; }

        /// <summary>
        /// Applied VAT rate. This is always mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public VatRate? VatRate { get; set; }

        /// <summary>
        /// Tax as percent of Net sales (0-1). Currently just informative, but may later be used for Custom non-standard VAT rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent { get; set; }

        /// <summary>
        /// Gross sales for specific VAT rate including the tax (VAT).
        /// <br/>This value is mandatory, if the collection of VatEntries contains more than one item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gross", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Gross { get; set; }

        /// <summary>
        /// Net sales for specific VAT rate excluding the tax (VAT).
        /// <br/>This value is mandatory, if the collection of VatEntries contains more than one item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("net", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Net { get; set; }

    }

    /// <summary>
    /// Reporting details to Incomes registry (Tulorekisteri).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrDetails
    {
        /// <summary>
        /// The number code in Incomes Register.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>
        /// Boolean flags that can be set on transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IrFlags> Flags { get; set; }

        /// <summary>
        /// Defines the exceptions to Insurance / Sidecost defaults that are set by the row type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IrInsuranceExceptions> InsuranceExceptions { get; set; }

        /// <summary>
        /// Daily allowance code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<AllowanceCode> DailyAllowance { get; set; }

        /// <summary>
        /// Set this to true if meak benefit is of tax value - false if it si not.
        /// <br/>The value should be null if the row is not mealBenefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealBenefitIsTaxValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MealBenefitIsTaxValue { get; set; }

        /// <summary>
        /// Provides the additional data needed for car benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarBenefit CarBenefit { get; set; }

        /// <summary>
        /// If true, report zero amount to IR.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noTransactionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoTransactionAmount { get; set; }

    }

    /// <summary>
    /// Details from Salaxy internal calulcation point-of-view (logic not in IR).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrRowCalculationProperties
    {
        /// <summary>
        /// Grouping for reports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalcGroup? Grouping { get; set; }

        /// <summary>
        /// Defines the behavior of the row in Salaxy calculation process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("behavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<CalculationFlag> Behavior { get; set; }

    }

    /// <summary>
    /// Employer groups that are set on Example calculations.
    /// <br/>These will be replaced by properties from Worker / Employer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployerGroups
    {
        /// <summary>
        /// If true, the Employer is a private person.
        /// <br/>Otherwise Company or Unknown.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPrivatePerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivatePerson { get; set; }

    }

    /// <summary>
    /// Validation errors used in API output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiValidationError
    {
        /// <summary>
        /// Full path to Name of the property / field (Member name in JSON).
        /// <br/>This may be null/empty for type General.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// High level type: Specifies the relation to object and its Member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiValidationErrorType Type { get; set; }

        /// <summary>
        /// Validation error message in the requested language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        /// <summary>
        /// Validation error long description in the requested language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Some error providers may have a unique technical code for error or validator
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Car benefit
    /// <br/>
    /// <br/>Mandatory data group, if the income type is "Car benefit". This data group may not be used with other income types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CarBenefit
    {
        /// <summary>
        /// Car benefit type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carBenefitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CarBenefitCode? CarBenefitCode { get; set; }

        /// <summary>
        /// Car age group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ageGroupCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AgeGroupCode? AgeGroupCode { get; set; }

        /// <summary>
        /// Odometer reading
        /// <br/>
        /// <br/>The value must be greater than or equal to 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Kilometers { get; set; }

        /// <summary>
        /// Car emissions value
        /// <br/>
        /// <br/>The car emissions value must be greater than or equal to 0, and smaller than or
        /// <br/>equal to 100. The car emissions value can only be reported if the payment date
        /// <br/>or other reporting date is in 2022–2025.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emissionsValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EmissionsValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfCalculationListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalculationListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of calculations in the user interface.
    /// <br/>It contains all essential information of the calculation and is basis for searching, filtering and sorting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Calculation specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationData
    {
        /// <summary>
        /// A flag indicating if the requested date for the SalaryDate has been set.
        /// <br/>If the date has been set, the value of the flag is 'SALA'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedSalaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedSalaryDate { get; set; }

        /// <summary>
        /// The sum that is at the end paid to the Worker:
        /// <br/>Salary payment + expenses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WorkerPayment { get; set; }

        /// <summary>
        /// The total pension payment for this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionPayment { get; set; }

        /// <summary>
        /// The taxes that were deducted from the worker salary a paid as part of taxation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPayment { get; set; }

        /// <summary>
        /// The social security payment- paid as part of taxation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SocialSecurityPayment { get; set; }

        /// <summary>
        /// Status of the calculation from the end-user point-of-view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationStatus? Status { get; set; }

        /// <summary>
        /// Payroll id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrollId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayrollId { get; set; }

        /// <summary>
        /// Employment id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Use case uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecaseUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsecaseUri { get; set; }

        /// <summary>
        /// The MessageThread Id, if this calculation is referred in a message thread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageThreadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageThreadId { get; set; }

        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Work start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? WorkStartDate { get; set; }

        /// <summary>
        /// Work end date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? WorkEndDate { get; set; }

        /// <summary>
        /// Payment channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? PaymentChannel { get; set; }

        /// <summary>
        /// Taxable salary is the salary from the taxation point of view - includes some benefits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxable { get; set; }

    }

    /// <summary>
    /// Parameters that are changing yearly. 
    /// <br/>This class is made for the change of the year and it is typically updated in December.
    /// <br/>It is not for recording longer history of numbers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YearlyChangingNumbers
    {
        /// <summary>
        /// Year for numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        /// <summary>
        /// Returns yearly sidecosts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sideCosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YearlySideCosts SideCosts { get; set; }

        /// <summary>
        /// Returns holidays for the year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Holidays Holidays { get; set; }

    }

    /// <summary>
    /// Encapsulates yearly side costs into one class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YearlySideCosts
    {
        /// <summary>
        /// Unemployment insurance payment percent - Employer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentEmployerPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnemploymentEmployerPercent { get; set; }

        /// <summary>
        /// Unemployment insurance payment percent - Large Employer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentHigherEmployerPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnemploymentHigherEmployerPercent { get; set; }

        /// <summary>
        /// Unemployment insurance payment percent - deducted from Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentWorkerPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnemploymentWorkerPercent { get; set; }

        /// <summary>
        /// Unemployment insurance payment percent for partial owner worker - deducted from Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentPartialOwnerWorkerPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnemploymentPartialOwnerWorkerPercent { get; set; }

        /// <summary>
        /// Pension payment income limit per month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tyelIncomeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TyelIncomeLimit { get; set; }

        /// <summary>
        /// Pension payment base percentage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tyelBasePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TyelBasePercent { get; set; }

        /// <summary>
        /// Pension payment base percentage - deducted from Worker salary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tyelWorkerPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TyelWorkerPercent { get; set; }

        /// <summary>
        /// Pension payment base percentage - deducted from 53-62 year old Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tyel53Percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tyel53Percent { get; set; }

        /// <summary>
        /// Pension contract employer six month limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tyelContractEmployerLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TyelContractEmployerLimit { get; set; }

        /// <summary>
        /// Social Security payment for employer (SAVA-maksu)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socSecPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SocSecPercent { get; set; }

        /// <summary>
        /// Illness Insurance care percent that is withhold from the Worker. (vakuutetun sairausvakuutusmaksu: päivärahamaksu + sairaanhoitomaksu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("illnessInsurancePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IllnessInsurancePercent { get; set; }

        /// <summary>
        /// Medical care contribution of the employee's health insurance contribution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("healthInsuranceMedicalCareContribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HealthInsuranceMedicalCareContribution { get; set; }

        /// <summary>
        /// Daily allowance contribution of the employee's health insurance contribution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("healthInsuranceDailyAllowanceContribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HealthInsuranceDailyAllowanceContribution { get; set; }

        /// <summary>
        /// Tax free daily allowance for full day approved by tax authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxFreeDailyAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxFreeDailyAllowance { get; set; }

        /// <summary>
        /// Tax free daily allowance for half day approved by tax authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxFreeDailyHalfAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxFreeDailyHalfAllowance { get; set; }

        /// <summary>
        /// Tax free meal allowance approved by tax authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxFreeMealAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxFreeMealAllowance { get; set; }

        /// <summary>
        /// Tax free bicycle benefit approved by tax authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxFreeBicycleBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxFreeBicycleBenefit { get; set; }

        /// <summary>
        /// Tax free subsidised sommute benefit approved by tax authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxFreeSubsidisedCommute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxFreeSubsidisedCommute { get; set; }

        /// <summary>
        /// Tax free milage allowance approved by tax authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxFreeKmAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxFreeKmAllowance { get; set; }

        /// <summary>
        /// Union payment: Rakennusliitto, A (typical)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unionPaymentRaksaA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnionPaymentRaksaA { get; set; }

        /// <summary>
        /// Union payment: Rakennusliitto, AO and TA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unionPaymentRaksaAoTa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnionPaymentRaksaAoTa { get; set; }

        /// <summary>
        /// ALV-% for the fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("palkkausVatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PalkkausVatPercent { get; set; }

        /// <summary>
        /// ALV-% for the fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("palkkausVatRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public VatRate? PalkkausVatRate { get; set; }

        /// <summary>
        /// Household deduction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdDeduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HouseholdDeduction { get; set; }

        /// <summary>
        /// Household deduction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdDeductionExtended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HouseholdDeductionExtended { get; set; }

        /// <summary>
        /// Household deduction max amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdDeductionMaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HouseholdDeductionMaxAmount { get; set; }

        /// <summary>
        /// Household deduction max amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdDeductionMaxAmountExtended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HouseholdDeductionMaxAmountExtended { get; set; }

        /// <summary>
        /// Tax deduction categories, which extend the deduction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdDeductionCategoriesExtended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<TaxDeductionWorkCategories> HouseholdDeductionCategoriesExtended { get; set; }

        /// <summary>
        /// Household deduction deductible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdDeductionDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HouseholdDeductionDeductible { get; set; }

        /// <summary>
        /// Meal benefit for catering contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealBenefitCateringContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MealBenefitCateringContract { get; set; }

        /// <summary>
        /// Meal benefit for institute
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealBenefitInstitute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MealBenefitInstitute { get; set; }

        /// <summary>
        /// Meal benefit for restaurant worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealBenefitRestaurantWorker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MealBenefitRestaurantWorker { get; set; }

        /// <summary>
        /// Meal benefit for teacher
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealBenefitTeacher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MealBenefitTeacher { get; set; }

        /// <summary>
        /// Meal ticket lower limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealTicketLowerLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MealTicketLowerLimit { get; set; }

        /// <summary>
        /// Meal ticket upper limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealTicketUpperLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MealTicketUpperLimit { get; set; }

        /// <summary>
        /// Taxable-% of meal ticket
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealTicketTaxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MealTicketTaxable { get; set; }

        /// <summary>
        /// Foreclosure: protected portion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedPortionBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProtectedPortionBase { get; set; }

        /// <summary>
        /// Foreclosure: protected portion for each dependant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedPortionDependant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProtectedPortionDependant { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayDate
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

        [Newtonsoft.Json.JsonProperty("holiday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Holiday? Holiday { get; set; }

        [Newtonsoft.Json.JsonProperty("holidayGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<HolidayGroup> HolidayGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("localName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalName { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Holidays for the entire year.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YearlyHolidays
    {
        /// <summary>
        /// Year for the holidays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Year { get; set; }

        /// <summary>
        /// Holidays for the year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Holidays2 Holidays { get; set; }

    }

    /// <summary>
    /// Data that is needed for determening PeriodRecalculationParams and thus at the end recalculating holidays and absences to a calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeriodRecalculationData
    {
        /// <summary>
        /// The salary calculation that should be recalculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Calculation Calc { get; set; }

        /// <summary>
        /// Holiday year with holidays that should be added as salary rows.
        /// <br/>If not provided, holidays are not calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayYear HolidayYear { get; set; }

        /// <summary>
        /// Absences that should be deducted from monthly salary.
        /// <br/>If not provided, absences are not calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerAbsences Absences { get; set; }

    }

    /// <summary>
    /// Holiday year is in Finland from April to end of march.
    /// <br/>This is the time from which the holidays for the following summer and year are determined.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayYear
    {
        /// <summary>
        /// Year as integer. This value is required when inserting and cannot be edited later. 
        /// <br/>Period will be set accordingly, or adjusted in case it is set below.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; }

        /// <summary>
        /// Salaxy ID of the worker. This value is required when inserting and cannot be edited later.
        /// <br/>WorkerSnapshot is automatically updated upon save.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerId { get; set; }

        /// <summary>
        /// The employment relation for the worker whose holidays are managed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// The holiday period for the year: Should always be 2.5.[Year]-30.4.[Year+1]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Specifies how the holidays are handled.
        /// <br/>If the Spec.Code is Undefined in Save, the contents is fetched from the current employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidaySpecificationForYear Spec { get; set; }

        /// <summary>
        /// Accrual of holidays (lomakirjanpito).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accrual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayAccrual Accrual { get; set; }

        /// <summary>
        /// Payments related to Annual Leaves (holidays).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leaves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnualLeaves Leaves { get; set; }

        /// <summary>
        /// Basic information for the Worker. 
        /// <br/>Automatically updated upon save based on WorkerId.
        /// <br/>Mainly for the listings etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSnapshot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar WorkerSnapshot { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Yearly log for Holiday accrual.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayAccrual
    {
        /// <summary>
        /// Holiday accrual entries during the period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("months", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HolidayAccrualEntry> Months { get; set; }

        /// <summary>
        /// The period for holiday accrual.
        /// <br/>This is also the period of the holiday year that the Worker is Employed,
        /// <br/>i.e. it may be shorter than HolidayYear Period if the employment relation 
        /// <br/>begins or ends within the holiday year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Default accrual for months where the Accrual occurs.
        /// <br/>When Holiday year is recalculated, this is determined either from Employment Period or AccrualFixed if set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultAccrual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DefaultAccrual { get; set; }

        /// <summary>
        /// Start saldo from the previous year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startSaldo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StartSaldo { get; set; }

        /// <summary>
        /// Total for the current year. This does not include Start saldo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// End saldo from the previous year. This is Total + Start Saldo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endSaldo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EndSaldo { get; set; }

    }

    /// <summary>
    /// Data about the annual leaves planned and used during the holiday year.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnualLeaves
    {
        /// <summary>
        /// Planned annual leaves.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("planned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnnualLeave> Planned { get; set; }

        /// <summary>
        /// Paid or otherwise handled annual leaves.
        /// <br/>PRELIMINARY: This property is under revision - it may be moved or renamed without being a breaking change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnnualLeavePayment> Paid { get; set; }

    }

    /// <summary>
    /// Entry in the Yearly Holiday Accrual list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayAccrualEntry
    {
        /// <summary>
        /// Index of the month from 0-11 for easier iteration.
        /// <br/>This is also the real identifier of the month when editing the entries through API.
        /// <br/>Months 4-12 are index 0-8 and month 1-3 are index 9-11
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>
        /// First day of month for the holiday month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Month { get; set; }

        /// <summary>
        /// Days added to holiday Accrual: Typically days per month.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daysAccrued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DaysAccrued { get; set; }

        /// <summary>
        /// Source of the holiday accrual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayAccrualSource? Source { get; set; }

        /// <summary>
        /// Identier of the calculation if Kind
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalcId { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    /// <summary>
    /// A planned annual Leave - not sure whether it will kept or is it just planned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnualLeave
    {
        /// <summary>
        /// Identifies a single leave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The planned holiday period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    /// <summary>
    /// Payment related to annual leave: holiday salary, bonus and compensation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnualLeavePayment
    {
        /// <summary>
        /// Type of the payment entry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AnnualLeavePaymentKind? Kind { get; set; }

        /// <summary>
        /// The reference date: Typically the Paid at date.
        /// <br/>The items are typically sorted based on this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Days of holidays that are paid or compensated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HolidayDays { get; set; }

        /// <summary>
        /// Salary that is paid for holidays
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidaySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HolidaySalary { get; set; }

        /// <summary>
        /// Compensation that is paid for holidays not kept.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HolidayCompensation { get; set; }

        /// <summary>
        /// Bonus for either Holiday Salary or Compensation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HolidayBonus { get; set; }

        /// <summary>
        /// If the payment is defined by a calculation, stores the calculation ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalcId { get; set; }

        /// <summary>
        /// Identifies a single leave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The planned holiday period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    /// <summary>
    /// Dataset models some arbitrary data that is store in storage.
    /// <br/>This is any data that is not "strongly modeled", for example:
    /// <br/>Imports from / exports to external systems, reports, data analyses and control data for batch processes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dataset
    {
        /// <summary>
        /// Editable metadata info about a dataset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatasetInfo Info { get; set; }

        /// <summary>
        /// The payload of the dataset: The objects or tables that are stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DatasetDataObject> Data { get; set; }

        /// <summary>
        /// Usecase is data related to the source and processing of the Employment data outside the Salaxy backend service / system.
        /// <br/>Typically, Usecase data would be processed by an external system that has originally created the 
        /// <br/>Employment Relation (Worker / Employee in many systems). E.g. expenses system, hourly reporting system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// Readonly workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Editable metadata info about a dataset.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatasetInfo
    {
        /// <summary>
        /// Status of the dataset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public DatasetStatus? Status { get; set; }

        /// <summary>
        /// End-user friendly label that describes the dataset in listings etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// The logical type / purpose of the dataset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public DatasetType? Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatasetDataObject
    {
        /// <summary>
        /// Technical name (unique key) for the data object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// User friendly label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Schema document that contains the schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemaDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaDoc { get; set; }

        /// <summary>
        /// Identifier / path to the schema that defines the data structure for the content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema { get; set; }

        /// <summary>
        /// If true, the schema should be interpreted as an array (display in table by default).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isArray", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsArray { get; set; }

        /// <summary>
        /// Data payload / content of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Content { get; set; }

        /// <summary>
        /// Potential validation data for content.
        /// <br/>Note that in many scenarios, validation may not be done / may not be serialized to storage so this property may be null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Defines one or multiple views for the dataset object. Typically this is fields to include / exclude from
        /// <br/>the views and definitions on how the views should be formatted / edited.
        /// <br/>First view is considered the default view and some UI's will only support that one view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("views", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DatasetView> Views { get; set; }

    }

    /// <summary>
    /// Defines a view, typically an array view, for a dataset.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatasetView
    {
        /// <summary>
        /// Properties / columns that should be shown in the view.
        /// <br/>These may be either simple column names or property paths (e.g. "personalInfo.avatar.sortableName") for hierarchical objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("include", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Include { get; set; }

        /// <summary>
        /// Properties / columns that should be shown excluded from the view.
        /// <br/>Exclusion is used only if Include is not set and it is applied to the "default view":
        /// <br/>Default view depends on the renderer, but it is typically just the first level of a hierarchical view,
        /// <br/>so exclude values are typically just simple column / property names, not property paths.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Exclude { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfDatasetListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DatasetListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of datasets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatasetListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public DatasetStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatasetListItemData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Dataset specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatasetListItemData
    {
        /// <summary>
        /// Key for the usecase based on which it is resolved. 
        /// <br/>Later, this may resolve to a user interface, microservice or a to manifest registering one.
        /// <br/>For now, just use a unique string starting with a domain you own.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecaseUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsecaseUri { get; set; }

    }

    /// <summary>
    /// Employment relation: The relation between Employer and Worker as well as the personal info of the worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Employment
    {
        /// <summary>
        /// General information about the Employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentRelationInfo Info { get; set; }

        /// <summary>
        /// Describes the work that is being performed in this Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("work", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkDescription Work { get; set; }

        /// <summary>
        /// Contains values that are needed when creating an employment, but where changing is restricted in the future:
        /// <br/>E.g. names and personalId are required when creating a new employment, but once a calculation is created (or at least paid),
        /// <br/>editing of theses is no longer possible. See the editing rules for individual properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentIdentity Identity { get; set; }

        /// <summary>
        /// Properties of the employment for international situations: Working abroad or foreign worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("international", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentRelationInternational International { get; set; }

        /// <summary>
        /// Contacts stored in the employment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactAdvanced> Contacts { get; set; }

        /// <summary>
        /// Usecase is data related to the source and processing of the Employment data outside the Salaxy backend service / system.
        /// <br/>Typically, Usecase data would be processed by an external system that has originally created the 
        /// <br/>Employment Relation (Worker / Employee in many systems). E.g. expenses system, hourly reporting system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// Defines how the holidays are specified to this Worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidaySpecification Holidays { get; set; }

        /// <summary>
        /// Contains read-only personal information for the worker typically managed by the Worker account:
        /// <br/>Names, personal ID and contact. Currently, this data is edited in Person or WorkerAccount containers, not in the employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex PersonalInfo { get; set; }

        /// <summary>
        /// If true, the Worker has registered and maintains his / her own personal info.
        /// <br/>If false, the Worker account is created and still maintained by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRegistered { get; set; }

        /// <summary>
        /// Workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// General information about the Employment relation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentRelationInfo
    {
        /// <summary>
        /// The Account ID of the Worker if Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerAccountId { get; set; }

        /// <summary>
        /// Identifier in a source system. Used in imports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// User friendly employment relation type that is used to set other more technical types and Incomes Registry properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationType? Type { get; set; }

        /// <summary>
        /// The bank account number for salary payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

        /// <summary>
        /// Type of additional income earner data by National Incomer Register classification . If several types apply, all of them should be selected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irIncomeEarnerTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IncomeEarnerType> IrIncomeEarnerTypes { get; set; }

        /// <summary>
        /// Type for the pension insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCalculation? PensionCalculation { get; set; }

        /// <summary>
        /// Rules (e.g. effect of monthly lower limit) for pension calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionRule? PensionRule { get; set; }

        /// <summary>
        /// The id of the pension company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCompany? PensionCompany { get; set; }

        /// <summary>
        /// The pension contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionContractNumber { get; set; }

        /// <summary>
        /// The id of the insurance company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InsuranceCompany? InsuranceCompany { get; set; }

        /// <summary>
        /// The accident insurance contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceContractNumber { get; set; }

        /// <summary>
        /// Taxcard type from the employment point of view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationTaxcard? Taxcard { get; set; }

        /// <summary>
        /// Status of this employment relationship
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationStatus? Status { get; set; }

        /// <summary>
        /// Worker's preferred salary payment method: bank account, external etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationSalaryPaymentMethod? SalaryPaymentMethod { get; set; }

        /// <summary>
        /// Start date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Duration of the employment. If true, the employment relation is for a fixed term.
        /// <br/>Otherwise (which is the default) the employment relation continues until further notice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFixedTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixedTerm { get; set; }

        /// <summary>
        /// Indicates that the employment relation has been terminated.
        /// <br/>Saving with this status also makes the employment relation Archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTerminated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTerminated { get; set; }

        /// <summary>
        /// Employment registration code for Incomes Registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentRegCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentRegCode { get; set; }

    }

    /// <summary>
    /// Describes the work that is being performed - mainly for Employment relation purposes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkDescription
    {
        /// <summary>
        /// Free text description of the work that is being performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Occupation classification, used at least for Accident insurance purposes, but may be used for other reporting. 
        /// <br/>For Finnish Salaries use the Statistics Finland 
        /// <br/>"Classification of Occupations 2010" (TK10): https://www.stat.fi/meta/luokitukset/ammatti/017-2018-05-15/index_en.html
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode { get; set; }

        /// <summary>
        /// Secondary occupation classification. Some earnings payment reports may require two occupation codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode2 { get; set; }

        /// <summary>
        /// Contains default calculation rows for the worker.
        /// <br/>Typically used for setting for example monthly salary or hourly salary price for workers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDefaults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDefinedRow> SalaryDefaults { get; set; }

        /// <summary>
        /// Default bases for wage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WageBasis? WageBasis { get; set; }

        /// <summary>
        /// Number of hours per month defined in the employment contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monthlyHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MonthlyHours { get; set; }

        /// <summary>
        /// Contains calculation specific data for accounting (both cost and financial accounting).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationAccounting Accounting { get; set; }

    }

    /// <summary>
    /// Contains values that are needed when creating an employment, but where changing is restricted in the future:
    /// <br/>E.g. names and personalId are required when creating a new employment, but once a calculation is created (or at least paid),
    /// <br/>editing of theses is no longer possible. See the editing rules for individual properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentIdentity
    {
        /// <summary>
        /// First name of the Worker. Value is required when creating a new employment, it cannot be modified after initial create:
        /// <br/>Instead you should just delete the Worker (only allowed if no paid salaries etc.) and create a new one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of the worker. Editing rules are the same as with FirstName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Personal ID (hetu) of the worker (currently required). Editing rules are the same as with FirstName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Avatar picture. If set, this is used in avatar instead of Initials (automatic FirstName/LastName) and color.
        /// <br/>May be changed until the Worker registers to the service. After this, the Worker can upload their own image or choose to remove the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarImg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvatarImg { get; set; }

        /// <summary>
        /// Avatar color for visual icon together with initials. Use web compatible rgb values, e.g. "#FF00FF" or "rgb(255, 0, 255)".
        /// <br/>Editing rules are the same as with AvatarImg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Language of the user in user interfaces and print-outs (most significantly the salary slip).
        /// <br/>Editing rules are the same as with AvatarImg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

    }

    /// <summary>
    /// Properties of the employment for international situations: Working abroad or foreign worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentRelationInternational
    {
        /// <summary>
        /// Country of residence for non-recident of Finland (rajatusti verovelvollinen)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Country? Country { get; set; }

        /// <summary>
        /// Identifier for non-recident of Finland in the country of residence.
        /// <br/>Type of the identifier is specified in IdType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForeignId { get; set; }

        /// <summary>
        /// Type of ForeignId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InternationalIdentifier? IdType { get; set; }

        /// <summary>
        /// The non-resident taxcard (or percent without taxcard) that is used if the taxcard in Employment.Info.Taxcard is set to TaxAtSource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAtSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxAtSource TaxAtSource { get; set; }

        /// <summary>
        /// Types of social security for international situations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InternationalSocialSecurityType? SocialSecurity { get; set; }

        /// <summary>
        /// Exceptions to standard social security cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<InternationalSocialSecurityException> SocialSecurityExceptions { get; set; }

    }

    /// <summary>
    /// Advanced contact information with strongly typed country and type information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAdvanced
    {
        /// <summary>
        /// Type of contact when specification allows several contacts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ContactType? Type { get; set; }

        /// <summary>
        /// Contact e-mail address. Always lower invariant, trimmed and empty string set to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Street address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// City or community (postitoimipaikka)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Country as defined as
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Country? Country { get; set; }

        /// <summary>
        /// Name of the country as free text if Country is Other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOtherName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryOtherName { get; set; }

    }

    /// <summary>
    /// Specifies how the holidays are handled for this Worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidaySpecification
    {
        /// <summary>
        /// Defines how the holidays are handled for the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayCode? Code { get; set; }

        /// <summary>
        /// Defines the number of holidays that the worker is entitled per month worked.
        /// <br/>If the value is set to 0 (default), the number is 2 for first year and 2,5 thereafter as defined in the law.
        /// <br/>To actually se the daysPerMonth to zero, use code value other than Permanent14Days or Permanent35Hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accrualFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AccrualFixed { get; set; }

        /// <summary>
        /// Holiday compensation as percent of salary (11.5% is 0.115)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Compensation { get; set; }

        /// <summary>
        /// Method for paying holiday bonus in this salary calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayBonusPaymentMethod? BonusMethod { get; set; }

        /// <summary>
        /// Holiday bonus for the worker (lomaraha, lomaltapaluuraha).
        /// <br/>Typically 0.5 for 50%.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bonus { get; set; }

    }

    /// <summary>
    /// The information about tax at source, typically from  non-resident taxcard (lähdeverokortti) for non-residents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxAtSource
    {
        /// <summary>
        /// Tax percent. As of writing, this is 35% by default and 15% for athletes and performingg artists,
        /// <br/>but the percentage may change and bust be checked from the taxcard (or legistlattion if there is no card available).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

        /// <summary>
        /// Monthly deduction (e.g. 510 €/month) if one can be used for this card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionMonthly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionMonthly { get; set; }

        /// <summary>
        /// Daily deduction (e.g. 17 €/day) if one can be used for this card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionDaily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionDaily { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfEmploymentListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmploymentListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of employment relations in the user interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Employment specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentData
    {
        /// <summary>
        /// Type for the pension insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCalculation? PensionCalculation { get; set; }

        /// <summary>
        /// Taxcard type from the employment point of view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationTaxcard? Taxcard { get; set; }

        /// <summary>
        /// Type of the employment relation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationType? Type { get; set; }

        /// <summary>
        /// Start date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Duration of the employment. If true, the employment relation is for a fixed term.
        /// <br/>Otherwise (which is the default) the employment relation continues until further notice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFixedTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixedTerm { get; set; }

        /// <summary>
        /// Indicates that the employment relation has been terminated.
        /// <br/>This is the value stored in the database as opposed to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTerminated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTerminated { get; set; }

        /// <summary>
        /// The search logic returns the active state of the employment here in relation to queried date (or today).
        /// <br/>Note that you cannot query based on this dynamic parameter: All values in the search index are null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

    }

    /// <summary>
    /// The BlobFile stores metadata about miscellaneous BLOB-files that are stored to the system.
    /// <br/>For example Receipts and Authorizations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlobFile
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The logical container - first level folder for the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public BlobRepository? Container { get; set; }

        /// <summary>
        /// Strongly typed logical type of the file. For user files, this is a sub folder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public BlobFileType? Type { get; set; }

        /// <summary>
        /// File type (mime type etc.) based on the ending of the file name.
        /// <br/>Null for folders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileType FileType { get; set; }

        /// <summary>
        /// A user friendly name that can be used in listings.
        /// <br/>In the upload scenarios this is usually the original file name when uploaded. 
        /// <br/>It is not necessarily unique. No path information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userFriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserFriendlyName { get; set; }

        /// <summary>
        /// Technical file name in storage.  In practical terms, this is the relative path
        /// <br/>excluding the container part "/[container]/". 
        /// <br/>I.e. this property is without the starting slash "/". 
        /// <br/>It must be unique and is used for Uri.
        /// <br/>For user files this is constructed "[Username]/[Type]/[UniqueFileName].[xxx]"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }

        /// <summary>
        /// Full unique URI in the storage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blobUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlobUri { get; set; }

        /// <summary>
        /// If created, contains uri to a PNG image for preview purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previewUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviewUri { get; set; }

        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// The length of the file in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Length { get; set; }

        /// <summary>
        /// If true, this is a collection (folder in file system)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCollection { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BlobFileMetadata Metadata { get; set; }

        /// <summary>
        /// The workflow data for manual editing and approval purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileType
    {
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        [Newtonsoft.Json.JsonProperty("isImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsImage { get; set; }

        [Newtonsoft.Json.JsonProperty("isText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsText { get; set; }

    }

    /// <summary>
    /// Metadata related to blob files as a strongly typed object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlobFileMetadata
    {
        /// <summary>
        /// Whether the document is digitally signed (or manually checked as being signed).
        /// <br/>At the time of writing, this is used only for AuthorizationPdf documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSigned { get; set; }

        /// <summary>
        /// Logical date for the file. E.g. first of the month for a monthly report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogicalDate { get; set; }

        /// <summary>
        /// Subtype is internal typing within a BlobFileType. This may or may not be a sub-folder.
        /// <br/>There is no enumeration on File level - there may be one under services specific to one BlobFileType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubType { get; set; }

        /// <summary>
        /// Avatar object related to the report.
        /// <br/>For example for the salary payments this is the other party (employer or worker)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Identifier of the original calculation etc. business object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Arbitrary metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfFileListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of reports in the user interface.
    /// <br/>It contains all essential information of the report and is basis for searching, filtering and sorting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Report specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileData
    {
        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Number of workers in the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkerCount { get; set; }

        /// <summary>
        /// Number of calculations in the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculationCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CalculationCount { get; set; }

        /// <summary>
        /// Official id for the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// A user friendly name that can be used in listings.
        /// <br/>In the upload scenarios this is usually the original file name when uploaded. 
        /// <br/>It is not necessarily unique. No path information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userFriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserFriendlyName { get; set; }

        /// <summary>
        /// Technical file name in storage.  In practical terms, this is the relative path
        /// <br/>excluding the container part "/[container]/". 
        /// <br/>I.e. this property is without the starting slash "/". 
        /// <br/>It must be unique and is used for Uri.
        /// <br/>For user files this is constructed "[Username]/[Type]/[UniqueFileName].[xxx]"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }

    }

    /// <summary>
    /// Result item of the EInvoice address query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EInvoiceAddress
    {
        /// <summary>
        /// Name for the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverName { get; set; }

        /// <summary>
        /// Official id of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiverOfficialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverOfficialId { get; set; }

        /// <summary>
        /// Receiver EInvoice address of company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receiver { get; set; }

        /// <summary>
        /// Intermediator id for this receiver address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intermediator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Intermediator { get; set; }

        /// <summary>
        /// Intermediator name for this receiver address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intermediatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IntermediatorName { get; set; }

    }

    /// <summary>
    /// API worker import object.
    /// <br/>The API uses this object for mass operations for creating or assuring the worker employment relations in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerImport
    {
        /// <summary>
        /// Company number in the the trade register (Y-tunnus). 
        /// <br/>Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
        /// <br/>Also, the international VAT format is allowed: FI12345678
        /// <br/>This field is optional and defaults to the company number of the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Additional parameters for import. Defaults to string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Item for import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerAccount Item { get; set; }

        /// <summary>
        /// Validation for the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Result object of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportResultOfString Result { get; set; }

    }

    /// <summary>
    /// Account data that is relevant for a Worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerAccount
    {
        /// <summary>
        /// Tha bank account number of the Worker - in Iban format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

        /// <summary>
        /// If created (and still owned) by an employer, this is the AccountOwnerId of the employer who created this account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployerId { get; set; }

        /// <summary>
        /// The Person ID of the worker if known.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialPersonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialPersonId { get; set; }

        /// <summary>
        /// Age range that is relevant to workers salary calculation and/or employment.
        /// <br/>Set this especially if OfficialPersonId is not set. 
        /// <br/>If OfficialPersonId is valid, this property is always set based on it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ageRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AgeRange? AgeRange { get; set; }

        /// <summary>
        /// Current Employment Relation: The data that is owned by the Employer about the Worker 
        /// <br/>even if the Worker has registered and created an account.
        /// <br/>If employer has several Employment Relations, this is the one that is marked as Primary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerAccountEmployment Employment { get; set; }

        /// <summary>
        /// Provides validation errors currently only in Save operations,
        /// <br/>but potentially in the future also in detail/list views.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// The unique id for the employment. This does not change within one employment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Entity type of the account.
        /// <br/>Type PersonCreatedByEmployer means that the Worker has not yet signed into the system and there may be multiple instances of the same logical person (Official ID) - one for each employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// If true the object Account is and Employer account - it has the EmployerInfo object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEmployer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmployer { get; set; }

        /// <summary>
        /// If true the object Account is and Worker account - it has the WorkerInfo object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWorker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWorker { get; set; }

        /// <summary>
        /// If true, the account has been verified. Typically this means a digitally signed contract.
        /// <br/>This means that the account also has an Identity object.
        /// <br/>However, as the Identity object contains confidential information, it is not necessarily present in all method calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Avatar is the visual representation of the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Contact information for the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Language of the person/company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

        /// <summary>
        /// Service model for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceModelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceModelId { get; set; }

        /// <summary>
        /// Workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Result of the import. Both status and possible item are returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiImportResultOfString
    {
        /// <summary>
        /// Status of the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiImportStatus? Status { get; set; }

        /// <summary>
        /// Result object of the import. Defaults to id of the imported object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

    }

    /// <summary>
    /// Employment Relation as it is shown as part of WorkerAccount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerAccountEmployment
    {
        /// <summary>
        /// Type of the employment relation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationType? Type { get; set; }

        /// <summary>
        /// Type of additional income earner data by National Incomer Register classification . If several types apply, all of them should be selected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irIncomeEarnerTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IncomeEarnerType> IrIncomeEarnerTypes { get; set; }

        /// <summary>
        /// Describes the work that is being performed in this Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("work", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkDescription Work { get; set; }

        /// <summary>
        /// Defines how the holidays are specified to this Worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidaySpecification Holidays { get; set; }

        /// <summary>
        /// Usecase is data related to the source and processing of the Employment data outside the Salaxy backend service / system.
        /// <br/>Typically, Usecase data would be processed by an external system that has originally created the 
        /// <br/>Employment Relation (Worker / Employee in many systems). E.g. expenses system, hourly reporting system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// Type for the pension insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCalculation? PensionCalculation { get; set; }

        /// <summary>
        /// Rules (e.g. effect of monthly lower limit) for pension calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionRule? PensionRule { get; set; }

        /// <summary>
        /// The id of the pension company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCompany? PensionCompany { get; set; }

        /// <summary>
        /// The pension contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionContractNumber { get; set; }

        /// <summary>
        /// The id of the insurance company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InsuranceCompany? InsuranceCompany { get; set; }

        /// <summary>
        /// The accident insurance contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceContractNumber { get; set; }

        /// <summary>
        /// Taxcard type from the employment point of view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationTaxcard? Taxcard { get; set; }

        /// <summary>
        /// Worker's salary payment method, bank account, external etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationSalaryPaymentMethod? SalaryPaymentMethod { get; set; }

        /// <summary>
        /// Start date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Duration of the employment. If true, the employment relation is for a fixed term.
        /// <br/>Otherwise (which is the default) the employment relation continues until further notice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFixedTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixedTerm { get; set; }

        /// <summary>
        /// Indicates that the employment relation has been terminated.
        /// <br/>Saving with this status also makes the employment relation Archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTerminated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTerminated { get; set; }

        /// <summary>
        /// If true, the worker is the same person as the actual signed owner of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAccountOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAccountOwner { get; set; }

        /// <summary>
        /// Identifier in a source system. Used in imports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// Employment registration code for Incomes Registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentRegCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentRegCode { get; set; }

    }

    /// <summary>
    /// API company import object.
    /// <br/>The API uses this object for mass operations for creating or assuring the customer companies in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyImport
    {
        /// <summary>
        /// Company number in the the trade register (Y-tunnus). 
        /// <br/>Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
        /// <br/>Also, the international VAT format is allowed: FI12345678
        /// <br/>This field is optional and defaults to the company number of the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Additional parameters for import. Defaults to string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Item for import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssureCompanyAccountRequest Item { get; set; }

        /// <summary>
        /// Validation for the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Result object of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportResultOfPartnerCompanyAccountInfo Result { get; set; }

    }

    /// <summary>
    /// Request to assure that a company account exists:
    /// <br/>Either an account is returned or an account stub (non-verified) will be created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssureCompanyAccountRequest
    {
        /// <summary>
        /// Company number in the the trade register (Y-tunnus). 
        /// <br/>Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
        /// <br/>Also, the international VAT format is allowed: FI12345678
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OfficialId { get; set; }

        /// <summary>
        /// The account identifier at the partner site. 
        /// <br/>If present, this ID is used to restrict the authorization to one account at partner site only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerAccountId { get; set; }

        /// <summary>
        /// Contact e-mail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number for the contact person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// First name of the contact person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactFirstName { get; set; }

        /// <summary>
        /// Last name of the contact person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactLastName { get; set; }

        /// <summary>
        /// The primary partner account for the new company to create.
        /// <br/>If the company already exists and has given authorization to the primary partner, and does not have any primary partner, the primary partner will be set.
        /// <br/>Please note, that the calling account must have the authorization to the primary partner account, or
        /// <br/>be the primary partner itself.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proxyPartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProxyPartner { get; set; }

        /// <summary>
        /// Language preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

    }

    /// <summary>
    /// Result of the import. Both status and possible item are returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiImportResultOfPartnerCompanyAccountInfo
    {
        /// <summary>
        /// Status of the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiImportStatus? Status { get; set; }

        /// <summary>
        /// Result object of the import. Defaults to id of the imported object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnerCompanyAccountInfo Item { get; set; }

    }

    /// <summary>
    /// Information about a Customer account for a Partner
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartnerCompanyAccountInfo
    {
        /// <summary>
        /// Account Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Account Id formatted for dispaly to end user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountIdFormatted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountIdFormatted { get; set; }

        /// <summary>
        /// Avatar for display information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// If true, the account has a verified owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// If true, the current user (the partner) is authorized to access the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAuthorized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAuthorized { get; set; }

        /// <summary>
        /// The partner account ID to which the access is currently restricted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerAccountId { get; set; }

    }

    /// <summary>
    /// Import object for E-invoice delivery.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EInvoicingRequest
    {
        /// <summary>
        /// Company number in the the trade register (Y-tunnus). 
        /// <br/>Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
        /// <br/>Also, the international VAT format is allowed: FI12345678
        /// <br/>This field is optional and defaults to the company number of the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Additional parameters for import. Defaults to string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Item for import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Validation for the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Result object of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportResultOfObject Result { get; set; }

    }

    /// <summary>
    /// Result of the import. Both status and possible item are returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiImportResultOfObject
    {
        /// <summary>
        /// Status of the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiImportStatus? Status { get; set; }

        /// <summary>
        /// Result object of the import. Defaults to id of the imported object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Item { get; set; }

    }

    /// <summary>
    /// API calculation import object.
    /// <br/>The API uses this object for mass operations for adding calculations to a new or existing payroll object.
    /// <br/>If the calculation object does not contain a valid payroll-ID, a new payroll will be created.
    /// <br/>Returns payroll ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationImport
    {
        /// <summary>
        /// Company number in the the trade register (Y-tunnus). 
        /// <br/>Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
        /// <br/>Also, the international VAT format is allowed: FI12345678
        /// <br/>This field is optional and defaults to the company number of the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Additional parameters for import. Defaults to string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Item for import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Calculation Item { get; set; }

        /// <summary>
        /// Validation for the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Result object of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportResultOfString Result { get; set; }

    }

    /// <summary>
    /// API worker check object.
    /// <br/>The API uses this object for checking the existence of a worker with employment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerCheck
    {
        /// <summary>
        /// Company number in the the trade register (Y-tunnus). 
        /// <br/>Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
        /// <br/>Also, the international VAT format is allowed: FI12345678
        /// <br/>This field is optional and defaults to the company number of the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Item id to check.
        /// <br/>This can be external ID, official ID or Salaxy ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Validation for the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Result object of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiCheckResultOfWorkerAccountOf Result { get; set; }

    }

    /// <summary>
    /// Result of the check. Both status and possible item are returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiCheckResultOfWorkerAccountOf
    {
        /// <summary>
        /// Status of the check
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiCheckStatus? Status { get; set; }

        /// <summary>
        /// Result object of the check. Defaults to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkerAccount> Item { get; set; }

    }

    /// <summary>
    /// Import object for invoice creation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoicingRequest
    {
        /// <summary>
        /// Company number in the the trade register (Y-tunnus). 
        /// <br/>Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
        /// <br/>Also, the international VAT format is allowed: FI12345678
        /// <br/>This field is optional and defaults to the company number of the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Additional parameters for import. Defaults to string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Item for import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Item { get; set; }

        /// <summary>
        /// Validation for the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Result object of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportResultOfInvoiceOf Result { get; set; }

    }

    /// <summary>
    /// Result of the import. Both status and possible item are returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiImportResultOfInvoiceOf
    {
        /// <summary>
        /// Status of the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiImportStatus? Status { get; set; }

        /// <summary>
        /// Result object of the import. Defaults to id of the imported object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Invoice> Item { get; set; }

    }

    /// <summary>
    /// Invoice for the pending payment in the business system.
    /// <br/>For example, a salary gross payment created for the salary calculation and delivered as an e-invoice to the employer.
    /// <br/>For example, a salary net payment, created for the employer which is self paying the net payment to the worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invoice
    {
        /// <summary>
        /// Group indicator.
        /// <br/>Invoices with the same group id can be paid in the same batch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        /// <summary>
        /// Invoice header details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceHeader Header { get; set; }

        /// <summary>
        /// Invoice recipient details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceRecipient Recipient { get; set; }

        /// <summary>
        /// Invoice payer details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoicePayer Payer { get; set; }

        /// <summary>
        /// List of invoice rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvoiceRow> Rows { get; set; }

        /// <summary>
        /// Invoice data in XML or json format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Invoice in pdf format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Pdf { get; set; }

        /// <summary>
        /// The workflow data for manual editing and approval purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Header for the invoice
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceHeader
    {
        /// <summary>
        /// Payment reference (e.g. RF0710010831).
        /// <br/>Please note that in salary payment scenarios, this is not necessarily unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Invoice Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Due date for the invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// The date for the actual period for which this invoice is done.
        /// <br/>For salaries, this is salary date, for monthly / quarterly payments, this is the first day of period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Total amount for the invoice excluding VAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalExVat { get; set; }

        /// <summary>
        /// Total payable amount for the invoice including VAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// The free text that is displayed / sent with the invoice.
        /// <br/>May have multiple lines.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Channel that is used for paying the invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? Channel { get; set; }

        /// <summary>
        /// Invoice type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InvoiceType? Type { get; set; }

        /// <summary>
        /// The external ID is used for matching the executed payment from the 3rd party system
        /// <br/>to the pending payment in the Palkkaus system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The current notified status of the invoice in external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InvoiceStatus? Status { get; set; }

        /// <summary>
        /// List of business object ids (typically calculations) on which the payment is based on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// Period for the Invoice: Work period, month / quarter of sidecosts etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// The payment type of the invoice. If the payment channel does not support the requested payment type (e.g. Salary),
        /// <br/>it should set here the payment type that it used (e.g. Default).
        /// <br/>Payment channel should also expect new types to be introduced, without that being a breaking change.
        /// <br/>Currently, we expect Default always be supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InvoicePaymentType? PaymentType { get; set; }

    }

    /// <summary>
    /// Payment receiver party of the invoice.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceRecipient
    {
        /// <summary>
        /// The full name of the payment receiver for payment purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>
        /// The International Bank Account Number of the receiver.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban { get; set; }

        /// <summary>
        /// This is an official identifier of the party: Finnish Personal Id (HETU) for a Person or Company Id (Y-tunnus) for a company or association.
        /// <br/>WARNING: This is currently needed for Finvoice only (https://www.finanssiala.fi/finvoice/Sivut/default.aspx). As such we consider removing it from persons. 
        /// <br/>Please inform if you use this property!
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Identifier in a source system. Used in imports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// Optional contact info. Not available for all recipients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// The ultimate beneficiary of the money: 
        /// <br/>This may be a Palkkaus.fi Worker Account (Avatar id is not null)
        /// <br/>or some other entity: Tax authorities, pension company etc. (Avatar id is null).
        /// <br/>Typically beneficiary is the same as Iban, OfficialId, FullName and Contact in this object,
        /// <br/>but this is not true in edge cases (e.g. customer funds account).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beneficiary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex Beneficiary { get; set; }

    }

    /// <summary>
    /// Payment payer party of the invoice.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoicePayer
    {
        /// <summary>
        /// Avatar is the visual representation of the party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Contact information for the party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Official identifier of the party:
        /// <br/>Finnish HETU (Soc. sec. number) for a Person or Y-tunnus (Company ID for a company or association).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Optional ID for identifying the party in the third party system.
        /// <br/>This is the same partner key that is given as part of Single Sign-On process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerKey { get; set; }

    }

    /// <summary>
    /// Row for the invoice
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceRow
    {
        /// <summary>
        /// Article Identifier is given by seller, EAN etc.
        /// <br/>In the case of Salaxy salaries, this is CalculationRowType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// Name of the product or service.
        /// <br/>In the case of Salaxy salaries, this is language versioned text of CalculationRowType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleName { get; set; }

        /// <summary>
        /// Message (RowFreeText in Finvoice) is the message is mainly designed for accounting systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count (DeliveredQuantity in Finvoice) is the quantity of product or service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price including VAT (UnitPriceVatIncludedAmount, Yksikköhinta verollinen)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Price of one product or service without Vat (UnitPriceAmount, Yksikköhinta veroton). 
        /// <br/>Yksikköhinta voidaan ilmoittaa myös verollisena UnitPriceVatIncludedAmount- elementissä laskutuskäytännön ja verottajan ALV-ohjeistuksen mukaan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceExVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PriceExVat { get; set; }

        /// <summary>
        /// Vat percent related to the product or service (RowVatRatePercent, Alv%)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatPercent { get; set; }

        /// <summary>
        /// Row total excluding VAT (RowVatExcludedAmount, Yhteensä veroton)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalExVat { get; set; }

        /// <summary>
        /// Row total with VAT (RowAmount, Yhteensä verollinen)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// Suggested account number (RowNormalProposedAccountIdentifier).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountingAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountingAccountNumber { get; set; }

        /// <summary>
        /// Textual code for accounting mapping (RowProposedAccountText, Raportointikoodi).
        /// <br/>In Finvoice: "Accounting information agreed between seller and buyer."
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Business object id (typically calculation) on which the row is based on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessObject { get; set; }

    }

    /// <summary>
    /// Check object for invoice settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceSettingsCheck
    {
        /// <summary>
        /// Company number in the the trade register (Y-tunnus). 
        /// <br/>Format is "1234567-8" - 7 numbers, one control character, with or without the dash.
        /// <br/>Also, the international VAT format is allowed: FI12345678
        /// <br/>This field is optional and defaults to the company number of the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Item id to check.
        /// <br/>This can be external ID, official ID or Salaxy ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Validation for the import
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Result object of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiCheckResultOfInvoiceSettings Result { get; set; }

    }

    /// <summary>
    /// Result of the check. Both status and possible item are returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiCheckResultOfInvoiceSettings
    {
        /// <summary>
        /// Status of the check
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiCheckStatus? Status { get; set; }

        /// <summary>
        /// Result object of the check. Defaults to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceSettings Item { get; set; }

    }

    /// <summary>
    /// Settings related to invoices that are sent to customers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceSettings
    {
        /// <summary>
        /// Receiver's address for the e-invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eInvoiceReceiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EInvoiceReceiver { get; set; }

        /// <summary>
        /// Receiver's operator for the e-invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eInvoiceIntermediator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EInvoiceIntermediator { get; set; }

        /// <summary>
        /// SEPA maksatustunnus
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sepaBankPartyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SepaBankPartyId { get; set; }

        /// <summary>
        /// Employer's bank account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

    }

    /// <summary>
    /// Contains order data for Varma pensions (TyEL, YEL) and required operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VarmaPensionOrder
    {
        /// <summary>
        /// Orderer information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceParty Orderer { get; set; }

        /// <summary>
        /// Action for the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public VarmaPensionOrderAction? Action { get; set; }

        /// <summary>
        /// Validation information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// YEL data for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VarmaPensionOrderYel Yel { get; set; }

        /// <summary>
        /// TyEL data for the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tyel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VarmaPensionOrderTyel Tyel { get; set; }

    }

    /// <summary>
    /// Party in an Varma Invoice: Either Payer or Recipient.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceParty
    {
        /// <summary>
        /// Finnish Company ID (Y-tunnus).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyId { get; set; }

        /// <summary>
        /// Organisation name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Contact information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Contact person Full name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactPersonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPersonName { get; set; }

    }

    /// <summary>
    /// Varma pension order YEL details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VarmaPensionOrderYel
    {
        /// <summary>
        /// Personal id number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Payer definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public VarmaPensionOrderYelPayer? Payer { get; set; }

        /// <summary>
        /// If true, indicates that existing contract will be moved to Varma.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMove { get; set; }

        /// <summary>
        /// Estimated yearly income.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yearlyIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YearlyIncome { get; set; }

        /// <summary>
        /// Start date for the new pension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// Movement timing. (Q1,Q2,Q3 or Q4, or as soon as possible)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveMoment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoveMoment { get; set; }

        /// <summary>
        /// Indicates if the existing yearly income estimate will be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isYearlyIncomeChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsYearlyIncomeChange { get; set; }

    }

    /// <summary>
    /// Varma pension order TyEL details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VarmaPensionOrderTyel
    {
        /// <summary>
        /// Personal id number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// If true, indicates that existing contract will be moved to Varma.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMove { get; set; }

        /// <summary>
        /// Estimated yerly income.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yearlyIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YearlyIncome { get; set; }

        /// <summary>
        /// Start year for the new order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartYear { get; set; }

        /// <summary>
        /// Start month for the new order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartMonth { get; set; }

        /// <summary>
        /// Movement timing. (Q1,Q2,Q3 or Q4, or as soon as possible)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveMoment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoveMoment { get; set; }

    }

    /// <summary>
    /// Local Tapiola insurance order API object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalTapiolaInsuranceOrder
    {
        /// <summary>
        /// Status of the Local Tapiola insurance order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LocalTapiolaInsuranceOrderStatus? Status { get; set; }

        /// <summary>
        /// Information about the company placing the Local Tapiola insurance order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalTapiolaInsuranceOrderCompanyInfo Company { get; set; }

        /// <summary>
        /// Information about the Local Tapiola worker insurance order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LocalTapiolInsuranceOrderInfo> Items { get; set; }

        /// <summary>
        /// Validation information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Information required for an insured company with a Local Tapiola occupational accident
    /// <br/>insurance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalTapiolaInsuranceOrderCompanyInfo
    {
        /// <summary>
        /// Company details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex Details { get; set; }

        /// <summary>
        /// Company address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Address { get; set; }

        /// <summary>
        /// If true, the address of the Principal Place Of Business differs from the company address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasPrincipalBusinessAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPrincipalBusinessAddress { get; set; }

        /// <summary>
        /// Address of the principal place of business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principalBusinessAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact PrincipalBusinessAddress { get; set; }

        /// <summary>
        /// Information of the insured companys delegate person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalTapiolaInsuranceOrderCompanyContactPerson ContactPerson { get; set; }

        /// <summary>
        /// Company owner structure is too complex to be fully represented with simple form data
        /// <br/>i.e. list of InsuranceOrderCompanyOwnerInfo objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complexOwnerStructure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ComplexOwnerStructure { get; set; }

        /// <summary>
        /// List of beneficial owners of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BeneficialOwner> Owners { get; set; }

        /// <summary>
        /// List of other beneficiaries than beneficial owners of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beneficiaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Beneficiary> Beneficiaries { get; set; }

    }

    /// <summary>
    /// Information required with a Local Tapiola worker accident insurance order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalTapiolInsuranceOrderInfo
    {
        /// <summary>
        /// Type of the Local Tapiola insurance order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LocalTapiolaInsuranceOrderType? OrderType { get; set; }

        /// <summary>
        /// Start date of the insurance. Only valid for new occupational accident insurance and
        /// <br/>entrepreneur insurance. If insurance is moved to Local Tapiola from another insurance
        /// <br/>company, StartingPoint should be used instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// Billing interval (1, 2, 3 or 4 times per year). Applies only to entrepreneur insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BillingInterval { get; set; }

        /// <summary>
        /// Name of the old insurance company, if the insurance is transferred to Local Tapiola
        /// <br/>from some other insurance company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldInsuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldInsuranceCompany { get; set; }

        /// <summary>
        /// Industry that the company operates in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Industry { get; set; }

        /// <summary>
        /// Occupation types and income estimates. Can be many entries for an occupational accident
        /// <br/>insurance and only a single entry for an entrepreneur insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LocalTapiolaInsuranceOrderOccupation> Occupations { get; set; }

        /// <summary>
        /// Name of the entrepreneur.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuredName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredName { get; set; }

        /// <summary>
        /// Social security number of the entrepreneur.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuredOfficialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuredOfficialId { get; set; }

    }

    /// <summary>
    /// Information required for a company contact person with a Local Tapiola occupational accident
    /// <br/>insurance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalTapiolaInsuranceOrderCompanyContactPerson
    {
        /// <summary>
        /// The authorization type of for the contact person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LocalTapiolaInsuranceOrderAuthorizationType? AuthorizationType { get; set; }

        /// <summary>
        /// Avatar for the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Official id of the person or company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Bank account number (IBAN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

    }

    /// <summary>
    /// Occupation information required with a new Local Tapiola worker occupational accident
    /// <br/>insurance order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalTapiolaInsuranceOrderOccupation
    {
        /// <summary>
        /// Occupation code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode { get; set; }

        /// <summary>
        /// Occupation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationName { get; set; }

        /// <summary>
        /// Estimated annual salary income.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedIncome { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfInvoiceListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvoiceListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of invoices in the user interface.
    /// <br/>It contains all essential information of the report and is basis for searching, filtering and sorting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InvoiceStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Invoice specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceData
    {
        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Channel that is used for paying the invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? Channel { get; set; }

        /// <summary>
        /// Invoice Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Due date for the invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// Start of period for the Invoice: Work period, month / quarter of sidecosts etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodStart { get; set; }

        /// <summary>
        /// End of period for the Invoice: Work period, month / quarter of sidecosts etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodEnd { get; set; }

    }

    /// <summary>
    /// Defines a set of calculations based on identifiers potentially unsaved Calculation objects as well as Payrolls.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationCollection
    {
        /// <summary>
        /// Collection of calculation ID's to be fetched from storage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ids { get; set; }

        /// <summary>
        /// Collection of payroll ID's to be fetched from storage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrollIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PayrollIds { get; set; }

        /// <summary>
        /// Collection of inline calculations that may be saved or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Calculation> Calcs { get; set; }

        /// <summary>
        /// Collection of inline Payroll objects that may be saved or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrolls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PayrollDetails> Payrolls { get; set; }

    }

    /// <summary>
    /// New version 03 of Payroll. Payroll (Palkkalista) is a list of employees who receive salary or wages from a particular organization.
    /// <br/>Typical usecase is that a a company has e.g. a monthly salary list that is paid
    /// <br/>at the end of month. For next month, a copy is then made from the latest list and
    /// <br/>the copy is potentially modified with the changes of that particular month.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayrollDetails
    {
        /// <summary>
        /// Snapshots of the calculations based on the ID's specified in Info
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Calculation> Calcs { get; set; }

        /// <summary>
        /// When saved or validated, provides a validation object for each calculation:
        /// <br/>Whether the calculations are ready for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiListItemValidation> Validations { get; set; }

        /// <summary>
        /// A usecase for creating and editing Payroll lists.
        /// <br/>In practice, a usecase is either a user interface or a microservice that provides a Payroll processing
        /// <br/>and it may be implemented outside Salaxy.
        /// <br/>Provides the possibility to store useacase specific data as part of the Payroll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// The workflow data for manual editing and approval purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Stores the data for automation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiAutomation Automation { get; set; }

        /// <summary>
        /// Input that defines the Payroll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayrollInput Input { get; set; }

        /// <summary>
        /// General summary information about the Payroll and when it was las processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payroll03Info Info { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// ApiValidation object that is specialized for list items.
    /// <br/>Provides if and index properties for connecting a validation to a specific item in the list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiListItemValidation
    {
        /// <summary>
        /// Identifier of the item this validation is for.
        /// <br/>Identifiers are not always available (if the item has not been saved), so index is a more generic approach.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Zero based index of the item this validation is for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        /// <summary>
        /// If true, the data is valid - no errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// If true, has required fields missing data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasAllRequiredFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAllRequiredFields { get; set; }

        /// <summary>
        /// Validation errors on invalid field values. 
        /// <br/>Note that required fields missing error messages are not here. Only the invalid values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiValidationError> Errors { get; set; }

    }

    /// <summary>
    /// Defines the automation aspect of API objects: Recurrence / Scheduling and Actions (Alarms in ICalendar).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiAutomation
    {
        /// <summary>
        /// Returns true, if the item is recurring
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRecurring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRecurring { get; set; }

        /// <summary>
        /// Identifier of a template (potentially a recurring item) that this object is occurence of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occurenceOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccurenceOf { get; set; }

        /// <summary>
        /// Gets or sets the recurrence rules to set the recurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recurrenceRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RecurrenceRules { get; set; }

        /// <summary>
        /// For a recurring event, gets or sets the rules for the recurring actions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalendarAction> ActionRules { get; set; }

    }

    /// <summary>
    /// Input that user defines about the Payroll
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayrollInput
    {
        /// <summary>
        /// Title that can be specified by the end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The Default Salary period for the Payroll.
        /// <br/>This may be overriden for an individual calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// The requested date for the SalaryDate from the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Defines the re-setting of the salary date in the calculation re-calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDateKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SalaryDateKind? SalaryDateKind { get; set; }

        /// <summary>
        /// Channel that is used for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? PaymentChannel { get; set; }

        /// <summary>
        /// What types of wages are paid with this payroll.
        /// <br/>May affect the rendering of the user interface (e.g. for holidays, hours and absences).
        /// <br/>Also affects which Workers are show in the add / link dialog by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WageBasis? WageBasis { get; set; }

        /// <summary>
        /// If true, the calculation rows are not updated from employment when the Payroll is copied.
        /// <br/>Default is that the rows and other data is updated in copy / create new etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noUpdateFromEmployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoUpdateFromEmployment { get; set; }

        /// <summary>
        /// If the Payroll is based on a template, this is the identifier of the template.
        /// <br/>The field can be manually set to null / ID to break / reconnect that connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        /// <summary>
        /// List of calculations that are attached to this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Calculations { get; set; }

        /// <summary>
        /// Identifier of the payroll in a source system. Used in imports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

    }

    /// <summary>
    /// Provides Read-only information about the Payroll
    /// <br/>In the case of non-paid Payrolls, this is the latest save/validation.
    /// <br/>In the case of paid Payrolls, this is the status of the Payroll when it was paid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payroll03Info
    {
        /// <summary>
        /// Date that the Info was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Count of calculations in this Payroll
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CalcCount { get; set; }

        /// <summary>
        /// Total gross salary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalGrossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalGrossSalary { get; set; }

        /// <summary>
        /// Total payment for the Payroll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPayment { get; set; }

        /// <summary>
        /// Total Palkkaus.fi fees for the Payroll
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fees { get; set; }

        /// <summary>
        /// If true, all calculations have been validated and they are valid for payment.
        /// <br/>If false, validation has not been done or some calculations are not valid for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadyForPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadyForPayment { get; set; }

        /// <summary>
        /// Status for the payroll and its calculations in the payment Workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PayrollStatus? Status { get; set; }

        /// <summary>
        /// Due date for the payroll. Date when the payment should be made to achieve SalaryDate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// Paid at date for the payroll. (Date of the employer's payment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PaymentDate { get; set; }

        /// <summary>
        /// The estimated date when the salary is withdrawable by the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// The reference number of the payment after payment is made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Original Payment reference number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalPaymentId { get; set; }

        /// <summary>
        /// Application id for invoicing etc. purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The MessageThread Id, if this payroll is referred in a message thread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageThreadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageThreadId { get; set; }

    }

    /// <summary>
    /// Salaxy calendar action is an extension to iCalendar Alarms:
    /// <br/>It supports the standard alarms: Display, Email and Audio, but also salaxy action scripts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarAction
    {
        /// <summary>
        /// Unique identifier in the Salaxy context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Action type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalendarActionType? Type { get; set; }

        /// <summary>
        /// Summary text for the action. Subject for E-mail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// Description text for the action. Body text for Email, Notification message for Display.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Attendees are E-mail receivers for Email Alert and potentially Display notifications in the future. 
        /// <br/>Script actions may also later use them when credentials, accounts or similar are needed fro execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attendees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalendarAttendee> Attendees { get; set; }

        /// <summary>
        /// Attachment files for the action. Attachments for E-mail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalendarAttachment> Attachments { get; set; }

        /// <summary>
        /// The duration trigger. Either this or TriggerDateTime must specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggerDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TriggerDuration { get; set; }

        /// <summary>
        /// The fixed date-time trigger. Only used if, Duration is not available.
        /// <br/>NOTE that Salaxy implements this feature a bit differently than rfc-5545: The spec says that for a repeating event, 
        /// <br/>the alarm should trigger only once (+repeat), but current Salaxy implementation would trigger the alarm the amount of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggerDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TriggerDateTime { get; set; }

        /// <summary>
        /// If specified, the action repeats number of times (in addition to the initial trigger) specified in this parameter with RepeatDuration values.
        /// <br/>If Repeat is more than 0, also RepeatDuration must be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repeat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Repeat { get; set; }

        /// <summary>
        /// Time between the repeats aftern the initial repeat.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repeatDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepeatDuration { get; set; }

    }

    /// <summary>
    /// Describes the calendar attendees in an avatar-visualization compatible way.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarAttendee
    {
        /// <summary>
        /// Account or Credentials uri IF the attendee is a Palkkaus.fi account. Otherwise null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// The display name of the attendee (CN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The E-mail address of the person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Entity type: person/company. In calendar attendees, defaults to Person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// Type of the Avatar picture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pictureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AvatarPictureType? PictureType { get; set; }

        /// <summary>
        /// Color - currently only used by type Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Initials - used by PictureType Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Initials { get; set; }

        /// <summary>
        /// URL of the picture if specified as picture (null in a case of type Icon)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Attachment for calendar event or Action/Alarm.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarAttachment
    {
        /// <summary>
        /// URI of the attachment. This is the default way of specifying attachments.
        /// <br/>TODO: Check if the Uri data type works in API. If not, switch to string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Attachment as inline data. Encoded with ValueEncoding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The file format type / mime type (e.g. "text/plain").
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formatType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatType { get; set; }

        /// <summary>
        /// Encoding for the inline data.
        /// <br/>TODO: Consider making read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueEncoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueEncoding { get; set; }

    }

    /// <summary>
    /// Provides a preview of how an invoice should be created.
    /// <br/>In the future versions, it is expected to return DIFF information on how
    /// <br/>potential previously created invoices would behave (e.g. if som invoices would be canceled or changed).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoicePreview
    {
        /// <summary>
        /// The invoice that exists / would be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceListItem Invoice { get; set; }

        /// <summary>
        /// If true, this invoice has already been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exists { get; set; }

    }

    /// <summary>
    /// Messages thread groups togehter a set of related messages and/or attachments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageThread
    {
        /// <summary>
        /// Title for the message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Status for the entire message thread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public MessageThreadStatus? Status { get; set; }

        /// <summary>
        /// The owner of the thread: The entity that has the right to delete or move the thread.
        /// <br/>This may or may not be the originator the message thread.
        /// <br/>The owner is typically Company or Household, in some cases Worker person.
        /// <br/>It should NOT be partner or person from a company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar OwnerInfo { get; set; }

        /// <summary>
        /// Palkkaus.fi id (IBAN) of the other party.
        /// <br/>The other party is the second entity(besides the owner) in that is juridically in the message.
        /// <br/>This may or may not be the originator the message thread.
        /// <br/>It is typically the Partner or Palkkaus.fi, but may also be the Worker in the future.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherParty { get; set; }

        /// <summary>
        /// The other party is the second entity (besides the owner) in that is juridically in the message.
        /// <br/>This may or may not be the originator the message thread.
        /// <br/>It is typically the Partner or Palkkaus.fi, but may also be the Worker in the future.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar OtherPartyInfo { get; set; }

        /// <summary>
        /// List of messages and attachments in this thread
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message> Messages { get; set; }

        /// <summary>
        /// The workflow from the Owner point-of-view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerWorkflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageThreadWorkflow OwnerWorkflow { get; set; }

        /// <summary>
        /// The workflow from the other party point-of-view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyWorkflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageThreadWorkflow OtherPartyWorkflow { get; set; }

        /// <summary>
        /// The workflow data for manual editing and approval purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Provides data for the usecase: The customer or service model level customization that is done for this object.
        /// <br/>The customization may define user interface, data model and even scripts or worflow related to the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// A message within a messaging thread.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Message
    {
        /// <summary>
        /// Unique identifier for the message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Time for the message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Time { get; set; }

        /// <summary>
        /// Content type of the message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ThreadedMessageType? Type { get; set; }

        /// <summary>
        /// Textual content: If message, this is the content text.
        /// <br/>If other type, short title / description typically shown in the title bar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Identifier of the external content.
        /// <br/>BlobFile Id for attachments, Calculation ID for calculations etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

        /// <summary>
        /// Other misc. data that is used in displaying the content in the immediate message view.
        /// <br/>Do not include the entire object here. Just the immediately available data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> ContentData { get; set; }

        /// <summary>
        /// Content type specific text for preview.
        /// <br/>This may be URI, ID or boolean.
        /// <br/>For BlobFile, it is currently the BlobFile Guid (the same as ContentId) or null, 
        /// <br/>but in the future, the field may also contain an URL without that being a breaking change!
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Preview { get; set; }

        /// <summary>
        /// The party / type of the message sender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public MessageFrom? FromParty { get; set; }

        /// <summary>
        /// If set, specifies the time when the message has been read by the thread owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readByOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReadByOwner { get; set; }

        /// <summary>
        /// If set, specifies the time when the message has been read by the other party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readByOtherParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReadByOtherParty { get; set; }

        /// <summary>
        /// Validates the object that is the payload of the message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

    }

    /// <summary>
    /// Defines workflow actions for a message thread.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageThreadWorkflow
    {
        /// <summary>
        /// Number of messages that this party has posted that have not been read by the other party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unreadCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnreadCount { get; set; }

        /// <summary>
        /// The salary date for the discussion.
        /// <br/>Owner's and other party's are typically the same, but they may differ: 
        /// <br/>e.g. one may be the requested / estimated date and the other the first possible date if the requested is unrealistic.
        /// <br/>NOTE: Unlike in Salaxy, this is always UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Time of the last message posted by this party. 
        /// <br/>NOTE: Unlike in Salaxy, this is always UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Text for the last message (written by this party). This is for preview purposes: May be shortened.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastMessageText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastMessageText { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfMessageListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of message threads in the user interface.
    /// <br/>It contains header data of the message thread and is basis for searching, filtering and sorting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Message thread specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageData
    {
        /// <summary>
        /// Title for the message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Last message that was was created by the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerLastMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerLastMessage { get; set; }

        /// <summary>
        /// Last message that was created by the other party
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyLastMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherPartyLastMessage { get; set; }

        /// <summary>
        /// Number of messages by Owner that have not been read by the other party
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerUnreadCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OwnerUnreadCount { get; set; }

        /// <summary>
        /// Number of messages that have been read by the Other party and have not been read by the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyUnreadCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OtherPartyUnreadCount { get; set; }

        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Key for the usecase based on which it is resolved. 
        /// <br/>Later, this may resolve to a user interface, microservice or a to manifest registering one.
        /// <br/>For now, just use a unique string starting with a domain you own.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecaseUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsecaseUri { get; set; }

        /// <summary>
        /// If true, the message is a salaxy email, generated by the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSalaxyEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSalaxyEmail { get; set; }

        /// <summary>
        /// Start date of the default salary period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodStart { get; set; }

        /// <summary>
        /// End date of the default salary period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodEnd { get; set; }

        /// <summary>
        /// Count of calculations in this Payroll
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CalcCount { get; set; }

        /// <summary>
        /// Time of the last message posted by owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OwnerUpdatedAt { get; set; }

        /// <summary>
        /// Time of the last message posted by other party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OtherPartyUpdatedAt { get; set; }

    }

    /// <summary>
    /// Provides the data for onboarding process for a company.
    /// <br/>Onboarding is the process where Salaxy gathers sufficient information to at least create an acccount,
    /// <br/>often even more so that the user can pay a salaary with the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Onboarding
    {
        /// <summary>
        /// Type of the account to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WebSiteUserRole AccountType { get; set; }

        /// <summary>
        /// Partner that should be added as primary authorization when the object is created.
        /// <br/>Currently not used in update operations (only New and Signature / VismaSign)
        /// <br/>and does not set as primary partner except if exception specifically made for a partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizePartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizePartner { get; set; }

        /// <summary>
        /// The server-side status of the onboarding process.
        /// <br/>NOTE that there is a more relaxed user interface-level state in ui.state and ui.stateFullText 
        /// <br/>that can be used in onboarding user interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public OnboardingStatus? Status { get; set; }

        /// <summary>
        /// Input that is needed for creating a company account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyInput Company { get; set; }

        /// <summary>
        /// Input that is needed for creating a personal account.
        /// <br/>This may be 
        /// <br/>1) the principal account if the account is created for 1a) Worker or 1b) Household or 
        /// <br/>2) creator owner if the account is created for a Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonInput Person { get; set; }

        /// <summary>
        /// Possibility to define products. 
        /// <br/>These can only be defined to one account as part of the onboarding process: 
        /// <br/>If company account is created, the products are always for Company, not for the Person =&amp;gt; 
        /// <br/>Person will have default products in that case and they need to be edited in a separate process once the accounts have been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountProducts Products { get; set; }

        /// <summary>
        /// Input and post data for digital signature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignatureData Signature { get; set; }

        /// <summary>
        /// Validation status and errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountValidation Validation { get; set; }

        /// <summary>
        /// User interface related data: Mainly the state of the UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OnboardingUIState Ui { get; set; }

        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OnboardingCredentials Credentials { get; set; }

        /// <summary>
        /// Custom state object that is guaranteed to survive the round-trip in the onboarding process.
        /// <br/>Calling application to the onboarding may pass here any data that it needs after the onboarding process is ready and user has been authenticated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> AppState { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Represents the input for creating a company account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyInput
    {
        /// <summary>
        /// If true, creates a company account based on company data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doCreate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoCreate { get; set; }

        /// <summary>
        /// Official name of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// URL to a Logo picture (preferably PNG). This logo should be a square - icon type of logo for avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// The Business ID (Y-tunnus / Business Identity Code) is a code given to businesses and organizations by the PRH or the Tax Administration. 
        /// <br/>It consists of seven digits, a dash and a control mark, for example 1234567-8.
        /// <br/>Alternative accepted formats incule international VAT number "FI12345678" or number without the dash: "12345678".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BusinessId { get; set; }

        /// <summary>
        /// This is an official name of the actor.
        /// <br/>It originates from the YTJ or Bank authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialName { get; set; }

        /// <summary>
        /// If an object with the given BusinessID exists, it is resolved here: The unique ID is set here by the onboarding service. This field cannot be set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolvedId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResolvedId { get; set; }

        /// <summary>
        /// Identifier at the partner site - typically an organization ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerAccountId { get; set; }

        /// <summary>
        /// Company ownership for KYC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ownership Ownership { get; set; }

        /// <summary>
        /// If true, will fetch the data from the Finnish Business Infromation System (YTJ/BIS).
        /// <br/>Fetching is done firstly based on Business ID, if that is not valid then based on name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doYtjUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoYtjUpdate { get; set; }

        /// <summary>
        /// The details of company data as provided by the Finnish Business Infromation System (YTJ/BIS)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ytjDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YtjCompany YtjDetails { get; set; }

        /// <summary>
        /// A search to Finnish Business Infromation System (YTJ/BIS). This search is triggered if you set the RawInput field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ytjSearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YtjSearchResult YtjSearch { get; set; }

        /// <summary>
        /// The legal type of the company, as categorized by Palkkaus / used in generating IBAN numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CompanyType CompanyType { get; set; }

        /// <summary>
        /// Contact information for the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// List of roles which this account is member of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<Role> Roles { get; set; }

        /// <summary>
        /// Language of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonInput
    {
        /// <summary>
        /// If true, creates a personal account based on this data.
        /// <br/>Otherwise this is just user data for Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doCreate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DoCreate { get; set; }

        /// <summary>
        /// Contact information for the user / personal account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Verification objects for contact verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactVerification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OnboardingContactVerifications ContactVerification { get; set; }

        /// <summary>
        /// Finnish Personal ID (Henkilötunnus /HETU)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// This is an official name of the actor.
        /// <br/>It originates from the YTJ or Bank authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialName { get; set; }

        /// <summary>
        /// If an object with the given PersonalId exists, it is resolved here: The unique ID is set here by the onboarding service. This field cannot be set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolvedId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResolvedId { get; set; }

        /// <summary>
        /// First name or company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name, for companies, this should be null
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// URL of the picture if specified as picture (null in a case of type Icon)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("picture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Picture { get; set; }

        /// <summary>
        /// Bank account number for salary payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccountIban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountIban { get; set; }

        /// <summary>
        /// Language of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

    }

    /// <summary>
    /// Provides an overview and the possibility to edit products that are enabled to this account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountProducts
    {
        /// <summary>
        /// The basic services for Salary payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseSalaryProduct BaseService { get; set; }

        /// <summary>
        /// Reports and payments to tax authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxProduct Tax { get; set; }

        /// <summary>
        /// Reports and payments to TVR (the unemployment insurance fund of Finland)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnemploymentProduct Unemployment { get; set; }

        /// <summary>
        /// Reports ant payments to Pension companies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PensionProduct Pension { get; set; }

        /// <summary>
        /// Reports and payments for mandatory employment insurances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InsuranceProduct Insurance { get; set; }

        /// <summary>
        /// Bookkeeping reports for salarypayments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingProduct Accounting { get; set; }

        /// <summary>
        /// Employer health care from the company Heltti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("healthCareHeltti", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HealthCareHelttiProduct HealthCareHeltti { get; set; }

        /// <summary>
        /// Pension payments for an entrepreneur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionEntrepreneur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PensionEntrepreneurProduct PensionEntrepreneur { get; set; }

        /// <summary>
        /// Defines the pricing partner, service model and pricing model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingProduct Pricing { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SignatureData
    {
        /// <summary>
        /// Name of the signing person.
        /// <br/>By default, this is Onboarding Person, but it may be a completely different person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonName { get; set; }

        /// <summary>
        /// Personal ID of the person, who has the right to sign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Email that is sent to Signature provider, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone that is sent to Signature provider, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// If true, the person signing is PEP (Politically Exposed Person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPep", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPep { get; set; }

        /// <summary>
        /// TODO: To be removed after Signicat is in production.
        /// <br/>Data related to VismaSign signature process (API v01).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vismaSignData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VismaSignV01ObData VismaSignData { get; set; }

        /// <summary>
        /// Data related to Signicat signature process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signicatData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignicatData SignicatData { get; set; }

        /// <summary>
        /// The account is authorized to sign on behalf of the actual account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isProcura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsProcura { get; set; }

    }

    /// <summary>
    /// Validation errors for the onboarding process
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountValidation
    {
        /// <summary>
        /// If true the official ID is technically valid.
        /// <br/>Official ID is either Finnish Personal ID (HETU, Henkilötunnus) or Business ID (Y-tunnus).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOfficialIdValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOfficialIdValid { get; set; }

        /// <summary>
        /// If false, none of the accounts in ExistingAccounts cannot be accessed by the current user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAuthorized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAuthorized { get; set; }

        /// <summary>
        /// TODO: NOt implemented yet - should be implemented
        /// <br/>If true, the onboarding object has sufficient data to start the Digital Signature process (Visma Sign).
        /// <br/>Depending on the use case this may or may not be required for committing the data as account data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canStartSign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanStartSign { get; set; }

        /// <summary>
        /// If true, the validation process has been completed. The IsValid may be true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isCompleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCompleted { get; set; }

        /// <summary>
        /// Existing account based on official id (Personal ID / Business ID).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("existingAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar ExistingAccount { get; set; }

        /// <summary>
        /// If true, the data is valid - no errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// If true, has required fields missing data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasAllRequiredFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAllRequiredFields { get; set; }

        /// <summary>
        /// Validation errors on invalid field values. 
        /// <br/>Note that required fields missing error messages are not here. Only the invalid values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiValidationError> Errors { get; set; }

    }

    /// <summary>
    /// Stores data for the onboarding user interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OnboardingUIState
    {
        /// <summary>
        /// State of the user interface. Typically an enumeration that stores where the UI was. E.g. Wizard step.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Full description of the user interface state for admin and analyses purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateFullText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateFullText { get; set; }

        /// <summary>
        /// URL where the user should be redirected back to when the onboarding process is complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// URL where the user should be redirected back to if the process is canceled or there is an urecoverable error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Response type to OAuth -request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oAuthResponseType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OAuthResponseType { get; set; }

        /// <summary>
        /// Salaxy worker invitation key that points to a Salary slip / calculation that the user is coming to fetch 
        /// <br/>in this onboarding process. The Onboarding data is prefilled with the data from th Salary calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invitationKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvitationKey { get; set; }

    }

    /// <summary>
    /// Stores information about the credentials that were used in the Onboarding process.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OnboardingCredentials
    {
        /// <summary>
        /// Identifier of the credentials (UserAccount Guid in the database).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CredentialId { get; set; }

        /// <summary>
        /// The partner that initiated the Onboarding process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ownership
    {
        /// <summary>
        /// If true, authorities require tracking the shareholders.
        /// <br/>In Finland, with current legistlation, this is if a shareholder has over 25% of the shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRequiredTracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequiredTracking { get; set; }

        /// <summary>
        /// List of shareholders for the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareHolders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Shareholder> ShareHolders { get; set; }

    }

    /// <summary>
    /// The details of company data as provided by the Finnish Business Infromation System (YTJ/BIS)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YtjCompany
    {
        /// <summary>
        /// The Business ID (Y-tunnus / Business Identity Code) is a code given to businesses and organizations by the PRH or the Tax Administration. 
        /// <br/>It consists of seven digits, a dash and a control mark, for example 1234567-8.
        /// <br/>Alternative accepted formats incule international VAT number "FI12345678" or number without the dash: "12345678".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessId { get; set; }

        /// <summary>
        /// Official name of the company. 
        /// <br/>Source: Tiedostonimi.Tiedostonimi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The legal type of the company, as categorized by Palkkaus / used in generating IBAN numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CompanyType? CompanyType { get; set; }

        /// <summary>
        /// YTJ's legal type of the company as a string. This is only to be used for display purposes.
        /// <br/>Source: YritysHaku.YritysMuoto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyTypeText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyTypeText { get; set; }

        /// <summary>
        /// The internal YTJ code number for the company's legal type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ytjCompanyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public YtjCompanyType? YtjCompanyType { get; set; }

        /// <summary>
        /// Original YTJ company type code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ytjCompanyTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? YtjCompanyTypeCode { get; set; }

        /// <summary>
        /// Contact information for the
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Social security number of the contact person in the company, if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactPersonPersonalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPersonPersonalId { get; set; }

        /// <summary>
        /// Names are not necessarily avaiable. If they are, they may not be reliable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// Mobile for or other company phone.
        /// <br/>Difference between Contact.Phone and ContactPhone is that 
        /// <br/>this (ContactPhone) is first mobile number, then company general phone if the former was null.
        /// <br/>Contact.Phone is fisrt general phone number and mobile number only if not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// Web site address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("www", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Www { get; set; }

        /// <summary>
        /// The sector where the company is active. (Toimialatieto.Koodi)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sectorOfBusinessCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SectorOfBusinessCode { get; set; }

        /// <summary>
        /// Text of the sector where company operates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sectorOfBusinessText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SectorOfBusinessText { get; set; }

    }

    /// <summary>
    /// Search result for free text search from the Finnish Business Infromation System (YTJ/BIS).
    /// <br/>Returns a list of companies without details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YtjSearchResult
    {
        /// <summary>
        /// The original search string - without trimming etc. that are done in the actual search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rawInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawInput { get; set; }

        /// <summary>
        /// If true, search is a success. This may mean that no results were found though.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuccess { get; set; }

        /// <summary>
        /// If true, the searh is too generic. 
        /// <br/>Typically either there was more than 200 results or less than 3 characters in the search string. 
        /// <br/>Both of these return an error in the API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTooGeneric", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTooGeneric { get; set; }

        /// <summary>
        /// Technical status - for developers / admin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// A message that can be shown to the end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserMessage { get; set; }

        /// <summary>
        /// API quota counter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("counter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Counter { get; set; }

        /// <summary>
        /// Result of the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<YtjSearchResultCompany> Result { get; set; }

    }

    /// <summary>
    /// Contact verification object for onboarding.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OnboardingContactVerifications
    {
        /// <summary>
        /// Verification for email contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OnboardingContactVerification Email { get; set; }

        /// <summary>
        /// Verification for telephone contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OnboardingContactVerification Telephone { get; set; }

    }

    /// <summary>
    /// First version of the product that integrates the Palkkaus.fi-salary payments 
    /// <br/>to employers accounting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseSalaryProduct
    {
        /// <summary>
        /// If true, worker salary and expense payments are paid directly by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWorkerSelfHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWorkerSelfHandling { get; set; }

        /// <summary>
        /// Receiver's address for the e-invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eInvoiceReceiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EInvoiceReceiver { get; set; }

        /// <summary>
        /// Receiver's operator for the e-invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eInvoiceIntermediator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EInvoiceIntermediator { get; set; }

        /// <summary>
        /// SEPA maksatustunnus
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sepaBankPartyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SepaBankPartyId { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The status text that should give the user.
        /// <br/>Restrict the length to 56 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If true, the product is enabled for the current user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    /// <summary>
    /// Service related to integration, reporting and payments to tax authorities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxProduct
    {
        /// <summary>
        /// The reference number for the tax authorities
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentReferenceNumber { get; set; }

        /// <summary>
        /// Defines how the reporting is done for Incomes registry (Tulorekisteri).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxReportHandling? IrReporting { get; set; }

        /// <summary>
        /// If true, tax and social security payments are paid directly by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTaxAndSocialSecuritySelfHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTaxAndSocialSecuritySelfHandling { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The status text that should give the user.
        /// <br/>Restrict the length to 56 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If true, the product is enabled for the current user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    /// <summary>
    /// Product that helps employer to handle the mandatory unemployment insurance reports and payments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnemploymentProduct
    {
        /// <summary>
        /// If true, the account has paid salaries this year outside Palkkaus.fi.
        /// <br/>This affects the yearly reporting - Palkkaus needs to contact the account.
        /// <br/>Note that this is a shared option with the taxation product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSalariesPaidThisYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSalariesPaidThisYear { get; set; }

        /// <summary>
        /// If true, the account has made prepayments or is registered to make prepayments.
        /// <br/>Palkkaus needs to contact the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPrepayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrepayments { get; set; }

        /// <summary>
        /// If true, the account himself handles the unemployment insurance notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isNotificationsSelfHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNotificationsSelfHandling { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The status text that should give the user.
        /// <br/>Restrict the length to 56 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If true, the product is enabled for the current user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    /// <summary>
    /// Pension for Workers: The payments and monthly reporting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PensionProduct
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The use has a pension contract done (as opposed to acting as a temporary employer that pays the pension without a acontract).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPensionContractDone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPensionContractDone { get; set; }

        /// <summary>
        /// The pension company where the user has a contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCompany? PensionCompany { get; set; }

        /// <summary>
        /// Number for the contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionContractNumber { get; set; }

        /// <summary>
        /// If true, the user handles the reporting and payments himself/herself.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPensionSelfHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPensionSelfHandling { get; set; }

        /// <summary>
        /// If true, there is a new pending contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPendingContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPendingContract { get; set; }

        /// <summary>
        /// Enabled property set automatically by IsPensionSelfHandling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    /// <summary>
    /// Employer insurance. Currently, this is the mandatory employer insurance only.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsuranceProduct
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// If set to true, the insurance is set to a partner insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPartnerInsurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPartnerInsurance { get; set; }

        /// <summary>
        /// If true, the user indicates that he/she has already made an insurance contract.
        /// <br/>Should also fill in the InsuranceCompany and InsuranceContractNumber
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isInsuranceContractDone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsInsuranceContractDone { get; set; }

        /// <summary>
        /// Company for the current insurance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InsuranceCompany? InsuranceCompany { get; set; }

        /// <summary>
        /// Contract number for the current insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceContractNumber { get; set; }

        /// <summary>
        /// Enabled property set automatically by IsPartnerInsurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    /// <summary>
    /// First version of the product that integrates the Palkkaus.fi-salary payments 
    /// <br/>to employers accounting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingProduct
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("accountantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountantName { get; set; }

        [Newtonsoft.Json.JsonProperty("accountantEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountantEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("accountantPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountantPhone { get; set; }

        /// <summary>
        /// Enabled property set automatically by AccountantName, AccountantEmail and AccountantPhone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    /// <summary>
    /// Employer health care from the company Heltti
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HealthCareHelttiProduct
    {
        /// <summary>
        /// Defines the product package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("package", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HelttiProductPackage? Package { get; set; }

        /// <summary>
        /// Industry of work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HelttiIndustry? Industry { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Enabled property set automatically by HelttiProductPackage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PensionEntrepreneurProduct
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// If true, user wants to order a YEL-contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tempContractMarker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TempContractMarker { get; set; }

        /// <summary>
        /// Enabled property set automatically by TempContractMarker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    /// <summary>
    /// Defines the pricing partner, service model and pricing model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingProduct
    {
        /// <summary>
        /// Current status of pricing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// Enabled property set automatically if partner set and partner specific pricing model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Defines the pricing partner, service model and pricing model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingPartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonPricingPartner PricingPartner { get; set; }

        /// <summary>
        /// Identifier for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The main short title for the product / service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// One paragraph description text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The logo image for the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// Identifier for the main product desription article in the Palkkaus.fi CMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArticleId { get; set; }

        /// <summary>
        /// If false, it is not bossible to enable this product for the current account / environment. 
        /// <br/>Typically, this means that the UI should not show this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        /// <summary>
        /// Indicates (true-value) if the end user has confirmed the product options.
        /// <br/>If false, the end user has not confirmed the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Visited { get; set; }

    }

    /// <summary>
    /// For Visma Sign V01, data that is stored within the onboarding object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VismaSignV01ObData
    {
        /// <summary>
        /// Document ID identifies the document (one or several files) that are to be signed in Visma Sign storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Invitation ID that is used in the signature process
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invitationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvitationId { get; set; }

        /// <summary>
        /// Category / folder where the item is stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// File name in Visma Sign.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// Logs the authentication service (e.g. 'tupas-osuuspankki', 'tupas-nordea') for later analyses.
        /// <br/>All methods are available in https://sign.visma.net/api/v1/auth/methods (test: https://vismasign.frakt.io/api/v1/auth/methods)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthService { get; set; }

    }

    /// <summary>
    /// Data about the Signicat process.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SignicatData
    {
        /// <summary>
        /// Identifier of the document that is signed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        /// <summary>
        /// Document summary after the signature has been done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DocumentSummary { get; set; }

        /// <summary>
        /// URI to the signed PDF document: Full unique URI for the BlobFile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdfBlobUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PdfBlobUri { get; set; }

    }

    /// <summary>
    /// Defines a shareholder. At the moment, this is only a name and it is used only if the person has more than 25% of the shares.
    /// <br/>Expect this object to be developed with, Ownership percent or number of shares, Id or other such link to the actual person etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Shareholder
    {
        /// <summary>
        /// Name of the shareholder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Search result list level of detail of companies coming from YTJ.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class YtjSearchResultCompany
    {
        /// <summary>
        /// The Business ID (Y-tunnus / Business Identity Code) is a code given to businesses and organizations by the PRH or the Tax Administration. 
        /// <br/>It consists of seven digits, a dash and a control mark, for example 1234567-8.
        /// <br/>Alternative accepted formats incule international VAT number "FI12345678" or number without the dash: "12345678".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessId { get; set; }

        /// <summary>
        /// Official name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Numeric ID ("Yritysavain")
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Type of the company. This is a free text type. Not necessary parseable to company type enumeration in details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Contact verification object for single message type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OnboardingContactVerification
    {
        /// <summary>
        /// Given pin code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pin { get; set; }

    }

    /// <summary>
    /// Legacy pricing partner information stored in the Person object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonPricingPartner
    {
        /// <summary>
        /// Partner account id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Pricing model by the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PricingModel? PricingModel { get; set; }

        /// <summary>
        /// Fee for one calculation, which is visible and paid by customer.
        /// <br/>This is not relevant if the PricingModel is PalkkausFee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FixedFee { get; set; }

        /// <summary>
        /// Service model by the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceModelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceModelId { get; set; }

    }

    /// <summary>
    /// Accounting data for reports.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingData
    {
        /// <summary>
        /// All ledgers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ledgerAccounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LedgerAccount> LedgerAccounts { get; set; }

        /// <summary>
        /// Basic information and visualization for the accounting target.
        /// <br/>Avatar provides the visualization and the name for the target.
        /// <br/>E-mail may be used in sending of the material and telephone in contacting the accounting target.
        /// <br/>IBAN number has no use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex Target { get; set; }

        /// <summary>
        /// The default export format for tabular (csv, excel) data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Finnish Business Identifier (Y-tunnus) for the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Employer avatar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Employer { get; set; }

        /// <summary>
        /// Contact information for the report. Typically the employer, but may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Period for the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Summary containing relevant numbers for the report. For example,
        /// <br/>number of calculations, gross and net amounts, payment amounts and Palkkaus fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingDataSummary Summary { get; set; }

    }

    /// <summary>
    /// Represents a single accounting ledger.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LedgerAccount
    {
        /// <summary>
        /// Legder entries
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LedgerEntry> Entries { get; set; }

        /// <summary>
        /// Account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Account name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountName { get; set; }

        /// <summary>
        /// Account grouping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountGrouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountGrouping { get; set; }

        /// <summary>
        /// Current saldo for the ledger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saldo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Saldo { get; set; }

    }

    /// <summary>
    /// Summary of the accounting data. Contains main figures: totals and workers and employer total figures.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingDataSummary
    {
        /// <summary>
        /// The total number of calculations included in the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculationCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CalculationCount { get; set; }

        /// <summary>
        /// The total number of distinct workers included in the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkerCount { get; set; }

        /// <summary>
        /// Total gross salary of the calculations included in the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalGrossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalGrossSalary { get; set; }

        /// <summary>
        /// Total payment of the calculations included in the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPayment { get; set; }

        /// <summary>
        /// Calculation totals that are common to both Worker and Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalCalculationDTO Totals { get; set; }

        /// <summary>
        /// The calculation from the Employer point-of-view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployerCalculationDTO EmployerCalc { get; set; }

        /// <summary>
        /// The calculation from the Worker point-of-view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerCalculationDTO WorkerCalc { get; set; }

        /// <summary>
        /// Calculation totals of accrued total holiday pay and related sidecosts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayCalculationDTO HolidayCalc { get; set; }

        /// <summary>
        /// Validation messages for the accounting data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

    }

    /// <summary>
    /// Represents a single ledger entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LedgerEntry
    {
        /// <summary>
        /// Id for the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Entry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EntryDate { get; set; }

        /// <summary>
        /// Entry description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Debit indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDebit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDebit { get; set; }

        /// <summary>
        /// Posted amount. Includes VAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// VAT percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatPercent { get; set; }

        /// <summary>
        /// VAT amount of specific VAT rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatAmount { get; set; }

        /// <summary>
        /// Applied VAT rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public VatRate? VatRate { get; set; }

        /// <summary>
        /// Account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Account name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountName { get; set; }

        /// <summary>
        /// Account grouping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountGrouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountGrouping { get; set; }

        /// <summary>
        /// Dimension data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Dimension { get; set; }

    }

    /// <summary>
    /// Calculation totals of accrued total holiday pay and related sidecosts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayCalculationDTO
    {
        /// <summary>
        /// Total sum of accrued holiday pays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAccruedHolidayPay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAccruedHolidayPay { get; set; }

        /// <summary>
        /// Total sum of social security payments for accrued holiday pays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAccruedHolidaySocialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAccruedHolidaySocialSecurity { get; set; }

        /// <summary>
        /// Total sum of pension payments for accrued holiday pays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAccruedHolidayPension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAccruedHolidayPension { get; set; }

        /// <summary>
        /// Total sum of unemployment insurance payments for accrued holiday pays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAccruedHolidayUnemployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAccruedHolidayUnemployment { get; set; }

        /// <summary>
        /// Total sum of paid holiday salaries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPaidHolidaySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPaidHolidaySalary { get; set; }

        /// <summary>
        /// Total sum of paid holiday bonuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPaidHolidayBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPaidHolidayBonus { get; set; }

        /// <summary>
        /// Total sum of paid holiday compensation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPaidHolidayCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPaidHolidayCompensation { get; set; }

        /// <summary>
        /// Total sum of social security payments for paid holiday pays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPaidHolidaySocialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPaidHolidaySocialSecurity { get; set; }

        /// <summary>
        /// Total sum of pension payments for paid holiday pays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPaidHolidayPension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPaidHolidayPension { get; set; }

        /// <summary>
        /// Total sum of unemployment insurance payments for paid holiday pays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPaidHolidayUnemployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPaidHolidayUnemployment { get; set; }

    }

    /// <summary>
    /// Contents for the invoice status notification message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceStatusNotification
    {
        /// <summary>
        /// Unique ID for the invoice in Salaxy system.
        /// <br/>If omitted, the resolving to an invoice will be made using external id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// External id can be set in the notification for the invoice for later messaging.
        /// <br/>If the notification message contains an External Id AND regular Id, the External Id is updated in the Salaxy database.
        /// <br/>If the notification contains External Id, but NO regular Id, an invoice is fetched based on External Id.
        /// <br/>In the latter case, a non-existent Id or multiple invoices with the same External Id will throw an exception and the entire update process is canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// New status for the invoice. Required main payload of the call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InvoiceStatus? Status { get; set; }

        /// <summary>
        /// Required Date for the transaction (booking date).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Required realized amount of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Optional full name of the payment receiver. Should be sent only if the user or process has the possibility of changing the name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiverFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverFullName { get; set; }

        /// <summary>
        /// Optional bank account IBAN of the receiver. Should be sent only if the user or process has the possibility of changing the IBAN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiverIban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverIban { get; set; }

        /// <summary>
        /// Optional payment reference number. Should be sent only if the user or process has the possibility of changing or removing the reference number.
        /// <br/>Changing the reference number will typically lead to an error in the back office process that needs to be manually handled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The payment type of the invoice. If the payment channel does not support the requested payment type (e.g. Salary),
        /// <br/>it should set here the payment type that it used (e.g. Default).
        /// <br/>Payment channel should also expect new types to be introduced, without that being a breaking change.
        /// <br/>Currently, we expect Default always be supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InvoicePaymentType? PaymentType { get; set; }

    }

    /// <summary>
    /// Absence Period with Worker information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerAbsencePeriod
    {
        /// <summary>
        /// WorkerAbsences storage object that contains the period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absencesId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbsencesId { get; set; }

        /// <summary>
        /// The Worker that owns the Absence period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Worker { get; set; }

        /// <summary>
        /// Period for the absance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Cause / type of the absence
        /// </summary>
        [Newtonsoft.Json.JsonProperty("causeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AbsenceCauseCode? CauseCode { get; set; }

        /// <summary>
        /// If true, the absence is paid by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPaid { get; set; }

        /// <summary>
        /// If true, annual leaves are accrued from the absence. If false, these days are deducted from the accrual.
        /// <br/>By default, you may leave this null and it always follows the IsPaid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHolidayAccrual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHolidayAccrual { get; set; }

        /// <summary>
        /// Amount of salary that is paid for the absense.
        /// <br/>Currently not in use: Would be used in Incomes Register integration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This is a pass-through string that is passed to the result calculations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfPayrollListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PayrollListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of payrolls in the user interface.
    /// <br/>It contains header data of the payroll and is basis for searching, filtering and sorting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayrollListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PayrollStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayrollData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Payroll specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayrollData
    {
        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Title that can be specified by the end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// What types of wages are paid with this payroll.
        /// <br/>May affect the rendering of the user interface (e.g. for     holidays, hours and absences).
        /// <br/>Also affects which Workers are show in the add / link dialog by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WageBasis? WageBasis { get; set; }

        /// <summary>
        /// Due date for the payroll. Date when the payment should be made to achieve SalaryDate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// If true, all calculations have been validated and they are valid for payment.
        /// <br/>If false, validation has not been done or some calculations are not valid for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReady", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReady { get; set; }

        /// <summary>
        /// Paid at date for the payroll. (Date of the employer's payment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PaymentDate { get; set; }

        /// <summary>
        /// Start date of the default salary period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodStart { get; set; }

        /// <summary>
        /// End date of the default salary period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PeriodEnd { get; set; }

        /// <summary>
        /// Count of calculations in this Payroll
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CalcCount { get; set; }

        /// <summary>
        /// If the Payroll is based on a template, this is the identifier of the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        /// <summary>
        /// ID of the calendar event that is scheduling creation of occurences from this template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calendarEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalendarEvent { get; set; }

        /// <summary>
        /// ID of the calendar event that created this occurence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calendarOccurence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalendarOccurence { get; set; }

        /// <summary>
        /// The MessageThread Id, if this payroll is referred in a message thread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageThreadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageThreadId { get; set; }

        /// <summary>
        /// Payment channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? PaymentChannel { get; set; }

    }

    /// <summary>
    /// Record for storing company or employment details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Record
    {
        /// <summary>
        /// Salaxy ID of the worker / other paty. This value is required when inserting and cannot be edited later.
        /// <br/>WorkerSnapshot is automatically updated upon save.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// Optional entity id, for example the employment relation for the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        /// <summary>
        /// Entity type of the business object, which the records are targeted to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// Record type. This should be based on customer specific enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordType { get; set; }

        /// <summary>
        /// Start date of the record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End date of the record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Title for the record
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Textual content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Attachments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }

        /// <summary>
        /// A usecase for creating and editing records.
        /// <br/>In practice, a usecase is either a user interface or a microservice that provides a salary calculation
        /// <br/>and it may be implemented outside Salaxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Attachment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attachment
    {
        /// <summary>
        /// Name of the attachment. E.g. monthly-details-2018-01.pdf
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// Content for data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfRecordListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RecordListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of records in the user interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecordListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecordData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Record specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecordData
    {
        /// <summary>
        /// Record type. This should be based on customer specific enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordType { get; set; }

        /// <summary>
        /// Key for the usecase based on which it is resolved. 
        /// <br/>Later, this may resolve to a user interface, microservice or a to manifest registering one.
        /// <br/>For now, just use a unique string starting with a domain you own.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecaseUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsecaseUri { get; set; }

    }

    /// <summary>
    /// Describes a logical generated report.
    /// <br/>This is a report instance e.g. a monthly report for January 2017. 
    /// <br/>It may contain several files of different types: PDF, preview PNG, HTML etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Report
    {
        /// <summary>
        /// Short title for the report that can be shown to the end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Report date: For monthly and yearly reports this is the first day of the year/month.
        /// <br/>For ad-hoc reports, this is the start date of the period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReportDate { get; set; }

        /// <summary>
        /// Type of the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ReportType? Type { get; set; }

        /// <summary>
        /// PDF report for viewing and printing. This is typically the main report.
        /// <br/>For preview and demo, there is typically only HTML version - no PDF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdfUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PdfUrl { get; set; }

        /// <summary>
        /// Thumbnail image for the report. 
        /// <br/>For preview and demo data this is typically a fixed image - the thumbnail is only generated when PDF is generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// HTML for the report. Use salaxy-rpt.css for formatting.
        /// <br/>For preview and demo, this is the format to show to the user - PDF is not generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("htmlUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Some reports are also available in JSON format, from which you can create lists, CSV, Excel files etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jsonUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JsonUrl { get; set; }

        /// <summary>
        /// If true, the report is in preview state, typically in the middle of the month.
        /// <br/>This means that the data itself is production, its just not final.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPreview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPreview { get; set; }

        /// <summary>
        /// If true, the report is created using demo data - should be used only in the beginning when the user has not paid any salaries. 
        /// <br/>This may be e.g. calculations in draft stage or completely invented demo data such as example workers.
        /// <br/>Demo data should not be confused to test database (test-api.palkkaus.fi / test-api.salaxy.com): 
        /// <br/>Paid calculations in test database are production data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDemoData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDemoData { get; set; }

        /// <summary>
        /// Time when the PDF, HTML or JSON URL's expire IF they are generated in a way that
        /// <br/>they are callable without authentication for a specified time period.
        /// <br/>This property is null if the URL requires authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urlsExpireAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UrlsExpireAt { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Calculation with additional cumulative data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CumulativeCalculation
    {
        /// <summary>
        /// Cumulative data for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cumulative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, CumulativeData> Cumulative { get; set; }

        /// <summary>
        /// The employer object for this calculation.
        /// <br/>Typically, you do not need to set this before the actual payment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcEmployer Employer { get; set; }

        /// <summary>
        /// The Worker (employee) that has performed the work.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorker Worker { get; set; }

        /// <summary>
        /// Information about the workflow and state of the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorkflow Workflow { get; set; }

        /// <summary>
        /// The main salary element. 
        /// <br/>Alternatively the salary can be set in the Rows object - this will be the only way to set multiple salary rows (not yet supported).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Salary Salary { get; set; }

        /// <summary>
        /// Set of rows that make up the salary calculation:
        /// <br/>Expenses, Benefits, deductions etc. Note that side costs are not rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDefinedRow> Rows { get; set; }

        /// <summary>
        /// DEPRECIATED: Usecase will be replacing this functionality in a next major release.
        /// <br/>The Framework Agreement (TES) parameters that affect the framework based side costs etc. of this calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("framework", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TesParameters Framework { get; set; }

        /// <summary>
        /// A usecase for creating and editing salary calculations.
        /// <br/>In practice, a usecase is either a user interface or a microservice that provides a salary calculation
        /// <br/>and it may be implemented outside Salaxy.
        /// <br/>Provides the possibility to store useacase specific data as part of calculation.
        /// <br/>NOTE: This functionality will replace Framework property in a next major release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// The results of the calculation. In the API, this is a read-only object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationResult Result { get; set; }

        /// <summary>
        /// Information about the work that is not directly related to calculating salary and expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcInfo Info { get; set; }

        /// <summary>
        /// Sharing of the calculation. This object cannot be modified directly, 
        /// <br/>use specialized methods in Calculations service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationSharing Sharing { get; set; }

        /// <summary>
        /// Contains calculation specific data for accounting (both cost and financial accounting).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationAccounting Accounting { get; set; }

        /// <summary>
        /// Worktime data that is stored as part of Salary calculation:
        /// <br/>work days, absences, holidays and holiday accrual.
        /// <br/>In the future may also contain relevant part of timesheet data (work hours).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worktime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorktime Worktime { get; set; }

        /// <summary>
        /// Readonly workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Cumulative data for a single calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CumulativeData
    {
        /// <summary>
        /// First and last Salary dates (days when Worker receives the salary) and number of payment days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange SalaryDates { get; set; }

        /// <summary>
        /// Working days based on the salary calculations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workingDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange WorkingDays { get; set; }

        /// <summary>
        /// Dictionary of labels of the current data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Labels { get; set; }

        /// <summary>
        /// The cumulative data of the calculations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> Data { get; set; }

    }

    /// <summary>
    /// Deserializable calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReportingCalculation
    {
        /// <summary>
        /// The employer object for this calculation.
        /// <br/>Typically, you do not need to set this before the actual payment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcEmployer Employer { get; set; }

        /// <summary>
        /// The Worker (employee) that has performed the work.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorker Worker { get; set; }

        /// <summary>
        /// Information about the workflow and state of the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorkflow Workflow { get; set; }

        /// <summary>
        /// The main salary element. 
        /// <br/>Alternatively the salary can be set in the Rows object - this will be the only way to set multiple salary rows (not yet supported).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Salary Salary { get; set; }

        /// <summary>
        /// Set of rows that make up the salary calculation:
        /// <br/>Expenses, Benefits, deductions etc. Note that side costs are not rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDefinedRow> Rows { get; set; }

        /// <summary>
        /// DEPRECIATED: Usecase will be replacing this functionality in a next major release.
        /// <br/>The Framework Agreement (TES) parameters that affect the framework based side costs etc. of this calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("framework", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TesParameters Framework { get; set; }

        /// <summary>
        /// A usecase for creating and editing salary calculations.
        /// <br/>In practice, a usecase is either a user interface or a microservice that provides a salary calculation
        /// <br/>and it may be implemented outside Salaxy.
        /// <br/>Provides the possibility to store useacase specific data as part of calculation.
        /// <br/>NOTE: This functionality will replace Framework property in a next major release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// The results of the calculation. In the API, this is a read-only object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationResult Result { get; set; }

        /// <summary>
        /// Information about the work that is not directly related to calculating salary and expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcInfo Info { get; set; }

        /// <summary>
        /// Sharing of the calculation. This object cannot be modified directly, 
        /// <br/>use specialized methods in Calculations service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationSharing Sharing { get; set; }

        /// <summary>
        /// Contains calculation specific data for accounting (both cost and financial accounting).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationAccounting Accounting { get; set; }

        /// <summary>
        /// Worktime data that is stored as part of Salary calculation:
        /// <br/>work days, absences, holidays and holiday accrual.
        /// <br/>In the future may also contain relevant part of timesheet data (work hours).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worktime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorktime Worktime { get; set; }

        /// <summary>
        /// Readonly workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// A summary report for an employer for a specific period (typically month or year).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SummaryReportData
    {
        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationResultStatistics Statistics { get; set; }

        /// <summary>
        /// Finnish Business Identifier (Y-tunnus) for the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessId { get; set; }

        /// <summary>
        /// Employer avatar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Employer { get; set; }

        /// <summary>
        /// Contact information for the report. Typically the employer, but may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Start date for the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End date for the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// The total sum information for the report - this is the main payload of the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationResult Result { get; set; }

        /// <summary>
        /// Individual calculations based on which the report is made.
        /// <br/>Depending on the request, this may be filled in or null (as opposed to empty list).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Calculation> Calculations { get; set; }

    }

    /// <summary>
    /// Statistics data calculated from the calculation result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationResultStatistics
    {
        /// <summary>
        /// The total number of calculations included in the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculationCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CalculationCount { get; set; }

        /// <summary>
        /// The total number of distinct workers included in the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkerCount { get; set; }

        /// <summary>
        /// WorkerCalc.Pension / Totals.TotalSocialSecurityBase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionWorkerPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionWorkerPercent { get; set; }

        /// <summary>
        /// WorkerCalc.UnemploymentInsurance / Totals.TotalSocialSecurityBase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentWorkerPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnemploymentWorkerPercent { get; set; }

        /// <summary>
        /// WorkerCalc.Tax / Totals.TotalTaxable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent { get; set; }

        /// <summary>
        /// WorkerCalc.UnionPayment / Totals.TotalTaxable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unionPaymentPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnionPaymentPercent { get; set; }

    }

    /// <summary>
    /// Container for calculation report data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationReportData
    {
        /// <summary>
        /// Calculations as report rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>> Rows { get; set; }

        /// <summary>
        /// Ir Income type code labels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> IrLabels { get; set; }

        /// <summary>
        /// Calculation row type labels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> TypeLabels { get; set; }

        /// <summary>
        /// Total labels
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> TotalLabels { get; set; }

    }

    /// <summary>
    /// Container for accounting based report data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingRowReportData
    {
        /// <summary>
        /// Report row created from accounting base rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountingRowReportDataRow> Rows { get; set; }

        /// <summary>
        /// Finnish Business Identifier (Y-tunnus) for the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Employer avatar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Employer { get; set; }

        /// <summary>
        /// Contact information for the report. Typically the employer, but may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Period for the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Summary containing relevant numbers for the report. For example,
        /// <br/>number of calculations, gross and net amounts, payment amounts and Palkkaus fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingDataSummary Summary { get; set; }

    }

    /// <summary>
    /// Report row created from accounting base row data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingRowReportDataRow
    {
        /// <summary>
        /// Entry group: income type or total type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryCodeGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryCodeGroup { get; set; }

        /// <summary>
        /// A single code in the code group: single income type code or total row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryCode { get; set; }

        /// <summary>
        /// Entry date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EntryDate { get; set; }

        /// <summary>
        /// Entry description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Posted amount. Includes VAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// VAT percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatPercent { get; set; }

        /// <summary>
        /// VAT amount of specific VAT rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatAmount { get; set; }

        /// <summary>
        /// Applied VAT rate. This is always mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public VatRate? VatRate { get; set; }

        /// <summary>
        /// Dimension data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Dimension { get; set; }

        /// <summary>
        /// Additional flags for directing the logic for creating accounting entry based on given entries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

    }

    /// <summary>
    /// A summary report for a worker for a specific period (typically month or year) and selected employer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerSummaryReportData
    {
        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationResultStatistics Statistics { get; set; }

        /// <summary>
        /// Worker avatar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Worker { get; set; }

        /// <summary>
        /// Worker's socials security number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSocialSecurityNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerSocialSecurityNumber { get; set; }

        /// <summary>
        /// Worker's bank account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerIbanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerIbanNumber { get; set; }

        /// <summary>
        /// Contact information for the report. Typically the employer, but may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact WorkerContact { get; set; }

        /// <summary>
        /// Additional result data for the worker summary report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerSummaryResult WorkerResult { get; set; }

        /// <summary>
        /// Finnish Business Identifier (Y-tunnus) for the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessId { get; set; }

        /// <summary>
        /// Employer avatar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Employer { get; set; }

        /// <summary>
        /// Contact information for the report. Typically the employer, but may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Start date for the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End date for the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// The total sum information for the report - this is the main payload of the report
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationResult Result { get; set; }

        /// <summary>
        /// Individual calculations based on which the report is made.
        /// <br/>Depending on the request, this may be filled in or null (as opposed to empty list).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Calculation> Calculations { get; set; }

    }

    /// <summary>
    /// Additional result data for the worker summary report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerSummaryResult
    {
        /// <summary>
        /// Cash salary row details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SummaryCalculationRows CashSalary { get; set; }

        /// <summary>
        /// Benefits details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefitsInKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SummaryCalculationRows BenefitsInKind { get; set; }

        /// <summary>
        /// Expense details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SummaryCalculationRows Expenses { get; set; }

    }

    /// <summary>
    /// Rows and totals for a set of calculation rows.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SummaryCalculationRows
    {
        /// <summary>
        /// Summary rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SummaryCalculationRow> Rows { get; set; }

        /// <summary>
        /// Total sum of rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

    }

    /// <summary>
    /// Row containing summary data for the summary report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SummaryCalculationRow
    {
        /// <summary>
        /// Description text of the row that is shown in reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Total sum.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// Usecase specific data
        /// <br/>This contains especially row label parameters: calculationRowType, kind and code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxAtSourceUsecase
    {
        /// <summary>
        /// Tax value is either the fixed value (euro) or percentage (0-1) depending on the kind.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxValue { get; set; }

        /// <summary>
        /// Deduction for the tax at source: Fixed, Monthly or Daily
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionPrice { get; set; }

        /// <summary>
        /// Count of deduction units: 1 or number of months or days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionCount { get; set; }

        /// <summary>
        /// Value of the deduction: Deduction * DeductionCount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Deduction { get; set; }

        /// <summary>
        /// Total taxable value of the salary calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxable { get; set; }

        /// <summary>
        /// Tax at source related employmment data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxAtSource EmploymentData { get; set; }

        /// <summary>
        /// List of allowed kinds (deductions based on source data).
        /// <br/>Currently as a comma separated string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedKinds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AllowedKinds { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxAtSourceKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.IrIncomeType to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrIncomeTypeUsecase
    {
        /// <summary>
        /// Reporting details to Incomes registry (Tulorekisteri).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrDetails IrData { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TransactionCode? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.Board to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BoardUsecase
    {
        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public BoardKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.Training to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrainingUsecase
    {
        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TrainingKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.NonProfitOrg to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NonProfitOrgUsecase
    {
        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public NonProfitOrgKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.Remuneration to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemunerationUsecase
    {
        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public RemunerationKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.PaidSickLeave to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaidSickLeaveUsecase
    {
        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaidSickLeaveKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.OtherCompensation to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCompensationUsecase
    {
        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public OtherCompensationKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.EmploymentTermination to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentTerminationUsecase
    {
        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentTerminationKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.WorkingTimeCompensation to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkingTimeCompensationUsecase
    {
        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WorkingTimeCompensationKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles both the hourly salary and working time compensation to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HourlySalaryWithWorkingTimeCompensationUsecase
    {
        /// <summary>
        /// Collection of compensation rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compensationRows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkingTimeCompensationRow> CompensationRows { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WorkingTimeCompensationKind? Kind { get; set; }

    }

    /// <summary>
    /// Working time compensation row.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkingTimeCompensationRow
    {
        /// <summary>
        /// Kind for a single row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WorkingTimeCompensationKind? RowKind { get; set; }

        /// <summary>
        /// Count for compensation row, can be 1 or percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Compensation price, fixed price or calculated using percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Message for compensation row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Unit for compensation row: percent or hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowUnit? Unit { get; set; }

        /// <summary>
        /// Accounting related data for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RowAccounting Accounting { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.DailyAllowance to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DailyAllowanceUsecase
    {
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// If true, the daily allowance is paid in half: The Worker has received 2 free meals (1 if PartialDailyAllowance).
        /// <br/>This information is currently not reported to Incomes Register, it is only as information for calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHalf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHalf { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public DailyAllowanceKind? Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxWithholdingUsecase
    {
        /// <summary>
        /// Tax percent (0 - 1) {Palkkaus.Model.Usecases.CalculationRows.TaxWithholdingKind.Percentage} or fixed euro amount {Palkkaus.Model.Usecases.CalculationRows.TaxWithholdingKind.FixedValue} for tax with holding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxValue { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxWithholdingKind? Kind { get; set; }

    }

    /// <summary>
    /// Optimizes the worker payments using the given target amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalWorkerPaymentUsecase
    {
        /// <summary>
        /// Calculation row type for adjusting the amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowType? RowType { get; set; }

        /// <summary>
        /// Message for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TotalWorkerPaymentKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.BicycleBenefitUsecase to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BicycleBenefitUsecase
    {
        /// <summary>
        /// Deduction from salary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Deduction { get; set; }

        /// <summary>
        /// Taxable amount of the benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Taxable { get; set; }

        /// <summary>
        /// Number of periods if Kind is PeriodicalDeduction. 
        /// <br/>Otherwise this value is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodDivider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodDivider { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public BicycleBenefitKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.SubsidisedCommute to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubsidisedCommuteUsecase
    {
        /// <summary>
        /// Deduction from salary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Deduction { get; set; }

        /// <summary>
        /// Taxable amount of the benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Taxable { get; set; }

        /// <summary>
        /// Number of periods if Kind is PeriodicalDeduction. 
        /// <br/>Otherwise this value is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodDivider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodDivider { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SubsidisedCommuteKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.CarBenefitUsecase to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CarBenefitUsecase
    {
        /// <summary>
        /// Age group as in A,B,C or I for international.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ageGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AgeGroupCode? AgeGroup { get; set; }

        /// <summary>
        /// If true, the calculation is kilometers based.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isKilometersBased", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsKilometersBased { get; set; }

        /// <summary>
        /// Number of kilometers is filled in only if that type of benefit calculation is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Kilometers { get; set; }

        /// <summary>
        /// Car emissions value
        /// <br/>
        /// <br/>The car emissions value must be greater than or equal to 0, and smaller than or
        /// <br/>equal to 100. The car emissions value can only be reported if the payment date
        /// <br/>or other reporting date is in 2022–2025.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emissionsValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EmissionsValue { get; set; }

        /// <summary>
        /// Deduction from salary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Deduction { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CarBenefitKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.MealBenefit to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MealBenefitUsecase
    {
        /// <summary>
        /// Deduction from salary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Deduction { get; set; }

        /// <summary>
        /// The taxable price calculated by the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxablePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxablePrice { get; set; }

        /// <summary>
        /// If true, the deduction from Worker salary corresponds to taxable value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTaxValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTaxValue { get; set; }

        /// <summary>
        /// If true, the deduction from Worker Salary has already been done or will be done and is not added to this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTaxValueDeductionDone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTaxValueDeductionDone { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public MealBenefitKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.UnionPayment to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnionPaymentUsecase
    {
        /// <summary>
        /// Reference for the union payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// The full name of the union for payment purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientFullName { get; set; }

        /// <summary>
        /// The International Bank Account Number of the union.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban { get; set; }

        /// <summary>
        /// Percentage of the total taxable amount to pay.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaymentPercentage { get; set; }

        /// <summary>
        /// Maximum payment limit, or null if not desired.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaximumPayment { get; set; }

        /// <summary>
        /// Minimum payment limit, or null if not desired.
        /// <br/>Please note that this is only applicable for {Palkkaus.Model.Usecases.CalculationRows.UnionPaymentKind.PercentageAndLimits}.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinimumPayment { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UnionPaymentKind? Kind { get; set; }

    }

    /// <summary>
    /// Handles the Calculation of CalculationRowType.Foreclosure to IrRows
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForeclosureUsecase
    {
        /// <summary>
        /// Reference for the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Length of the salary payment period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodLength { get; set; }

        /// <summary>
        /// Count of dependants of the debtor. Typically spouse and children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dependantsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DependantsCount { get; set; }

        /// <summary>
        /// Amount of the protected portion for each day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedPortionBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProtectedPortionBase { get; set; }

        /// <summary>
        /// Amount of the protected portion for each dependant for each day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedPortionDependant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProtectedPortionDependant { get; set; }

        /// <summary>
        /// Income from other sources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeFromOtherSources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IncomeFromOtherSources { get; set; }

        /// <summary>
        /// Additional amount to be left to debtor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalAmountLeftToDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AdditionalAmountLeftToDebtor { get; set; }

        /// <summary>
        /// Primary subtyping of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ForeclosureKind? Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModel
    {
        /// <summary>
        /// Name of the service model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// URL for the icon that represents the service model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        /// <summary>
        /// Service model features, which can be switched on/off.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelFeatures Features { get; set; }

        /// <summary>
        /// Default accounting settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelAccounting Accounting { get; set; }

        /// <summary>
        /// Default cost accounting settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costAccounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelCostAccounting CostAccounting { get; set; }

        /// <summary>
        /// Default pricing settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelPricing Pricing { get; set; }

        /// <summary>
        /// Default payment channels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelPayments Payments { get; set; }

        /// <summary>
        /// Partner branding settings: site logo, css etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelBranding Branding { get; set; }

        /// <summary>
        /// Reporting layout settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelReporting Reporting { get; set; }

        /// <summary>
        /// Default site for customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelSite Site { get; set; }

        /// <summary>
        /// Settings related to usecases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelUsecase Usecase { get; set; }

        /// <summary>
        /// Settings related to messaging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messaging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelMessaging Messaging { get; set; }

        /// <summary>
        /// Settings related to the calculation data delivery by forms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelForms Forms { get; set; }

        /// <summary>
        /// Readonly workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Service model features, which can be swithced on/off.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelFeatures
    {
        /// <summary>
        /// If true, the messaging is switched on for this service model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messaging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Messaging { get; set; }

        /// <summary>
        /// If true, the calculation data delivery by forms is switched on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Forms { get; set; }

        /// <summary>
        /// If true, the service model accounting settings override company  settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Accounting { get; set; }

        /// <summary>
        /// If true, the service model cost accounting settings override company  settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costAccounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CostAccounting { get; set; }

        /// <summary>
        /// If true, the service model payment settings override company  settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Payments { get; set; }

        /// <summary>
        /// If true, the service model reporting settings override company settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reporting { get; set; }

        /// <summary>
        /// If true, the service model usecase settings override company settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Usecase { get; set; }

    }

    /// <summary>
    /// Settings related to Accounting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelAccounting
    {
        /// <summary>
        /// Default accounting target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultTargetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultTargetId { get; set; }

        /// <summary>
        /// Default period selection method:  PaidAt date (paid by employer), Salary date (paid to worker) or Work date (work done). The default is PaidAt date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPeriodDateKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PeriodDateKind? DefaultPeriodDateKind { get; set; }

        /// <summary>
        /// Accounting target systems and the rulesets assigned to them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountingTargetSettings> Targets { get; set; }

    }

    /// <summary>
    /// Settings related to Cost Accounting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelCostAccounting
    {
        /// <summary>
        /// Cost accounting dimensions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimensionDefinition> Dimensions { get; set; }

    }

    /// <summary>
    /// Service model specific pricing settings for customers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelPricing
    {
        /// <summary>
        /// Pricing model by the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PricingModel? PricingModel { get; set; }

        /// <summary>
        /// Fee for one calculation, which is visible and paid by customer.
        /// <br/>This is not relevant if the PricingModel is PalkkausFee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FixedFee { get; set; }

    }

    /// <summary>
    /// Default payment channels for customers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelPayments
    {
        /// <summary>
        /// The default channel when making payments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? DefaultChannel { get; set; }

        /// <summary>
        /// Channel specific settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentChannelSettings> Channels { get; set; }

    }

    /// <summary>
    /// Service model branding settings: logo, css etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelBranding
    {
        /// <summary>
        /// Url to logo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// Css path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Skin { get; set; }

    }

    /// <summary>
    /// Defines the settings for producing reports: Mainly PDF's but also HTMl previews.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelReporting
    {
        /// <summary>
        /// Identifier of the report layout template in id@partition or URI format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layoutTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayoutTemplateId { get; set; }

        /// <summary>
        /// Layouts may define some variables that may be overriden, e.g. colors, margins, font-sizes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layoutTemplateVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayoutTemplateVariables { get; set; }

        /// <summary>
        /// The company logo that is used by some Layouts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

    }

    /// <summary>
    /// Stores information about the web site that is used for customer (employer)
    /// <br/>to access the customer web site.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelSite
    {
        /// <summary>
        /// Type of web app that the customer is using to interact in the service process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webApp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CustomerWebApp? WebApp { get; set; }

        /// <summary>
        /// Web application URL when the WebApp is Custom.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webAppUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebAppUrl { get; set; }

        /// <summary>
        /// Name for the web application-
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webAppName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebAppName { get; set; }

        /// <summary>
        /// Override the translated texts for a service model.
        /// <br/>Key in the dictionary is a full key starting from the language, e.g. "fi.SALAXY.NG1_Sitemap.home".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("texts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Texts { get; set; }

        /// <summary>
        /// Sitemap customizations based on product sitemap.
        /// <br/>Key is a full sitemap id (dot path) and data is a dataobject that is merged to SiteMap.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sitemap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Sitemap { get; set; }

    }

    /// <summary>
    /// Usecase related settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelUsecase
    {
        /// <summary>
        /// Available usecases for the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsecaseInSettings> Usecases { get; set; }

    }

    /// <summary>
    /// Settings related to Messaging.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelMessaging
    {
        /// <summary>
        /// Enable partner communication. Enabled by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartnerMessages { get; set; }

        /// <summary>
        /// Options for the notification to be sent to the worker after the salary payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSalaryNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<WorkerSalaryNotification> WorkerSalaryNotifications { get; set; }

        /// <summary>
        /// Options for the delivery of the payslip to the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSalarySlipDeliveryMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<WorkerSalarySlipDeliveryMethod> WorkerSalarySlipDeliveryMethods { get; set; }

    }

    /// <summary>
    /// Settings related to the calculation data delivery by forms.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelForms
    {

    }

    /// <summary>
    /// Specifies thee properties that are set for this accounting target in relation to the accounting channel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingTargetSettings
    {
        /// <summary>
        /// Id of the target definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Channel is the technical transport mechanism to accounting software
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AccountingChannel? Channel { get; set; }

        /// <summary>
        /// The default export method for exports: whether automatic or manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ExportMethod? Method { get; set; }

        /// <summary>
        /// If specified, defines the available methods in manual exports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<ExportMethod> AvailableMethods { get; set; }

        /// <summary>
        /// The default export format for tabular (csv, excel) data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Web hook url for notifications.
        /// <br/>If any calculation changes in some past month, this url is called by the system to notify the company about the change.
        /// <br/>The month of change ("month") is added as query parameter to the url automatically by the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webHookUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebHookUrl { get; set; }

        /// <summary>
        /// Name and visualization for selection lists.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Cost accounting dimension definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CostAccountingDimensionDefinition
    {
        /// <summary>
        /// Id for the dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Default label for the dimension entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Hierarchial object containing selection options for dimension values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimensionOption> Options { get; set; }

        /// <summary>
        /// If true, multiple values can be set to the dimension and the costs are shared between dimension values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowCostSharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowCostSharing { get; set; }

        /// <summary>
        /// Defines the visible scopes of the dimension. For example, Scope.Row shows the dimension on row level only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CostAccountingDimensionScope? Scope { get; set; }

    }

    /// <summary>
    /// Channel-specific payment settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentChannelSettings
    {
        /// <summary>
        /// Identifies the channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? Channel { get; set; }

        /// <summary>
        /// If true, the channel is enabled for the current user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Read-only property that tells whether the payment channel is available in the current session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAvailable { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Usecase definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecaseInSettings
    {
        /// <summary>
        /// Uri of the usecase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Item type of the usecase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiItemType? ItemType { get; set; }

        /// <summary>
        /// Short title for the usecase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Status of the usecase in the settings.
        /// <br/>The status affects the visibilty of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UsecaseStatus? Status { get; set; }

        /// <summary>
        /// Order setting for the usecases.
        /// <br/>This is needed e.g. ad hoc reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

    }

    /// <summary>
    /// Selectable cost accounting dimension value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CostAccountingDimensionOption
    {
        /// <summary>
        /// Value for the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Description of the value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// For option hiearchies, list of child options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimensionOption> Children { get; set; }

        /// <summary>
        /// Defines the visible scopes of the dimension values. For example, Scope.Row shows the dimension value on row level only.
        /// <br/>The default is, that the scope is not defined and that the value is visible everywhere.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CostAccountingDimensionScope? Scope { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfServiceModelListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServiceModelListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a partner service model.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Service model specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceModelData
    {
        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Url to logo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// Css path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Skin { get; set; }

        /// <summary>
        /// Name for the web application-
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webAppName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebAppName { get; set; }

        /// <summary>
        /// Square icon for the service model. Used in listings etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

    }

    /// <summary>
    /// Passes the data about the authorization that is the bases for callin the 
    /// <br/>services that require user authorization.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSession
    {
        /// <summary>
        /// If false, the current user needs to be authenticated or authenticated user does not have acces to the system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAuthorized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAuthorized { get; set; }

        /// <summary>
        /// If false, the current user does not have a credential in the system =&amp;gt; need to redirect to login
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasCredential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCredential { get; set; }

        /// <summary>
        /// If false, the current user does not have a current account. 
        /// <br/>If HasCredential is true, this means that the user should be redirected to Account creation wizard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasCurrentAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCurrentAccount { get; set; }

        /// <summary>
        /// Authorization status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AuthorizationStatus? Status { get; set; }

        /// <summary>
        /// Avatar that should be shown for the current session.
        /// <br/>Typically CurrentAccount.Avatar, but could theoretically be something different.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// The current user credentials.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentCredential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SessionUserCredential CurrentCredential { get; set; }

        /// <summary>
        /// The current Palkkaus.fi-account that the user acting as
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IVerifiedAccount CurrentAccount { get; set; }

        /// <summary>
        /// Contains html for system alert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemAlertHtml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemAlertHtml { get; set; }

        /// <summary>
        /// Often needed settings directly in session object.
        /// <br/>NOTE: For editing settings, request the full settings object separately.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountSettingsInSession Settings { get; set; }

    }

    /// <summary>
    /// An account that is verified. Typically this means a digitally signed contract.
    /// <br/>This means that the account also has an Identity object.
    /// <br/>However, as the Identity object contains confidential information, it is not necessarily present in all method calls.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IVerifiedAccount
    {
        /// <summary>
        /// Information about the verification of the account. 
        /// <br/>NOTE that this object may not be present in many method calls - this is because it contains confidential information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identity Identity { get; set; }

        /// <summary>
        /// If true, the account has been verified. Typically this means a digitally signed contract.
        /// <br/>This means that the account also has an Identity object.
        /// <br/>However, as the Identity object contains confidential information, it is not necessarily present in all method calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVerified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Avatar is the visual representation of the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Contact information for the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Language of the person/company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Pricing partner information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Read-only account settings in Session: These are the settings that should be immediately available
    /// <br/>in the regular UI without separate loading.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountSettingsInSession
    {
        /// <summary>
        /// Pension contracts for optional selection of cotnract in Worker / Calc UI's
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionContracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PensionContract> PensionContracts { get; set; }

        /// <summary>
        /// Insurance contracts for optional selection of cotnract in Worker / Calc UI's
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceContracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InsuranceContract> InsuranceContracts { get; set; }

        /// <summary>
        /// If true, the reporting layout is customized and should be loadded from the server in preview and reporting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasCustomReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCustomReport { get; set; }

        /// <summary>
        /// The default accounting target for accounting reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountingTarget", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingTargetSettings AccountingTarget { get; set; }

        /// <summary>
        /// Partner and service model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryPartnerSettings Partner { get; set; }

        /// <summary>
        /// The payment channels that are enabled for the current user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentChannels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<PaymentChannel> PaymentChannels { get; set; }

        /// <summary>
        /// Current default payment channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPaymentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? DefaultPaymentChannel { get; set; }

        /// <summary>
        /// Available usecases for the current user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsecaseInSettings> Usecases { get; set; }

        /// <summary>
        /// Partner messages enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartnerMessages { get; set; }

        /// <summary>
        /// Cost accounting model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costAccounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CostAccountingInSession CostAccounting { get; set; }

        /// <summary>
        /// Forms settings for session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormsInSession Forms { get; set; }

    }

    /// <summary>
    /// Defines a pension contract.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PensionContract
    {
        /// <summary>
        /// The pension company where the user has a contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCompany? Company { get; set; }

        /// <summary>
        /// The pension contract number that should be validated accordingly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Sub organization code for the Incomes Registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subOrgCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubOrgCode { get; set; }

        /// <summary>
        /// Pension discount percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionDiscountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionDiscountPercent { get; set; }

        /// <summary>
        /// Custom pension percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionPercent { get; set; }

        /// <summary>
        /// Read only pension percent which is valid if pension percent is not set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionDefaultPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionDefaultPercent { get; set; }

        /// <summary>
        /// Unique identifier (guid) for the contract.
        /// <br/>The value is automaticallyh added on the server side: Any input is ignored/invalid. Set as null for new contracts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Status of the contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SettingsStatus? Status { get; set; }

        /// <summary>
        /// If specified, defines the start date for the contract.
        /// <br/>If in the future, the the contract is inactive. Null (default) means the contract is valid indefinetely from the past.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// If specified, defines the end date for the contract. 
        /// <br/>Date is inclusive meaning that if EndDate is 31.12., contract is valid until end-of-year: Valid on 31.12. and invalid 1.1.
        /// <br/>If in the past, the the contract is inactive. Null (default) means the contract is valid indefinetely to future.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

    }

    /// <summary>
    /// Represents an insurance contract for employer or information that the employer knowingly does not have an 
    /// <br/>insurance contract. The latter is legal when only a very small amount of salaries is paid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsuranceContract
    {
        /// <summary>
        /// If set to true, the insurance is set to a partner insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPartnerInsurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPartnerInsurance { get; set; }

        /// <summary>
        /// Company for the current insurance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InsuranceCompany? Company { get; set; }

        /// <summary>
        /// The accident insurance contract number that should be validated accordingly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Percent for calculating the estimate for the accident insurance amount to pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurancePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsurancePercent { get; set; }

        /// <summary>
        /// Percent for calculating the estimate for the group life insurance amount to pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupLifeInsurancePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GroupLifeInsurancePercent { get; set; }

        /// <summary>
        /// Unique identifier (guid) for the contract.
        /// <br/>The value is automaticallyh added on the server side: Any input is ignored/invalid. Set as null for new contracts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Status of the contract
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SettingsStatus? Status { get; set; }

        /// <summary>
        /// If specified, defines the start date for the contract.
        /// <br/>If in the future, the the contract is inactive. Null (default) means the contract is valid indefinetely from the past.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// If specified, defines the end date for the contract. 
        /// <br/>Date is inclusive meaning that if EndDate is 31.12., contract is valid until end-of-year: Valid on 31.12. and invalid 1.1.
        /// <br/>If in the past, the the contract is inactive. Null (default) means the contract is valid indefinetely to future.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

    }

    /// <summary>
    /// Settings related to the primary partner, service model and settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryPartnerSettings
    {
        /// <summary>
        /// Partner account id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// TODO: Consider is this the right place for the all this info or should we have only the input here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountantInfo Info { get; set; }

        /// <summary>
        /// If true, the accountant is a registered Palkkaus.fi account who typically has access to this account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AccountantType? Type { get; set; }

        /// <summary>
        /// Id of the service model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceModelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceModelId { get; set; }

        /// <summary>
        /// Defines the service model for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnerServiceModel ServiceModel { get; set; }

    }

    /// <summary>
    /// Cost accounting models for session.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CostAccountingInSession
    {
        /// <summary>
        /// Cost accounting dimensions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimensionDefinition> Dimensions { get; set; }

    }

    /// <summary>
    /// Settings for session related to the calculation data delivery by forms.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FormsInSession
    {

    }

    /// <summary>
    /// Accountant details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountantInfo
    {
        /// <summary>
        /// Avatar for the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Official id of the person or company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Bank account number (IBAN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

    }

    /// <summary>
    /// Defines how the primary partner services the customer
    /// <br/>TODO: To be designed, see G:\My Drive\Tech\Phase 7\Settings\Palvelumallit.pptx
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartnerServiceModel
    {
        /// <summary>
        /// The main product package that defines the product features.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelFeatures Features { get; set; }

        /// <summary>
        /// Picing settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelPricing Pricing { get; set; }

        /// <summary>
        /// Partner branding settings: site logo, css etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelBranding Branding { get; set; }

        /// <summary>
        /// Default site for customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceModelSite Site { get; set; }

    }

    /// <summary>
    /// Provides the settings for a Company Employer account (all settings details for employer).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyAccountSettings
    {
        /// <summary>
        /// Salary calculation related settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationSettings Calc { get; set; }

        /// <summary>
        /// Reporting and layout related settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReportingSettings Reporting { get; set; }

        /// <summary>
        /// Primary partner, service model and pricing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryPartnerSettings Partner { get; set; }

        /// <summary>
        /// Defines how accounting is done and to which target it is exported / sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingSettings Accounting { get; set; }

        /// <summary>
        /// Cost accounting settings, e.g. cost centers and projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costAccounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CostAccountingSettings CostAccounting { get; set; }

        /// <summary>
        /// Settings related to making of the payments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentSettings Payments { get; set; }

        /// <summary>
        /// Custom usecases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseSettings Usecase { get; set; }

        /// <summary>
        /// Settings related to messaging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messaging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagingSettings Messaging { get; set; }

        /// <summary>
        /// Settings related to the calculation data delivery by forms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormsSettings Forms { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

    }

    /// <summary>
    /// Settings that affect the calculation result of the salaries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationSettings
    {
        /// <summary>
        /// Collection of pension contracts. In most cases, employer has only one, but in edge cases there may be several.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionContracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PensionContract> PensionContracts { get; set; }

        /// <summary>
        /// Collection of mandatory accident insurance contracts.
        /// <br/>In most cases, employer has only one, but in edge cases there may be several.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceContracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InsuranceContract> InsuranceContracts { get; set; }

        /// <summary>
        /// Settings related to unemployment insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentInsurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnemploymentInsuranceSettings UnemploymentInsurance { get; set; }

        /// <summary>
        /// Settings related to reporting the salaries to authorities through Incomes Register.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomesRegister", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IncomesRegisterSettings IncomesRegister { get; set; }

        /// <summary>
        /// Contains default calculation rows for the company.
        /// <br/>Typically used for setting for example monthly salary or hourly salary price for all workers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDefaults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDefinedRow> SalaryDefaults { get; set; }

    }

    /// <summary>
    /// Defines the settings for producing reports: Mainly PDF's but also HTMl previews.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReportingSettings
    {
        /// <summary>
        /// If true, the service model is not applied to this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("denyServiceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DenyServiceModel { get; set; }

        /// <summary>
        /// Identifier of the report layout template in id@partition or URI format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layoutTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayoutTemplateId { get; set; }

        /// <summary>
        /// Layouts may define some variables that may be overriden, e.g. colors, margins, font-sizes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("layoutTemplateVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayoutTemplateVariables { get; set; }

        /// <summary>
        /// The company logo that is used by some Layouts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

    }

    /// <summary>
    /// Settings related to Accounting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingSettings
    {
        /// <summary>
        /// If true, the service model is not applied to this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("denyServiceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DenyServiceModel { get; set; }

        /// <summary>
        /// Default accounting target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultTargetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultTargetId { get; set; }

        /// <summary>
        /// Accounting target systems and the rulesets assigned to them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountingTargetSettings> Targets { get; set; }

        /// <summary>
        /// Default period selection method:  PaidAt date (paid by employer), Salary date (paid to worker) or Work date (work done). The default is PaidAt date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPeriodDateKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PeriodDateKind? DefaultPeriodDateKind { get; set; }

        /// <summary>
        /// Options for accounting report delivery for the company.
        /// <br/>These are not affected by the service model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingReportDelivery ReportDelivery { get; set; }

        /// <summary>
        /// Options for accounting report delivery for the Accountant.
        /// <br/>These are not affected by the service model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountantReportDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountingReportDelivery AccountantReportDelivery { get; set; }

    }

    /// <summary>
    /// Settings related to Cost Accounting
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CostAccountingSettings
    {
        /// <summary>
        /// If true, the service model is not applied to this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("denyServiceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DenyServiceModel { get; set; }

        /// <summary>
        /// Cost accounting dimensions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimensionDefinition> Dimensions { get; set; }

    }

    /// <summary>
    /// Payment related settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentSettings
    {
        /// <summary>
        /// If true, the service model is not applied to this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("denyServiceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DenyServiceModel { get; set; }

        /// <summary>
        /// Settings related to payment methods that use the customer funds account (gross payment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerFunds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerFundsSettings CustomerFunds { get; set; }

        /// <summary>
        /// Settings related to invoices: Either salary payment or other invoicing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invoice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceSettings Invoice { get; set; }

        /// <summary>
        /// The default channel when making payments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? DefaultChannel { get; set; }

        /// <summary>
        /// Channel specific settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentChannelSettings> Channels { get; set; }

    }

    /// <summary>
    /// Usecase related settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecaseSettings
    {
        /// <summary>
        /// If true, the service model is not applied to this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("denyServiceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DenyServiceModel { get; set; }

        /// <summary>
        /// Available usecases for the current account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsecaseInSettings> Usecases { get; set; }

        /// <summary>
        /// URL to custom staging / integration server.
        /// <br/>Used in running custom usecases and other custom integrations (currently imports).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serverUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerUrl { get; set; }

    }

    /// <summary>
    /// Settings related to Messaging
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessagingSettings
    {
        /// <summary>
        /// If true, the service model is not applied to this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("denyServiceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DenyServiceModel { get; set; }

        /// <summary>
        /// Partner messages enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartnerMessages { get; set; }

        /// <summary>
        /// Options for the notification to be sent to the worker after the salary payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSalaryNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<WorkerSalaryNotification> WorkerSalaryNotifications { get; set; }

        /// <summary>
        /// Options for the delivery of the payslip to the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSalarySlipDeliveryMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<WorkerSalarySlipDeliveryMethod> WorkerSalarySlipDeliveryMethods { get; set; }

    }

    /// <summary>
    /// Settings related to the calculation data delivery by forms.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FormsSettings
    {
        /// <summary>
        /// If true, the service model is not applied to this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("denyServiceModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DenyServiceModel { get; set; }

    }

    /// <summary>
    /// Settings related to unemployment insurance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnemploymentInsuranceSettings
    {
        /// <summary>
        /// Status for indicating whether the total amount of paid salaries exceeds the thresold for higher unemployment insurance percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrollLimitStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UnemploymentPayrollLimitStatus? PayrollLimitStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IncomesRegisterSettings
    {
        /// <summary>
        /// The reference number for the tax authorities
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxReferenceNumber { get; set; }

        /// <summary>
        /// Defines how the reporting is done for Incomes registry (Tulorekisteri).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxReportHandling? IrReporting { get; set; }

    }

    /// <summary>
    /// Settings for Accounting report delivery.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingReportDelivery
    {
        /// <summary>
        /// If true, the delivery is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Address for delivery. Currently only email supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

    }

    /// <summary>
    /// Settings related to payment methods that use the customer funds account (gross payment).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerFundsSettings
    {
        /// <summary>
        /// If true, worker salary and expense payments are paid directly by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWorkerSelfHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWorkerSelfHandling { get; set; }

        /// <summary>
        /// If true, the user handles the reporting and payments himself/herself.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPensionSelfHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPensionSelfHandling { get; set; }

        /// <summary>
        /// If true, tax and social security payments are paid directly by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTaxAndSocialSecuritySelfHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTaxAndSocialSecuritySelfHandling { get; set; }

    }

    /// <summary>
    /// Stores the CSS and images for the report creation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReportingLayoutTemplate
    {
        /// <summary>
        /// HTML template for the print header.
        /// <br/>Use the following handlebars tags to inject values into the header:
        /// <br/>
        /// <br/>- `{{ date }}` Logical report date, e.g.Salary date for salary slip.
        /// <br/>- `{ { today } }` Printing date of the report.
        /// <br/>- `{{ title }}` Report specific title, e.g. "Palkkalaskelma".
        /// <br/>- `{{ subTitle}}` Report specific sub title, e.g. "Palkkapäivä 1.6.2020".
        /// <br/>- `{{&amp;gt; pageNumber }}` Current page number.Rendered as SPAN element.
        /// <br/>- `{ {&amp;gt; totalPages } }` total pages in the document.Rendered as SPAN element.
        /// <br/>- `{ {&amp;gt; logo } }` The main logo for the page as uploaded to settings.Rendered as SVG or IMG element.
        /// <br/>- `{ {&amp;gt; img2 } }` Secondary image as uploaded to settings.Rendered as SVG or IMG element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headerTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeaderTemplate { get; set; }

        /// <summary>
        /// HTML template for the print footer.
        /// <br/>Use the following handlebars tags to inject values into the footer:
        /// <br/>
        /// <br/>- `{{ date }}` Logical report date, e.g.Salary date for salary slip.
        /// <br/>- `{ { today } }` Printing date of the report.
        /// <br/>- `{{ title }}` Report specific title, e.g. "Palkkalaskelma".
        /// <br/>- `{{ subTitle}}` Report specific sub title, e.g. "Palkkapäivä 1.6.2020".
        /// <br/>- `{{&amp;gt; pageNumber }}` Current page number.Rendered as SPAN element.
        /// <br/>- `{ {&amp;gt; totalPages } }` total pages in the document.Rendered as SPAN element.
        /// <br/>- `{ {&amp;gt; logo } }` The main logo for the page as uploaded to settings.Rendered as SVG or IMG element.
        /// <br/>- `{ {&amp;gt; img2 } }` Secondary image as uploaded to settings.Rendered as SVG or IMG element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("footerTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FooterTemplate { get; set; }

        /// <summary>
        /// Additional CSS that is used to customize the layout of the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css { get; set; }

        /// <summary>
        /// Main logo image as embedded SVG or image (HTML).
        /// <br/>This should preferably be an SVG or alternatively an image tag with data uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// Secondary image that can be used in header / footer as embedded SVG or image (HTML).
        /// <br/>This should preferably be an SVG or alternatively an image tag with data uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img2 { get; set; }

        /// <summary>
        /// Defines the margins of the content area
        /// </summary>
        [Newtonsoft.Json.JsonProperty("margin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReportingArea Margin { get; set; }

        /// <summary>
        /// Print background graphics if such are added to the report using css property above.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printBackground", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintBackground { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReportingArea
    {
        /// <summary>
        /// Top margin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("top", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Top { get; set; }

        /// <summary>
        /// Right margin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("right", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Right { get; set; }

        /// <summary>
        /// Bottom margin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bottom { get; set; }

        /// <summary>
        /// Left margin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("left", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Left { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfBrandListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BrandListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of brands.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrandListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrandData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Brand specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrandData
    {
        /// <summary>
        /// Url to logo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// Css path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Skin { get; set; }

    }

    /// <summary>
    /// Full tax card that is stored in database and that is used in tax card percentage calculations.
    /// <br/>Also contains the salary history in the income log.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Taxcard
    {
        /// <summary>
        /// The Worker, whose salaries are paid based on this tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Worker { get; set; }

        /// <summary>
        /// Employment for which the tax card is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// The input that is coming from the Worker / Tax authorities
        /// </summary>
        [Newtonsoft.Json.JsonProperty("card", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TaxcardInput Card { get; set; } = new TaxcardInput();

        /// <summary>
        /// Calculations that have been paid to this tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeLog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxCardIncome> IncomeLog { get; set; }

        /// <summary>
        /// Read-only calculation results and other logic values on the Taxcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxcardResults Result { get; set; }

        /// <summary>
        /// If the item is an employer instance of a shared taxcard, contains the original identifier
        /// <br/>as URI ("[Server]/[PayloadType]/[Owner]/[Id]", e.g. "https://test-secure.salaxy.com/CalculationDTO/FI86POYL0009461858/16ea052e-f23f-4b72-83a9-b8f6590f0dc9");
        /// <br/>This item cannot be set in Save - only in Approve method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copyOfUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyOfUri { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Input from user for a tax card: What is written in the card plus the state infomration that is directly editable by the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardInput
    {
        /// <summary>
        /// The personal ID as written in the tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Tax card approval state
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardState? State { get; set; }

        /// <summary>
        /// Year that the tax card is valid for. Typically this means from February of this year to January of the following.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forYear", Required = Newtonsoft.Json.Required.Always)]
        public int ForYear { get; set; }

        /// <summary>
        /// Validity for the taxcard as expressed in the card.
        /// <br/>Note that the end date may not be reliable if new taxcard has replaced this one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Validity { get; set; }

        /// <summary>
        /// Tax percent as percent. I.e. for 50% set 50, not 0.5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent { get; set; }

        /// <summary>
        /// Income up to which the TaxPercent can be used.
        /// <br/>Any income above the limit is taxed with ExcessTaxPercent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IncomeLimit { get; set; }

        /// <summary>
        /// Tax percentage that is used in calculating the widthholding tax for the part of income above the IncomeLimit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent2 { get; set; }

        /// <summary>
        /// A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
        /// <br/>This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentMin { get; set; }

        /// <summary>
        /// TaxPercentMin set by owner of the card.
        /// <br/>This overrides the tax percent min set by the taxcard sharer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentMinOwned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentMinOwned { get; set; }

        /// <summary>
        /// Explicit value of when the item was last checked. At the moment, updated in API fetches only, but may be used later for other checks.
        /// <br/>Undefined value is 1.1.2000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastChecked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastChecked { get; set; }

        /// <summary>
        /// The income type of the taxacard if fetched from the tax authorities taxcard API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardApiIncomeType? IncomeType { get; set; }

        /// <summary>
        /// Withholding Percentage may include Stock Options and Grants (information from the taxcard API).
        /// <br/>This property is not currently in use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includesStockOptionsAndGrants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludesStockOptionsAndGrants { get; set; }

        /// <summary>
        /// Type of the taxcard as of 2019, when the taxcards logic was simplified by the Finnish tazx authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardKind? Kind { get; set; }

        /// <summary>
        /// Uri to the file copy of the tax card. 
        /// <br/>Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileUri { get; set; }

        /// <summary>
        /// Uri to the preview image of the tax card. 
        /// <br/>Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previewUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviewUri { get; set; }

    }

    /// <summary>
    /// Defines income that is recorded in a Taxcard:
    /// <br/>A paid salary calulation, income from previous employers or other salaries that affect the income calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxCardIncome
    {
        /// <summary>
        /// Type of income
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxCardIncomeType? Type { get; set; }

        /// <summary>
        /// Calculation id in the Salaxy database.
        /// <br/>If the calculation is not in the Salaxy Database, leave this null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner of the row, typically the employer that paid the salary.
        /// <br/>Null meaning that it is the owner of the original taxcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// A short description of the paid calculation.
        /// <br/>This is a mandatory field if the Id is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Beginning of the salary payment period from taxation point-of-view.
        /// <br/>This is typically the same as CalcInfo.WorkStartDate, but may be different in edge cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End of the salary payment period from taxation point-of-view.
        /// <br/>This is typically the same as CalcInfo.WorkEndDate, but may be different in edge cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// The paidAt date which tells mainly to which year the payment should be attributed.
        /// <br/>This is reliable only if the salary is paid by Salaxy (TaxCardIncomeType.SalaxyCalculation).
        /// <br/>In other cases it is just the reporting date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paidAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PaidAt { get; set; }

        /// <summary>
        /// Taxable income from this calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("income", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Income { get; set; }

        /// <summary>
        /// Widthholding tax in euro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax { get; set; }

        /// <summary>
        /// When loading calculations from the database (in taxcard Save and FindBy with diff), 
        /// <br/>this property identifies the differences in the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public IncomeLogDiff? Diff { get; set; }

    }

    /// <summary>
    /// Read-only calculations and other logic methods on a Taxcard.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardResults
    {
        /// <summary>
        /// Total income for the actual year, which is used for income limit.
        /// <br/>Note that this does not include January income that may be paid for previous year taxcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalIncome { get; set; }

        /// <summary>
        /// Total income for January of the following year that is paid for previous year taxcard (this taxcard) if there is no new taxcard for January.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalIncomeJanuary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalIncomeJanuary { get; set; }

        /// <summary>
        /// Payments of the salary calculations that were made using Palkkaus.fi system (as opposed to external salaries etc) 
        /// <br/>and that were marked to this card. These are for the actual year, which is used for income limit.
        /// <br/>For Shared card, all employers are considered, for Owner copies of shared card, only salaries paid by owner is considered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Payments of the salary calculations that were made using Palkkaus.fi system (as opposed to external salaries etc) 
        /// <br/>and that were marked to this card. These are for January of the following year that is paid for previous year taxcard (this taxcard) if there is no new taxcard for January.
        /// <br/>For Shared card, all employers are considered, for Owner copies of shared card, only salaries paid by owner is considered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentJanuary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaymentJanuary { get; set; }

        /// <summary>
        /// Gets the validity of the taxcard today. This value reflects purely the date value - it does not take into account approval or replacement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validityToday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardValidity? ValidityToday { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfTaxcardListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxcardListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// List item of taxcard searches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardState? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxcardData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Tax card specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardData
    {
        /// <summary>
        /// Year that the tax card is valid for. Typically this means from February of this year to January of the following.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ForYear { get; set; }

        /// <summary>
        /// Tax percent as percent. I.e. for 50% set 50, not 0.5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent { get; set; }

        /// <summary>
        /// Income up to which the TaxPercent can be used.
        /// <br/>Any income above the limit is taxed with ExcessTaxPercent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IncomeLimit { get; set; }

        /// <summary>
        /// Total income paid to the taxcard during the year (forYear).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalIncome { get; set; }

        /// <summary>
        /// Tax percentage that is used in calculating the widthholding tax for the part of income above the IncomeLimit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent2 { get; set; }

        /// <summary>
        /// A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
        /// <br/>This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentMin { get; set; }

        /// <summary>
        /// The income type of the taxacard if fetched from the tax authorities taxcard API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardApiIncomeType? IncomeType { get; set; }

        /// <summary>
        /// The type of the tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardKind? Kind { get; set; }

        /// <summary>
        /// Employment id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Start date of the taxcard validity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// End date of the taxcard validity. This may be null on NoTaxcard types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

        /// <summary>
        /// If the item is an employer instance of a shared taxcard, contains the original identifier
        /// <br/>as URI ("/[PayloadType]/[Owner]/[Id]", e.g. "/CalculationDTO/FI86POYL0009461858/16ea052e-f23f-4b72-83a9-b8f6590f0dc9");
        /// <br/>This item cannot be set in Save - only in Approve method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copyOfUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyOfUri { get; set; }

        /// <summary>
        /// Validity resolved as enumeration in relation to payment date given in the query.
        /// <br/>This is not available in direct database OData queries as it is relevant to current / given date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardValidity? Validity { get; set; }

        /// <summary>
        /// Uri to the file copy of the tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileUri { get; set; }

        /// <summary>
        /// Uri to the preview image of the tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previewUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviewUri { get; set; }

    }

    /// <summary>
    /// Contains the status and necessary data with Workers current taxcards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerCurrentTaxcards
    {
        /// <summary>
        /// The currently active taxcard if one exists. This property is null by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Taxcard Active { get; set; }

        /// <summary>
        /// All the relevant taxcards as list items.
        /// <br/>For Workes own taxcards search (MyTaxcards) this is ownerd cards only
        /// </summary>
        [Newtonsoft.Json.JsonProperty("list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxcardListItem> List { get; set; }

        /// <summary>
        /// Employer taxcards from all Employers for the Worker account.
        /// <br/>All available within the searched timestring. This list is only available for the Worker, not for the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxcardListItem> Employers { get; set; }

        /// <summary>
        /// Personal ID that is used for taxcard binding. This always exists as opposed to Employment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Employment relation if the search is done based on employment relation ID and not Current worker account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex Employment { get; set; }

        /// <summary>
        /// A shared taxcard waiting for approval if one exists. This property is null by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("waitingApproval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxcardWaitingApproval WaitingApproval { get; set; }

        /// <summary>
        /// Employment preference for the taxcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentTaxcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationTaxcard? EmploymentTaxcard { get; set; }

    }

    /// <summary>
    /// Informs the employer that there is a Worker taxcard waiting for approval
    /// <br/>potentially without revealing personal information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardWaitingApproval
    {
        /// <summary>
        /// URI for the shared card: This is the taxcard owned by the Worker and to view it 
        /// <br/>you need to request your own copy (would be in FullCard).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Type of the taxcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardKind? Kind { get; set; }

        /// <summary>
        /// Status of the taxcard
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardState? State { get; set; }

        /// <summary>
        /// Time when the taxcard was added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Owner account that added the taxcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Owner { get; set; }

        /// <summary>
        /// If true, the relation has not yet been confirmed:
        /// <br/>I.e. the employer has just input the Finnish Personal Id (HETU) of the Worker.
        /// <br/>The employment relation is confirmed when salaries are paid or salary request is received from Worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRelationUnconfirmed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRelationUnconfirmed { get; set; }

        /// <summary>
        /// If there is an owner instance of taxcard for the employer, the copy is added here.
        /// <br/>Instance exists only if there is a confirmed employment relation or if employer explicitly requests the taxcard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Taxcard FullCard { get; set; }

    }

    /// <summary>
    /// Provides the results of the tax card calculation and business logic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardResult
    {
        /// <summary>
        /// Sum of income for this year based on the items marked on the tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yearlyPreviousIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YearlyPreviousIncome { get; set; }

        /// <summary>
        /// Provides a decimal number for a recommended widthholding tax IF it is possible to calculate that based on given information.
        /// <br/>Null, if the information is not sufficient to give a recommendation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax { get; set; }

    }

    /// <summary>
    /// Test object with value properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestValues
    {
        /// <summary>
        /// Test integer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntValue { get; set; }

        /// <summary>
        /// Test double.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doubleValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DoubleValue { get; set; }

        /// <summary>
        /// Test decimal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DecimalValue { get; set; }

        /// <summary>
        /// Test string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stringValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StringValue { get; set; }

        /// <summary>
        /// Test DateTime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTimeValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTimeValue { get; set; }

        /// <summary>
        /// Test Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateValue { get; set; }

        /// <summary>
        /// Test bool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boolValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BoolValue { get; set; }

        /// <summary>
        /// Test object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objectValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ObjectValue { get; set; }

        /// <summary>
        /// Test array
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arrayValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> ArrayValue { get; set; }

        /// <summary>
        /// Test enum
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TestEnum? EnumValue { get; set; }

        /// <summary>
        /// Free values dictionary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dictValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> DictValue { get; set; }

    }

    /// <summary>
    /// Object containing essential details of the test account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TestAccountInfo
    {
        /// <summary>
        /// Bearer token for authentication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        /// <summary>
        /// The current user credentials.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userCredential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SessionUserCredential UserCredential { get; set; }

    }

    /// <summary>
    /// View model data for Simple Federation Flow sample page in /MyAccount/Federation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FederationSampleViewModel
    {
        /// <summary>
        /// The federation data based on the current user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("federationData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpenIdUserInfoSupportedClaims FederationData { get; set; }

        /// <summary>
        /// Federation data as JSON: Only used by depricated Asp.Net MVC version of the demo view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("federationDataJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FederationDataJson { get; set; }

        [Newtonsoft.Json.JsonProperty("customFederationDataJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomFederationDataJson { get; set; }

        /// <summary>
        /// Federation data as JWT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        /// <summary>
        /// Certificate password for signing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificatePwd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificatePwd { get; set; }

        /// <summary>
        /// Uploaded certificate file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HttpPostedFileBase CertificateFile { get; set; }

        /// <summary>
        /// Certificate bytes as Base64String
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateBytes { get; set; }

        /// <summary>
        /// Account to impersonate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

    }

    /// <summary>
    /// Part of the OpenId specification that is supported by Salaxy federated authentication / Authorization.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenIdUserInfoSupportedClaims
    {
        /// <summary>
        /// REQUIRED. Issuer Identifier for the Issuer of the response. 
        /// <br/>The iss value is a case-sensitive URL using the https scheme that contains scheme, host, and optionally, port number and path components and no query or fragment components.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iss { get; set; }

        /// <summary>
        /// In Salaxy federation this should be the federation endpoint: "https://secure.salaxy.com/security/federation" in production
        /// <br/>OR "https://test-api.salaxy.com/security/federation" in the test environment.
        /// <br/>From the spec: REQUIRED. Audience(s) that this ID Token is intended for. 
        /// <br/>It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value. 
        /// <br/>It MAY also contain identifiers for other audiences.
        /// <br/>In the general case, the aud value is an array of case-sensitive strings.
        /// <br/>In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aud", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Aud { get; set; }

        /// <summary>
        /// REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing. 
        /// <br/>The processing of this parameter requires that the current date/time MUST be before the expiration date/time listed in the value.
        /// <br/>Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. 
        /// <br/>Its value is a JSON [RFC7159] number representing the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time.
        /// <br/>See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Exp { get; set; }

        /// <summary>
        /// REQUIRED. Subject - Identifier for the End-User at the Issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sub", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sub { get; set; }

        /// <summary>
        /// End-User's full name in displayable form including all name parts, possibly including titles and suffixes, 
        /// <br/>ordered according to the End-User's locale and preferences.
        /// <br/>NOTE: In creating account etc., Salaxy will use given_name and family_name separately and therefore ignore the name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Given name(s) or first name(s) of the End-User.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("given_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Given_name { get; set; }

        /// <summary>
        /// Surname(s) or last name(s) of the End-User.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("family_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Family_name { get; set; }

        /// <summary>
        /// URL of the End-User's profile picture.
        /// <br/>This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("picture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Picture { get; set; }

        /// <summary>
        /// End-User's preferred e-mail address.
        /// <br/>Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax.
        /// <br/>The RP MUST NOT rely upon this value being unique, as discussed in Section 2.5.3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// True if the End-User's e-mail address has been verified; otherwise false. 
        /// <br/>IMPORTANT: In Salaxy federation context, avoid sending non-confirmed e-mails. This may later become an error without being considered a breaking change.
        /// <br/>When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. 
        /// <br/>The means by which an e-mail address is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email_verified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Email_verified { get; set; }

        /// <summary>
        /// End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
        /// <br/>The year MAY be 0000, indicating that it is omitted.
        /// <br/>To represent only the year, YYYY format is allowed.
        /// <br/>Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Birthdate { get; set; }

        /// <summary>
        /// End-User's locale, represented as a BCP47 [RFC5646] language tag.
        /// <br/>This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash.
        /// <br/>For example, en-US or fr-CA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        /// <summary>
        /// End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400.
        /// <br/>If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone_number { get; set; }

        /// <summary>
        /// True if the End-User's phone number has been verified; otherwise false.
        /// <br/>When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed.
        /// <br/>The means by which a phone number is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
        /// <br/>When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_number_verified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Phone_number_verified { get; set; }

        /// <summary>
        /// End-User's preferred postal address.
        /// <br/>The value of the address member is a JSON [RFC4627] structure containing some or all of the members defined in Section 2.5.1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpenIdUserInfoAddress Address { get; set; }

        /// <summary>
        /// Time the End-User's information was last updated.
        /// <br/>Its value is a JSON number representing the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Updated_at { get; set; }

        /// <summary>
        /// Salaxy extension to Open ID Connect UserInfo claims for Company federation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("https://salaxy.com/federation/company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoCompanyAccount Https___salaxyCom_federation_company { get; set; }

        /// <summary>
        /// Salaxy extension to Open ID Connect UserInfo claims for Personal account federation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("https://salaxy.com/federation/person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoPersonAccount Https___salaxyCom_federation_person { get; set; }

        /// <summary>
        /// Salaxy extension to Open ID Connect UserInfo claims for Application data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("https://salaxy.com/federation/app", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoApplication Https___salaxyCom_federation_app { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HttpPostedFileBase
    {
        [Newtonsoft.Json.JsonProperty("contentLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContentLength { get; set; }

        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("inputStream", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stream InputStream { get; set; }

    }

    /// <summary>
    /// The Address Claim represents a physical mailing address in OpenID Connect UserInfo response message.
    /// <br/>This object is modeled according to: http://openid.net/specs/openid-connect-basic-1_0.html#AddressClaim
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenIdUserInfoAddress
    {
        /// <summary>
        /// Full street address component, which MAY include house number, street name, Post Office Box, and multi-line extended street address information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street_address { get; set; }

        /// <summary>
        /// City or locality component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        /// <summary>
        /// Zip code or postal code component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }

    }

    /// <summary>
    /// Salaxy extension to Open ID claims for company federation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInfoCompanyAccount
    {
        /// <summary>
        /// If true, the authorization is made for a company account. 
        /// <br/>The root user claims are just for a current user acting in behalf of the company.
        /// <br/>If false, the entire CompanyClaims object will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("as_company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? As_company { get; set; }

        /// <summary>
        /// The Business ID (Y-tunnus / Business Identity Code) is a code given to businesses and organizations by the PRH or the Tax Administration. 
        /// <br/>It consists of seven digits, a dash and a control mark, for example 1234567-8.
        /// <br/>Alternative accepted formats incule international VAT number "FI12345678" or number without the dash: "12345678".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("business_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Business_id { get; set; }

        /// <summary>
        /// One of the Salaxy Finnish company type shortcuts: fiOy, fiTm, fiRy, fiYy (Other)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CompanyType Type { get; set; }

        /// <summary>
        /// Company name - the owner of the Salaxy account and shown in salary calculations, reports and invoices.
        /// <br/>Typically this is the official full name of the company as in Business registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// URL of the Company profile picture.
        /// <br/>This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. 
        /// <br/>The URL SHOULD specifically reference a company logo picture (PNG preferred) and it should be a square. If not, it may be converted, cropped and/or extended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("picture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Picture { get; set; }

        /// <summary>
        /// The company's preferred e-mail address in relation to salary payments.
        /// <br/>Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// True if the Company's e-mail address has been verified; otherwise false.
        /// <br/>IMPORTANT: In Salaxy federation context, avoid sending non-confirmed e-mails. This may later become an error without being considered a breaking change.
        /// <br/>When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. 
        /// <br/>The means by which an e-mail address is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email_verified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Email_verified { get; set; }

        /// <summary>
        /// Company's preferred telephone number for salary payment purposes. 
        /// <br/>E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400.
        /// <br/>If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone_number { get; set; }

        /// <summary>
        /// True if the Company's phone number has been verified; otherwise false.
        /// <br/>When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed.
        /// <br/>The means by which a phone number is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
        /// <br/>When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_number_verified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Phone_number_verified { get; set; }

        /// <summary>
        /// Company's preferred postal address in relation to salary payments.
        /// <br/>The value of the address member is a JSON [RFC4627] structure containing some or all of the members defined in Section 2.5.1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpenIdUserInfoAddress Address { get; set; }

        /// <summary>
        /// The primary partner account for the new company to create.
        /// <br/>If the company already exists and has given authorization to the primary partner, and does not have any primary partner, the primary partner will be set.
        /// <br/>Please note, that the calling account must have the authorization to the primary partner account, or
        /// <br/>be the primary partner itself.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proxy_partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Proxy_partner { get; set; }

        /// <summary>
        /// The account identifier at the partner site. 
        /// <br/>If present, this ID is used to restrict the authorization to one account at partner site only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner_account_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner_account_id { get; set; }

    }

    /// <summary>
    /// Salaxy extension to Open ID Connect UserInfo claims for Personal account federation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInfoPersonAccount
    {
        /// <summary>
        /// If true, the user issuer indicates that the current user has the right to sign in behalf of the company / association.
        /// <br/>In this case the provider must also provide a valid Finnish personal ID in personal_id field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("can_sign_company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Can_sign_company { get; set; }

        /// <summary>
        /// A Finnish Personal ID (Henkilötunnus / HETU) for digital signature.
        /// <br/>If can_sign_company is set to true, the issuer should provide a valid personal id here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personal_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Personal_id { get; set; }

    }

    /// <summary>
    /// Salaxy extension to Open ID Connect UserInfo claims for Application data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInfoApplication
    {
        /// <summary>
        /// Return link back to the calling application. Token is added to this string
        /// </summary>
        [Newtonsoft.Json.JsonProperty("return_link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Return_link { get; set; }

        /// <summary>
        /// Return link in case of error or user cancel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancel_link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cancel_link { get; set; }

        /// <summary>
        /// Application role that the user has in relation to the account in this session.
        /// <br/>Currently supported values are: "noAccess" and "owner"
        /// <br/>Also "unknown" (the default if null) is technically supported, but that value is an error in federation process by design.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UserInfoApplicationRole? Role { get; set; }

        /// <summary>
        /// Application specific state data that is sent from the federation provider to the end-application.
        /// <br/>This data is guaranteed to survive the onboarding process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> State { get; set; }

        /// <summary>
        /// TEMPORARY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Custom { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stream
    {
        [Newtonsoft.Json.JsonProperty("canRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanRead { get; set; }

        [Newtonsoft.Json.JsonProperty("canSeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanSeek { get; set; }

        [Newtonsoft.Json.JsonProperty("canTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanTimeout { get; set; }

        [Newtonsoft.Json.JsonProperty("canWrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CanWrite { get; set; }

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Length { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Position { get; set; }

        [Newtonsoft.Json.JsonProperty("readTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReadTimeout { get; set; }

        [Newtonsoft.Json.JsonProperty("writeTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WriteTimeout { get; set; }

    }

    /// <summary>
    /// Usecase definition
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Usecase
    {
        /// <summary>
        /// Uri with owner information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Short title for the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Longer description for what the usecase is used for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// URL for the icon that represents the service model. 
        /// <br/>Supports font-awesome icons v4: https://fontawesome.com/v4.7/ (e.g. "fa-wrench") and images with absolute URL (https).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        /// <summary>
        /// Item type of the usecase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiItemType? ItemType { get; set; }

        /// <summary>
        /// The default status of the usecase in the settings.
        /// <br/>The status affects the visibilty of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UsecaseStatus? Status { get; set; }

        /// <summary>
        /// Order setting for the usecases.
        /// <br/>This is needed e.g. ad hoc reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>
        /// JSON schema defines the data model and the automatically generated default user interface for the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema { get; set; }

        /// <summary>
        /// The actions related to this usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsecaseAction> Actions { get; set; }

        /// <summary>
        /// Customized userinterface definitions (views) for the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("views", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsecaseView> Views { get; set; }

        /// <summary>
        /// Readonly workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// EXPERIMENTRAL: The workflow data (Drawflow format) for the usecase.
        /// <br/>This property is experimental and may be refactored without it being a breaking change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Flow { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecaseAction
    {
        /// <summary>
        /// Type of the automation action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UsecaseActionType? ActionType { get; set; }

        /// <summary>
        /// Title of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// If true, the button is shown in the user interfaces.
        /// <br/>TODO: This property may be removed before final production version =&amp;gt; Set on/off depending on the view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiShowButton", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UiShowButton { get; set; }

        /// <summary>
        /// Text for the UI button.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UiText { get; set; }

        /// <summary>
        /// Defines the color of the UI button
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uiColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public BootstrapStyle? UiColor { get; set; }

        /// <summary>
        /// Description of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The content: The script or other definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

    }

    /// <summary>
    /// Customized user interface view.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecaseView
    {
        /// <summary>
        /// Title of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Description of the action
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The content: The HTML for the view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageResultOfUsecaseListItem
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsecaseListItem> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of usecases.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecaseListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UsecaseStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseListItemData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Usecase specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecaseListItemData
    {
        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Longer description for what the usecase is used for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// URL for the icon that represents the service model. 
        /// <br/>Supports font-awesome icons v4: https://fontawesome.com/v4.7/ (e.g. "fa-wrench") and images with absolute URL (https).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        /// <summary>
        /// Order setting for the usecases.
        /// <br/>This is needed e.g. ad hoc reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

    }

    /// <summary>
    /// Version information for the API object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionInfo
    {
        /// <summary>
        /// Identifier for the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }

        /// <summary>
        /// Operation which created the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }

        /// <summary>
        /// Date and time when the version was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// User account  who created the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar UserAccount { get; set; }

    }

    /// <summary>
    /// Abstract base class for implementing CRUD objects in the Salaxy API.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiCrudObject
    {
        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated. 
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// AbcSection enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AbcSection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"doNotShow")]
        DoNotShow = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"employment")]
        Employment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"insurance")]
        Insurance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"salary")]
        Salary = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"examples")]
        Examples = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausGeneral")]
        PalkkausGeneral = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausInstructions")]
        PalkkausInstructions = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"blog")]
        Blog = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"press")]
        Press = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"personEmployer")]
        PersonEmployer = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"householdEmployer")]
        HouseholdEmployer = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"worker")]
        Worker = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"employee")]
        Employee = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneur")]
        Entrepreneur = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"association")]
        Association = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"businessOwner")]
        BusinessOwner = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"productLongDescription")]
        ProductLongDescription = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"documentTemplates")]
        DocumentTemplates = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"instructionsAndExamples")]
        InstructionsAndExamples = 19,

    }

    /// <summary>
    /// AbsenceCauseCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AbsenceCauseCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unpaidLeave")]
        UnpaidLeave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"personalReason")]
        PersonalReason = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"illness")]
        Illness = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"partTimeSickLeave")]
        PartTimeSickLeave = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"parentalLeave")]
        ParentalLeave = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"specialMaternityLeave")]
        SpecialMaternityLeave = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"rehabilitation")]
        Rehabilitation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"childIllness")]
        ChildIllness = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"partTimeChildCareLeave")]
        PartTimeChildCareLeave = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"training")]
        Training = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"jobAlternationLeave")]
        JobAlternationLeave = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"studyLeave")]
        StudyLeave = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"industrialAction")]
        IndustrialAction = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"interruptionInWorkProvision")]
        InterruptionInWorkProvision = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"leaveOfAbsence")]
        LeaveOfAbsence = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"militaryRefresherTraining")]
        MilitaryRefresherTraining = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"militaryService")]
        MilitaryService = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"layOff")]
        LayOff = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"childCareLeave")]
        ChildCareLeave = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"midWeekHoliday")]
        MidWeekHoliday = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"accruedHoliday")]
        AccruedHoliday = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"occupationalAccident")]
        OccupationalAccident = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"annualLeave")]
        AnnualLeave = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"partTimeAbsenceDueToRehabilitation")]
        PartTimeAbsenceDueToRehabilitation = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 25,

    }

    /// <summary>
    /// AccountantType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountantType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unlinkedPrimaryPartner")]
        UnlinkedPrimaryPartner = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unlinkedAccountingOnly")]
        UnlinkedAccountingOnly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"pendingPrimaryPartner")]
        PendingPrimaryPartner = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"primaryPartner")]
        PrimaryPartner = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 5,

    }

    /// <summary>
    /// AccountingChannel enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountingChannel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"procountor")]
        Procountor = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"vismaNetvisor")]
        VismaNetvisor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"vismaFivaldi")]
        VismaFivaldi = 3,

    }

    /// <summary>
    /// AccountingPeriodClosingOption enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountingPeriodClosingOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"accounting")]
        Accounting = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"periodicInvoices")]
        PeriodicInvoices = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"accountingAndPeriodicInvoices")]
        AccountingAndPeriodicInvoices = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"irReports")]
        IrReports = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"accountingAndIrReports")]
        AccountingAndIrReports = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"periodicInvoicesAndIrReports")]
        PeriodicInvoicesAndIrReports = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"accountingAndPeriodicInvoicesAndIrReports")]
        AccountingAndPeriodicInvoicesAndIrReports = 7,

    }

    /// <summary>
    /// AccountingReportRowType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountingReportRowType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"debit")]
        Debit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"credit")]
        Credit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"total")]
        Total = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"groupHeader")]
        GroupHeader = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"groupTotal")]
        GroupTotal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"childRow")]
        ChildRow = 5,

    }

    /// <summary>
    /// AccountingReportTableType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountingReportTableType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"classic")]
        Classic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"simple")]
        Simple = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mapped")]
        Mapped = 2,

    }

    /// <summary>
    /// AccountingTargetStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountingTargetStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ownedTarget")]
        OwnedTarget = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"productTarget")]
        ProductTarget = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedTarget")]
        SharedTarget = 3,

    }

    /// <summary>
    /// AgeGroupCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgeGroupCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"a")]
        A = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"b")]
        B = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"c")]
        C = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"u")]
        U = 3,

    }

    /// <summary>
    /// AgeRange enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgeRange
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"age_15")]
        Age_15 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"age16")]
        Age16 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"age17")]
        Age17 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"age18_52")]
        Age18_52 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"age53_62")]
        Age53_62 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"age63_64")]
        Age63_64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"age65_67")]
        Age65_67 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"age68AndOVer")]
        Age68AndOVer = 8,

    }

    /// <summary>
    /// AllowanceCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllowanceCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mealAllowance")]
        MealAllowance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"partialDailyAllowance")]
        PartialDailyAllowance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fullDailyAllowance")]
        FullDailyAllowance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internationalDailyAllowance")]
        InternationalDailyAllowance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"taxExemptReimbursementsAbroad")]
        TaxExemptReimbursementsAbroad = 4,

    }

    /// <summary>
    /// AnnualLeavePaymentKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnnualLeavePaymentKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"planned")]
        Planned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manualSalary")]
        ManualSalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"manualCompensation")]
        ManualCompensation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"manualBonus")]
        ManualBonus = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"paidCalc")]
        PaidCalc = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"draftCalc")]
        DraftCalc = 6,

    }

    /// <summary>
    /// ApiCheckStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiCheckStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ignored")]
        Ignored = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"success")]
        Success = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 3,

    }

    /// <summary>
    /// ApiImportStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiImportStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ignored")]
        Ignored = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"success")]
        Success = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 3,

    }

    /// <summary>
    /// ApiListItemType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiListItemType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"accountBase")]
        AccountBase = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"companyAccount")]
        CompanyAccount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"personAccount")]
        PersonAccount = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"workerAccount")]
        WorkerAccount = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"certificate")]
        Certificate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"sessionUserCredential")]
        SessionUserCredential = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"onboarding")]
        Onboarding = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"profile")]
        Profile = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"calculation")]
        Calculation = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"calculationPaid")]
        CalculationPaid = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"eSalaryPayment")]
        ESalaryPayment = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"payment")]
        Payment = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"earningsPayment")]
        EarningsPayment = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"employment")]
        Employment = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"workerAbsences")]
        WorkerAbsences = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayYear")]
        HolidayYear = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"taxcard")]
        Taxcard = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"payrollDetails")]
        PayrollDetails = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
        Invoice = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"report")]
        Report = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"blobFile")]
        BlobFile = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"payerSummary")]
        PayerSummary = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"calendarEvent")]
        CalendarEvent = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"usecase")]
        Usecase = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"dataset")]
        Dataset = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"article")]
        Article = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"messageThread")]
        MessageThread = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"emailMessage")]
        EmailMessage = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"accountProducts")]
        AccountProducts = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"varmaPensionOrder")]
        VarmaPensionOrder = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"ifInsuranceOrder")]
        IfInsuranceOrder = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 32,

    }

    /// <summary>
    /// ApiTestErrorType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiTestErrorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"userFriendly")]
        UserFriendly = 1,

    }

    /// <summary>
    /// ApiItemType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiItemType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"calculation")]
        Calculation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"calculationPaid")]
        CalculationPaid = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dataset")]
        Dataset = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"payrollDetails")]
        PayrollDetails = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
        Invoice = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"earningsPaymentReport")]
        EarningsPaymentReport = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"payerSummaryReport")]
        PayerSummaryReport = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"employment")]
        Employment = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"messageThread")]
        MessageThread = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"calendarEvent")]
        CalendarEvent = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"listItems")]
        ListItems = 11,

    }

    /// <summary>
    /// ApiValidationErrorType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiValidationErrorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"required")]
        Required = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 3,

    }

    /// <summary>
    /// AuthenticationMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthenticationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"emailPwdLocal")]
        EmailPwdLocal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"facebook")]
        Facebook = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"google")]
        Google = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"microsoft")]
        Microsoft = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"linkedIn")]
        LinkedIn = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"auth0Database")]
        Auth0Database = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"x509")]
        X509 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"salaxy")]
        Salaxy = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"webAuthn")]
        WebAuthn = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"microsoftOAuth")]
        MicrosoftOAuth = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"googleOAuth")]
        GoogleOAuth = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"internalLocalhost")]
        InternalLocalhost = 13,

    }

    /// <summary>
    /// AuthorizationStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthorizationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"oK")]
        OK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"accessDenied")]
        AccessDenied = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expiredOauthToken")]
        ExpiredOauthToken = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"invalidOAuthToken")]
        InvalidOAuthToken = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"noOauthToken")]
        NoOauthToken = 5,

    }

    /// <summary>
    /// AuthorizationType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthorizationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"employerAuthorization")]
        EmployerAuthorization = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"workerContract")]
        WorkerContract = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"companyContract")]
        CompanyContract = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"temporary")]
        Temporary = 5,

    }

    /// <summary>
    /// AvatarPictureType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AvatarPictureType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"icon")]
        Icon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"uploaded")]
        Uploaded = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"gravatar")]
        Gravatar = 2,

    }

    /// <summary>
    /// BankPaymentType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BankPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"paytrailBatch")]
        PaytrailBatch = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"netvisorPayment")]
        NetvisorPayment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"salaryGrossPayment")]
        SalaryGrossPayment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"refundPayment")]
        RefundPayment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"partialRefundPayment")]
        PartialRefundPayment = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"doubleRefundPayment")]
        DoubleRefundPayment = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"transferToEcfaPayment")]
        TransferToEcfaPayment = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"insuranceGrossPayment")]
        InsuranceGrossPayment = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"netSalary")]
        NetSalary = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"salaryAdvance")]
        SalaryAdvance = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"netSalaryRepayment")]
        NetSalaryRepayment = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"netSalaryCorrection")]
        NetSalaryCorrection = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"taxAccount")]
        TaxAccount = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"tvr")]
        Tvr = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"tvrRfnd")]
        TvrRfnd = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausFees")]
        PalkkausFees = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"bankFees")]
        BankFees = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"paytrailFees")]
        PaytrailFees = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"insuranceLahiTapiola")]
        InsuranceLahiTapiola = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"tyel")]
        Tyel = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelEteraContract")]
        TyelEteraContract = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelEteraTemp")]
        TyelEteraTemp = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelEteraUnknown")]
        TyelEteraUnknown = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelEloContract")]
        TyelEloContract = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelEloTemp")]
        TyelEloTemp = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelEloInitialImport")]
        TyelEloInitialImport = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelVarmaContract")]
        TyelVarmaContract = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelVarmaTemp")]
        TyelVarmaTemp = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelIlmarinenContract")]
        TyelIlmarinenContract = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"tyelIlmarinenTemp")]
        TyelIlmarinenTemp = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"union")]
        Union = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"unionRaksa")]
        UnionRaksa = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"foreclosure")]
        Foreclosure = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"saldoYearBegin")]
        SaldoYearBegin = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"saldoYearEnd")]
        SaldoYearEnd = 36,

    }

    /// <summary>
    /// BenefitCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BenefitCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"accommodationBenefit")]
        AccommodationBenefit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"telephoneBenefit")]
        TelephoneBenefit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mealBenefit")]
        MealBenefit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"otherBenefits")]
        OtherBenefits = 3,

    }

    /// <summary>
    /// BlobFileType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BlobFileType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"authorizationPdf")]
        AuthorizationPdf = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"avatar")]
        Avatar = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"taxCard")]
        TaxCard = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"expensesReceipt")]
        ExpensesReceipt = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"raksaloki")]
        Raksaloki = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"template")]
        Template = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"eInvoice")]
        EInvoice = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"temporary")]
        Temporary = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"settings")]
        Settings = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"messages")]
        Messages = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"record")]
        Record = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyReport")]
        MonthlyReport = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"yearlyReport")]
        YearlyReport = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"calcReport")]
        CalcReport = 14,

    }

    /// <summary>
    /// BlobRepository enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BlobRepository
    {

        [System.Runtime.Serialization.EnumMember(Value = @"userFiles")]
        UserFiles = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"versionHistory")]
        VersionHistory = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"systemFiles")]
        SystemFiles = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"payload")]
        Payload = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"reports")]
        Reports = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"cdnImages")]
        CdnImages = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"iam")]
        Iam = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"gitContent")]
        GitContent = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"fileSystemContent")]
        FileSystemContent = 8,

    }

    /// <summary>
    /// BootstrapStyle enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BootstrapStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"success")]
        Success = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"info")]
        Info = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"danger")]
        Danger = 5,

    }

    /// <summary>
    /// CalcGroup enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalcGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"baseSalary")]
        BaseSalary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"salaryAdditions")]
        SalaryAdditions = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"benefits")]
        Benefits = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"expenses")]
        Expenses = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"deductions")]
        Deductions = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"otherNoPayment")]
        OtherNoPayment = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"totals")]
        Totals = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 8,

    }

    /// <summary>
    /// CalculationFlag enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationFlag
    {

        [System.Runtime.Serialization.EnumMember(Value = @"exclude")]
        Exclude = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pensionInsurance")]
        PensionInsurance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"accidentInsurance")]
        AccidentInsurance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unemploymentInsurance")]
        UnemploymentInsurance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"healthInsurance")]
        HealthInsurance = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"insurancesDeduction")]
        InsurancesDeduction = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"noTax")]
        NoTax = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"tax")]
        Tax = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"taxDeduction")]
        TaxDeduction = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"cfNoPayment")]
        CfNoPayment = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"cfPayment")]
        CfPayment = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"cfDeduction")]
        CfDeduction = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"cfDeductionAtSalaxy")]
        CfDeductionAtSalaxy = 12,

    }

    /// <summary>
    /// CalculationRefresh enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationRefresh
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"worker")]
        Worker = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"employer")]
        Employer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"employment")]
        Employment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"taxcard")]
        Taxcard = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"insurances")]
        Insurances = 5,

    }

    /// <summary>
    /// CalculationResultRowType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationResultRowType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"totalBenefits")]
        TotalBenefits = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"totalExpenses")]
        TotalExpenses = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"totalSocialSecurityEmployer")]
        TotalSocialSecurityEmployer = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"totalSocialSecurityEmployerDebt")]
        TotalSocialSecurityEmployerDebt = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"totalSocialSecurityEmployerPayment")]
        TotalSocialSecurityEmployerPayment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"totalPension")]
        TotalPension = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"totalPensionPayment")]
        TotalPensionPayment = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"totalPensionEmployer")]
        TotalPensionEmployer = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"totalPensionEmployerDebt")]
        TotalPensionEmployerDebt = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"totalPensionWorker")]
        TotalPensionWorker = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"totalUnemployment")]
        TotalUnemployment = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"totalUnemploymentPayment")]
        TotalUnemploymentPayment = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"totalUnemploymentEmployer")]
        TotalUnemploymentEmployer = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"totalUnemploymentEmployerDebt")]
        TotalUnemploymentEmployerDebt = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"totalUnemploymentWorker")]
        TotalUnemploymentWorker = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"totalPalkkaus")]
        TotalPalkkaus = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"totalSalary")]
        TotalSalary = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"totalTax")]
        TotalTax = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"totalTaxPayment")]
        TotalTaxPayment = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"totalPayment")]
        TotalPayment = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerPayment")]
        TotalWorkerPayment = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"totalService")]
        TotalService = 22,

    }

    /// <summary>
    /// CalculationRowSource enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationRowSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manualRow")]
        ManualRow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"worktimeImport")]
        WorktimeImport = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"priceEmployment")]
        PriceEmployment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"priceCompany")]
        PriceCompany = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"customRowtype")]
        CustomRowtype = 6,

    }

    /// <summary>
    /// CalculationRowType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationRowType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salary")]
        Salary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlySalary")]
        HourlySalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlySalary")]
        MonthlySalary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerPayment")]
        TotalWorkerPayment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"totalEmployerPayment")]
        TotalEmployerPayment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"overtime")]
        Overtime = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"tesWorktimeShortening")]
        TesWorktimeShortening = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"eveningAddition")]
        EveningAddition = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"nightimeAddition")]
        NightimeAddition = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"saturdayAddition")]
        SaturdayAddition = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"sundayWork")]
        SundayWork = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"otherAdditions")]
        OtherAdditions = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveSalary")]
        PaidSickLeaveSalary = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveHourlySalary")]
        PaidSickLeaveHourlySalary = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveMonthlySalary")]
        PaidSickLeaveMonthlySalary = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingSalary")]
        TrainingSalary = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingHourlySalary")]
        TrainingHourlySalary = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingMonthlySalary")]
        TrainingMonthlySalary = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"accomodationBenefit")]
        AccomodationBenefit = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"mealBenefit")]
        MealBenefit = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"phoneBenefit")]
        PhoneBenefit = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"carBenefit")]
        CarBenefit = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"bicycleBenefit")]
        BicycleBenefit = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"otherBenefit")]
        OtherBenefit = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayCompensation")]
        HolidayCompensation = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayBonus")]
        HolidayBonus = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"holidaySalary")]
        HolidaySalary = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"dailyAllowance")]
        DailyAllowance = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"dailyAllowanceHalf")]
        DailyAllowanceHalf = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"mealCompensation")]
        MealCompensation = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"milageOwnCar")]
        MilageOwnCar = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"toolCompensation")]
        ToolCompensation = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"expenses")]
        Expenses = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"milageDaily")]
        MilageDaily = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"milageOther")]
        MilageOther = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"unionPayment")]
        UnionPayment = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"foreclosure")]
        Foreclosure = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"advance")]
        Advance = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"foreclosureByPalkkaus")]
        ForeclosureByPalkkaus = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"prepaidExpenses")]
        PrepaidExpenses = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"otherDeductions")]
        OtherDeductions = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"deductibleOfExerciseAndCultureBenefit")]
        DeductibleOfExerciseAndCultureBenefit = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"childCareSubsidy")]
        ChildCareSubsidy = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"chainsawReduction")]
        ChainsawReduction = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"nonProfitOrg")]
        NonProfitOrg = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"subsidisedCommute")]
        SubsidisedCommute = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"irIncomeType")]
        IrIncomeType = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"board")]
        Board = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"remuneration")]
        Remuneration = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"otherCompensation")]
        OtherCompensation = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"workingTimeCompensation")]
        WorkingTimeCompensation = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"employmentTermination")]
        EmploymentTermination = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlySalaryWithWorkingTimeCompensation")]
        HourlySalaryWithWorkingTimeCompensation = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeave")]
        PaidSickLeave = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"training")]
        Training = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"taxAtSource")]
        TaxAtSource = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"taxWithholding")]
        TaxWithholding = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"absencePeriod")]
        AbsencePeriod = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"serviceCharge")]
        ServiceCharge = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"service")]
        Service = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"totals")]
        Totals = 62,

    }

    /// <summary>
    /// CalculationRowUnit enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationRowUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"count")]
        Count = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"days")]
        Days = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"kilometers")]
        Kilometers = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"hours")]
        Hours = 5,

    }

    /// <summary>
    /// CalculationStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentStarted")]
        PaymentStarted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentSucceeded")]
        PaymentSucceeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentCanceled")]
        PaymentCanceled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentError")]
        PaymentError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentWorkerCopy")]
        PaymentWorkerCopy = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"workerRequested")]
        WorkerRequested = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"workerRequestAccepted")]
        WorkerRequestAccepted = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"workerRequestDeclined")]
        WorkerRequestDeclined = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentRefunded")]
        PaymentRefunded = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingApproval")]
        WaitingApproval = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"payrollDraft")]
        PayrollDraft = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"proDraft")]
        ProDraft = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedWaiting")]
        SharedWaiting = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedApproved")]
        SharedApproved = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedRejected")]
        SharedRejected = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"history")]
        History = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"template")]
        Template = 17,

    }

    /// <summary>
    /// CalculationStatusCategory enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"readonly")]
        Readonly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"editable")]
        Editable = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"sent")]
        Sent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"shared")]
        Shared = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"received")]
        Received = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 6,

    }

    /// <summary>
    /// CalendarActionType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalendarActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"display")]
        Display = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"createItem")]
        CreateItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"script")]
        Script = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentDate")]
        PaymentDate = 6,

    }

    /// <summary>
    /// CalendarEventStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalendarEventStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cancelled")]
        Cancelled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"confirmed")]
        Confirmed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"tentative")]
        Tentative = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"needsAction")]
        NeedsAction = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"inProcess")]
        InProcess = 6,

    }

    /// <summary>
    /// CarBenefitCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CarBenefitCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"limitedCarBenefit")]
        LimitedCarBenefit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fullCarBenefit")]
        FullCarBenefit = 1,

    }

    /// <summary>
    /// CompanyType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fiOy")]
        FiOy = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fiTm")]
        FiTm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"fiRy")]
        FiRy = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fiYy")]
        FiYy = 4,

    }

    /// <summary>
    /// ContractPartyType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractPartyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"person")]
        Person = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"customContact")]
        CustomContact = 1,

    }

    /// <summary>
    /// ContactType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContactType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"workerAccount")]
        WorkerAccount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"employerOverride")]
        EmployerOverride = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"foreign")]
        Foreign = 3,

    }

    /// <summary>
    /// CostAccountingDimensionScope enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CostAccountingDimensionScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"calculation")]
        Calculation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"row")]
        Row = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"hidden")]
        Hidden = 3,

    }

    /// <summary>
    /// Country enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ae")]
        Ae = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"at")]
        At = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ba")]
        Ba = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"by")]
        By = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"cn")]
        Cn = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"eg")]
        Eg = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"gg")]
        Gg = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ie")]
        Ie = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"in")]
        In = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"je")]
        Je = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"kr")]
        Kr = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"lk")]
        Lk = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"lv")]
        Lv = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"me")]
        Me = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"mx")]
        Mx = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"no")]
        No = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"pk")]
        Pk = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"rs")]
        Rs = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"sg")]
        Sg = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"th")]
        Th = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"us")]
        Us = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"vg")]
        Vg = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"zm")]
        Zm = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"am")]
        Am = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"au")]
        Au = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"bb")]
        Bb = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"bm")]
        Bm = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"cy")]
        Cy = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"dk")]
        Dk = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"gb")]
        Gb = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"gr")]
        Gr = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"il")]
        Il = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"jp")]
        Jp = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"ky")]
        Ky = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"lt")]
        Lt = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"ma")]
        Ma = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"mk")]
        Mk = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"nz")]
        Nz = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"si")]
        Si = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"tj")]
        Tj = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"tz")]
        Tz = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"uy")]
        Uy = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"vn")]
        Vn = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"br")]
        Br = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"ch")]
        Ch = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"cz")]
        Cz = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"ee")]
        Ee = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"ge")]
        Ge = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"hk")]
        Hk = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"im")]
        Im = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"kg")]
        Kg = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"kz")]
        Kz = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"lu")]
        Lu = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"md")]
        Md = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"mt")]
        Mt = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"ph")]
        Ph = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"se")]
        Se = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"tm")]
        Tm = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"ua")]
        Ua = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"uz")]
        Uz = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"za")]
        Za = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 82,

    }

    /// <summary>
    /// CustomerInvoiceStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"forecast")]
        Forecast = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"preview")]
        Preview = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingPalkkaus")]
        WaitingPalkkaus = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"unread")]
        Unread = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"read")]
        Read = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentStarted")]
        PaymentStarted = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"paid")]
        Paid = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 10,

    }

    /// <summary>
    /// CustomerWebApp enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerWebApp
    {

        [System.Runtime.Serialization.EnumMember(Value = @"palkkaus")]
        Palkkaus = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"customSso")]
        CustomSso = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"customPalkkaus")]
        CustomPalkkaus = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"noCustomerUi")]
        NoCustomerUi = 3,

    }

    /// <summary>
    /// EarningsPaymentReportStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EarningsPaymentReportStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 5,

    }

    /// <summary>
    /// EmploymentRelationSalaryPaymentMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentRelationSalaryPaymentMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"bankAccount")]
        BankAccount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"external")]
        External = 1,

    }

    /// <summary>
    /// EmploymentRelationStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentRelationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"secondaryCurrent")]
        SecondaryCurrent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 3,

    }

    /// <summary>
    /// EmploymentRelationTaxcard enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentRelationTaxcard
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"noTaxCard")]
        NoTaxCard = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"taxAtSource")]
        TaxAtSource = 4,

    }

    /// <summary>
    /// EmploymentRelationType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentRelationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salary")]
        Salary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlySalary")]
        HourlySalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlySalary")]
        MonthlySalary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"boardMember")]
        BoardMember = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneur")]
        Entrepreneur = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"farmer")]
        Farmer = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"employedByStateEmploymentFund")]
        EmployedByStateEmploymentFund = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"athlete")]
        Athlete = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"performingArtist")]
        PerformingArtist = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"foreignWorker")]
        ForeignWorker = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"workingAbroad")]
        WorkingAbroad = 12,

    }

    /// <summary>
    /// ExportMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExportMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fileExcel")]
        FileExcel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fileCsv")]
        FileCsv = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"filePdf")]
        FilePdf = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fileText")]
        FileText = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"copyExcel")]
        CopyExcel = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"copyCsv")]
        CopyCsv = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"copyText")]
        CopyText = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentChannel")]
        PaymentChannel = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"api")]
        Api = 9,

    }

    /// <summary>
    /// DatasetStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DatasetStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"instance")]
        Instance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"template")]
        Template = 2,

    }

    /// <summary>
    /// DatasetType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DatasetType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"reportAdHoc")]
        ReportAdHoc = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"import")]
        Import = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"export")]
        Export = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"batch")]
        Batch = 4,

    }

    /// <summary>
    /// DateOfBirthAccuracy enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DateOfBirthAccuracy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"assumption")]
        Assumption = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ageBased")]
        AgeBased = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ageGroupBased")]
        AgeGroupBased = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"monthCorrect")]
        MonthCorrect = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"exact")]
        Exact = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"verified")]
        Verified = 5,

    }

    /// <summary>
    /// FrameworkAgreement enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FrameworkAgreement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notDefined")]
        NotDefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"construction")]
        Construction = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mll")]
        Mll = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"childCare")]
        ChildCare = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"cleaning")]
        Cleaning = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"santaClaus")]
        SantaClaus = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneur")]
        Entrepreneur = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 7,

    }

    /// <summary>
    /// Gender enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Gender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"male")]
        Male = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"female")]
        Female = 2,

    }

    /// <summary>
    /// HelttiIndustry enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HelttiIndustry
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notDefined")]
        NotDefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"i")]
        I = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"j")]
        J = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"k")]
        K = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"m")]
        M = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"o")]
        O = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"n")]
        N = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"p")]
        P = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"q")]
        Q = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"r")]
        R = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"s")]
        S = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 11,

    }

    /// <summary>
    /// HelttiProductPackage enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HelttiProductPackage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notDefined")]
        NotDefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 3,

    }

    /// <summary>
    /// IncomeEarnerType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IncomeEarnerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"employedByStateEmploymentFund")]
        EmployedByStateEmploymentFund = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jointOwnerWithPayer")]
        JointOwnerWithPayer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"partialOwner")]
        PartialOwner = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"keyEmployee")]
        KeyEmployee = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"leasedEmployeeLivingAbroad")]
        LeasedEmployeeLivingAbroad = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"personWorkingInFrontierDistrict")]
        PersonWorkingInFrontierDistrict = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"personWorkingAbroad")]
        PersonWorkingAbroad = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"athlete")]
        Athlete = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"performingArtist")]
        PerformingArtist = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"restrictedPeriodInFinland")]
        RestrictedPeriodInFinland = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"netOfTaxContract")]
        NetOfTaxContract = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"organization")]
        Organization = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"personWorkingOnAlandFerry")]
        PersonWorkingOnAlandFerry = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneurOrFarmerNoPensionRequired")]
        EntrepreneurOrFarmerNoPensionRequired = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"dimplomaticMission")]
        DimplomaticMission = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"eppo")]
        Eppo = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"lightEntrepreneur")]
        LightEntrepreneur = 16,

    }

    /// <summary>
    /// IncomeLogDiff enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IncomeLogDiff
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"changed")]
        Changed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"removed")]
        Removed = 3,

    }

    /// <summary>
    /// InternationalIdentifier enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InternationalIdentifier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"taxIdentificationNumber")]
        TaxIdentificationNumber = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"foreignPersonalIdentificationNumber")]
        ForeignPersonalIdentificationNumber = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 3,

    }

    /// <summary>
    /// InvoiceStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"forecast")]
        Forecast = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"preview")]
        Preview = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingPalkkaus")]
        WaitingPalkkaus = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"unread")]
        Unread = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"read")]
        Read = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingConfirmation")]
        WaitingConfirmation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentStarted")]
        PaymentStarted = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"paid")]
        Paid = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 11,

    }

    /// <summary>
    /// InvoiceType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvoiceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"net")]
        Net = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tax")]
        Tax = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"taxWithholding")]
        TaxWithholding = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"taxSocialSecurity")]
        TaxSocialSecurity = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"taxAtSource")]
        TaxAtSource = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"unemployment")]
        Unemployment = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"pension")]
        Pension = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"union")]
        Union = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"foreclosure")]
        Foreclosure = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkaus")]
        Palkkaus = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"service")]
        Service = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"gross")]
        Gross = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"verification")]
        Verification = 13,

    }

    /// <summary>
    /// Holiday enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Holiday
    {

        [System.Runtime.Serialization.EnumMember(Value = @"newYearsDay")]
        NewYearsDay = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"epiphany")]
        Epiphany = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"goodFriday")]
        GoodFriday = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"easterSunday")]
        EasterSunday = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"easterSaturday")]
        EasterSaturday = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"easterMonday")]
        EasterMonday = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"mayDay")]
        MayDay = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ascensionDay")]
        AscensionDay = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"pentecost")]
        Pentecost = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"midsummerEve")]
        MidsummerEve = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"midsummerDay")]
        MidsummerDay = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"allSaintsDay")]
        AllSaintsDay = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"independenceDay")]
        IndependenceDay = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"christmasEve")]
        ChristmasEve = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"christmasDay")]
        ChristmasDay = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"stStephensDay")]
        StStephensDay = 15,

    }

    /// <summary>
    /// HolidayAccrualSource enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HolidayAccrualSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"initial")]
        Initial = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"calcDraft")]
        CalcDraft = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"calcPaid")]
        CalcPaid = 3,

    }

    /// <summary>
    /// HolidayBonusPaymentMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HolidayBonusPaymentMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"payForHolidaySalary")]
        PayForHolidaySalary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"paySummerBonus")]
        PaySummerBonus = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"pay24Days")]
        Pay24Days = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"payAllBonus")]
        PayAllBonus = 4,

    }

    /// <summary>
    /// HolidayCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HolidayCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"permanent14Days")]
        Permanent14Days = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"permanent35Hours")]
        Permanent35Hours = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"temporaryTimeOff")]
        TemporaryTimeOff = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayCompensation")]
        HolidayCompensation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayCompensationIncluded")]
        HolidayCompensationIncluded = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"noHolidays")]
        NoHolidays = 6,

    }

    /// <summary>
    /// HolidayGroup enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HolidayGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"official")]
        Official = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"nonBanking")]
        NonBanking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"holiday")]
        Holiday = 2,

    }

    /// <summary>
    /// HouseholdYearProcessingStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HouseholdYearProcessingStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"printed")]
        Printed = 2,

    }

    /// <summary>
    /// HouseholdYearStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HouseholdYearStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"okWithModifications")]
        OkWithModifications = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"willHandleMyself")]
        WillHandleMyself = 3,

    }

    /// <summary>
    /// InsuranceCompany enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InsuranceCompany
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"lähiTapiola")]
        LähiTapiola = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"pohjola")]
        Pohjola = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"if")]
        If = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fennia")]
        Fennia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"aVakuutus")]
        AVakuutus = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"aktia")]
        Aktia = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"pohjantähti")]
        Pohjantähti = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"tryg")]
        Tryg = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ålands")]
        Ålands = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"turva")]
        Turva = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"redarnas")]
        Redarnas = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"folksam")]
        Folksam = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"alandia")]
        Alandia = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 15,

    }

    /// <summary>
    /// InternationalSocialSecurityException enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InternationalSocialSecurityException
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSubjectToEarningsRelatedPensionInsurance")]
        NotSubjectToEarningsRelatedPensionInsurance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"notSubjectToAccidentAndOccupationalDiseaseInsurance")]
        NotSubjectToAccidentAndOccupationalDiseaseInsurance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"notSubjectToUnemploymentInsurance")]
        NotSubjectToUnemploymentInsurance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"notSubjectToHealthInsurance")]
        NotSubjectToHealthInsurance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntaryEarningsRelatedPensionInsurance")]
        VoluntaryEarningsRelatedPensionInsurance = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"noObligationToHealthInsuranceDailyAllowanceContribution")]
        NoObligationToHealthInsuranceDailyAllowanceContribution = 5,

    }

    /// <summary>
    /// InternationalSocialSecurityType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InternationalSocialSecurityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"foreign")]
        Foreign = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mixed")]
        Mixed = 2,

    }

    /// <summary>
    /// InvoiceDateKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvoiceDateKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceDate")]
        InvoiceDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dueDate")]
        DueDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"logicalDate")]
        LogicalDate = 2,

    }

    /// <summary>
    /// InvoicePaymentType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvoicePaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salary")]
        Salary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"salaryInPast")]
        SalaryInPast = 2,

    }

    /// <summary>
    /// IrFlags enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IrFlags
    {

        [System.Runtime.Serialization.EnumMember(Value = @"noMoney")]
        NoMoney = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"oneOff")]
        OneOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unjustEnrichment")]
        UnjustEnrichment = 2,

    }

    /// <summary>
    /// IrInsuranceExceptions enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IrInsuranceExceptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"includeAll")]
        IncludeAll = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"includePension")]
        IncludePension = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"includeHealthInsurance")]
        IncludeHealthInsurance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"includeUnemployment")]
        IncludeUnemployment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"includeAccidentInsurance")]
        IncludeAccidentInsurance = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"excludeAll")]
        ExcludeAll = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"excludePension")]
        ExcludePension = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"excludeHealthInsurance")]
        ExcludeHealthInsurance = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"excludeUnemployment")]
        ExcludeUnemployment = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"excludeAccidentInsurance")]
        ExcludeAccidentInsurance = 9,

    }

    /// <summary>
    /// IrRowSourceType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IrRowSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"usecase")]
        Usecase = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"usecaseV02")]
        UsecaseV02 = 2,

    }

    /// <summary>
    /// Language enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Language
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 3,

    }

    /// <summary>
    /// LegalEntityType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegalEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"person")]
        Person = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"company")]
        Company = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"personCreatedByEmployer")]
        PersonCreatedByEmployer = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"partner")]
        Partner = 4,

    }

    /// <summary>
    /// LocalTapiolaInsuranceOrderAuthorizationType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalTapiolaInsuranceOrderAuthorizationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"procuration")]
        Procuration = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"powerOfAttorney")]
        PowerOfAttorney = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"apparentAuthority")]
        ApparentAuthority = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 3,

    }

    /// <summary>
    /// LocalTapiolaInsuranceOrderStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalTapiolaInsuranceOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingApproval")]
        WaitingApproval = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"checked")]
        Checked = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"sent")]
        Sent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"handled")]
        Handled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 5,

    }

    /// <summary>
    /// LocalTapiolaInsuranceOrderType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalTapiolaInsuranceOrderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"newWorkerInsurance")]
        NewWorkerInsurance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"moveWorkerInsurance")]
        MoveWorkerInsurance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"newEntrepreneurInsurance")]
        NewEntrepreneurInsurance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"moveEntrepreneurInsurance")]
        MoveEntrepreneurInsurance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 4,

    }

    /// <summary>
    /// MessageFrom enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageFrom
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"otherParty")]
        OtherParty = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 3,

    }

    /// <summary>
    /// MessageThreadStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageThreadStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"approved")]
        Approved = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"template")]
        Template = 5,

    }

    /// <summary>
    /// MessageType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 1,

    }

    /// <summary>
    /// OnboardingStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OnboardingStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"cancel")]
        Cancel = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"done")]
        Done = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 5,

    }

    /// <summary>
    /// PayerSummaryReportStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PayerSummaryReportStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"canceled")]
        Canceled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 5,

    }

    /// <summary>
    /// PaymentChannel enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentChannel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"zeroPayment")]
        ZeroPayment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"external")]
        External = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausManual")]
        PalkkausManual = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausWS")]
        PalkkausWS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausPersonal")]
        PalkkausPersonal = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausCfaPaytrail")]
        PalkkausCfaPaytrail = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausCfaReference")]
        PalkkausCfaReference = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausCfaFinvoice")]
        PalkkausCfaFinvoice = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausEcfaPaytrail")]
        PalkkausEcfaPaytrail = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausEcfaReference")]
        PalkkausEcfaReference = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausEcfaFinvoice")]
        PalkkausEcfaFinvoice = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausCfaTest")]
        PalkkausCfaTest = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"accountorGo")]
        AccountorGo = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"talenomOnline")]
        TalenomOnline = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"talenomCfa")]
        TalenomCfa = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"holviCfa")]
        HolviCfa = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"finagoSolo")]
        FinagoSolo = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"procountor")]
        Procountor = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"kevytyrittaja")]
        Kevytyrittaja = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"vismaNetvisor")]
        VismaNetvisor = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"askelma")]
        Askelma = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"briox")]
        Briox = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"lemonaid")]
        Lemonaid = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"laskupiste")]
        Laskupiste = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"holvi")]
        Holvi = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"kompassi")]
        Kompassi = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"domus")]
        Domus = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"passeliMerit")]
        PasseliMerit = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"odoo")]
        Odoo = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"ecom")]
        Ecom = 31,

    }

    /// <summary>
    /// PaymentMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sepa")]
        Sepa = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"siirto")]
        Siirto = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 3,

    }

    /// <summary>
    /// PaymentStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sentToBank")]
        SentToBank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"bankTechApproval")]
        BankTechApproval = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"bankDelivered")]
        BankDelivered = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"bankPartialError")]
        BankPartialError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"bankError")]
        BankError = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"paid")]
        Paid = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"cancelled")]
        Cancelled = 8,

    }

    /// <summary>
    /// PayrollStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PayrollStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentStarted")]
        PaymentStarted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentSucceeded")]
        PaymentSucceeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentCanceled")]
        PaymentCanceled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentError")]
        PaymentError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingApproval")]
        WaitingApproval = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"handled")]
        Handled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"template")]
        Template = 7,

    }

    /// <summary>
    /// PensionCalculation enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PensionCalculation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"employee")]
        Employee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneur")]
        Entrepreneur = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"farmer")]
        Farmer = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"partialOwner")]
        PartialOwner = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"athlete")]
        Athlete = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"boardRemuneration")]
        BoardRemuneration = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"smallEntrepreneur")]
        SmallEntrepreneur = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"smallFarmer")]
        SmallFarmer = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"publicSector")]
        PublicSector = 10,

    }

    /// <summary>
    /// PensionCompany enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PensionCompany
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"etera")]
        Etera = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ilmarinen")]
        Ilmarinen = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"elo")]
        Elo = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"pensionsAlandia")]
        PensionsAlandia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"varma")]
        Varma = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"veritas")]
        Veritas = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"apteekkien")]
        Apteekkien = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"verso")]
        Verso = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaMunicipal")]
        KevaMunicipal = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaAland")]
        KevaAland = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaChurch")]
        KevaChurch = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaKela")]
        KevaKela = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaState")]
        KevaState = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"valio")]
        Valio = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 15,

    }

    /// <summary>
    /// PensionRule enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PensionRule
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyLowerLimit")]
        MonthlyLowerLimit = 1,

    }

    /// <summary>
    /// PeriodDateKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodDateKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"paidAtDate")]
        PaidAtDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salaryDate")]
        SalaryDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"workDate")]
        WorkDate = 2,

    }

    /// <summary>
    /// PeriodType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"month")]
        Month = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quarter")]
        Quarter = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"year")]
        Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 3,

    }

    /// <summary>
    /// PricingModel enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricingModel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausFee")]
        PalkkausFee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noFee")]
        NoFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fixedFee")]
        FixedFee = 2,

    }

    /// <summary>
    /// ProductPackage enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductPackage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"partnerBasic")]
        PartnerBasic = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"partnerPro")]
        PartnerPro = 2,

    }

    /// <summary>
    /// ProductListFilter enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductListFilter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 1,

    }

    /// <summary>
    /// RecurringEventCreateMode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RecurringEventCreateMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"createRecurrence")]
        CreateRecurrence = 1,

    }

    /// <summary>
    /// ReportCategory enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReportCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"monthly")]
        Monthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"yearly")]
        Yearly = 2,

    }

    /// <summary>
    /// ReportType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReportType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"example")]
        Example = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyDetails")]
        MonthlyDetails = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"taxMonthly4001")]
        TaxMonthly4001 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"payerSummaryReport")]
        PayerSummaryReport = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyPension")]
        MonthlyPension = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyLiikekirjuri")]
        MonthlyLiikekirjuri = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyLiikekirjuriLegacy")]
        MonthlyLiikekirjuriLegacy = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyRapko")]
        MonthlyRapko = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyAccounting")]
        MonthlyAccounting = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyAccountingExcel")]
        MonthlyAccountingExcel = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"yearlyDetails")]
        YearlyDetails = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"yearEndReport")]
        YearEndReport = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"yearlyWorkerSummary")]
        YearlyWorkerSummary = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"taxYearly7801")]
        TaxYearly7801 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"unemployment")]
        Unemployment = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"insurance")]
        Insurance = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"householdDeduction")]
        HouseholdDeduction = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"taxHouseholdDeduction14B")]
        TaxHouseholdDeduction14B = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"taxHouseholdDeduction14BSpouseA")]
        TaxHouseholdDeduction14BSpouseA = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"taxHouseholdDeduction14BSpouseB")]
        TaxHouseholdDeduction14BSpouseB = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"salarySlip")]
        SalarySlip = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"salarySlipPaid")]
        SalarySlipPaid = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"salarySlipCopy")]
        SalarySlipCopy = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"eSalarySpecification")]
        ESalarySpecification = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"employerReport")]
        EmployerReport = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentReport")]
        PaymentReport = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentSummaryReport")]
        PaymentSummaryReport = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"totalsReport")]
        TotalsReport = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"earningsPaymentReport")]
        EarningsPaymentReport = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"accountingReport")]
        AccountingReport = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
        Invoice = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"employmentContract")]
        EmploymentContract = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"authorization")]
        Authorization = 33,

    }

    /// <summary>
    /// Role enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Role
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"accountant")]
        Accountant = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trustedPartner")]
        TrustedPartner = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"accountantCandidate")]
        AccountantCandidate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"pricingPartner")]
        PricingPartner = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"sepaPartner")]
        SepaPartner = 5,

    }

    /// <summary>
    /// SalaryDateKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalaryDateKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"inPast")]
        InPast = 1,

    }

    /// <summary>
    /// SalaryKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalaryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixedSalary")]
        FixedSalary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlySalary")]
        HourlySalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlySalary")]
        MonthlySalary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerPayment")]
        TotalWorkerPayment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"totalEmployerPayment")]
        TotalEmployerPayment = 6,

    }

    /// <summary>
    /// SalaryType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalaryType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"tyel")]
        Tyel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"yel")]
        Yel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 2,

    }

    /// <summary>
    /// LegacyServiceModel enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegacyServiceModel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"shared")]
        Shared = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"partnerOnly")]
        PartnerOnly = 1,

    }

    /// <summary>
    /// SettingsStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SettingsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"checked")]
        Checked = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 2,

    }

    /// <summary>
    /// SharingUriType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SharingUriType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"url")]
        Url = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"employer")]
        Employer = 2,

    }

    /// <summary>
    /// TaxcardApiIncomeType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxcardApiIncomeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salary")]
        Salary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dividendsForWorkAsSalary")]
        DividendsForWorkAsSalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"personnelFundIncome")]
        PersonnelFundIncome = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"salaryOneOff")]
        SalaryOneOff = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForUseEarnedIncome")]
        CompensationForUseEarnedIncome = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForUseCapitalIncome")]
        CompensationForUseCapitalIncome = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationVatResponsible")]
        CompensationVatResponsible = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"dividendsForWorkAsCompensation")]
        DividendsForWorkAsCompensation = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"athletePay")]
        AthletePay = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"otherTaxableIncome")]
        OtherTaxableIncome = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"otherTaxableIncomeOneOff")]
        OtherTaxableIncomeOneOff = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeStockOption")]
        EmployeeStockOption = 13,

    }

    /// <summary>
    /// TaxcardApprovalMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxcardApprovalMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"assureWaiting")]
        AssureWaiting = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"approve")]
        Approve = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"reject")]
        Reject = 2,

    }

    /// <summary>
    /// TaxcardCalcDiffCheck enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxcardCalcDiffCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"getDiff")]
        GetDiff = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noCheck")]
        NoCheck = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"commitDiff")]
        CommitDiff = 2,

    }

    /// <summary>
    /// TaxCardIncomeType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxCardIncomeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salaxyCalculation")]
        SalaxyCalculation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"previousEmployerSalaries")]
        PreviousEmployerSalaries = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"externalSalaries")]
        ExternalSalaries = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedCardExtSum")]
        SharedCardExtSum = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"diff")]
        Diff = 5,

    }

    /// <summary>
    /// TaxcardState enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxcardState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"approved")]
        Approved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"employerAdded")]
        EmployerAdded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"verifiedVero")]
        VerifiedVero = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedWaiting")]
        SharedWaiting = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedApproved")]
        SharedApproved = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedRejected")]
        SharedRejected = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedRejectedWithoutOpen")]
        SharedRejectedWithoutOpen = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"shared")]
        Shared = 8,

    }

    /// <summary>
    /// TaxcardKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxcardKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noTaxCard")]
        NoTaxCard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"defaultYearly")]
        DefaultYearly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"replacement")]
        Replacement = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"noWithholdingHousehold")]
        NoWithholdingHousehold = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"others")]
        Others = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 7,

    }

    /// <summary>
    /// TaxcardValidity enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxcardValidity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"validJanuary")]
        ValidJanuary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"future")]
        Future = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 4,

    }

    /// <summary>
    /// TaxAtSourceKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxAtSourceKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noDeduction")]
        NoDeduction = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyDeduction")]
        MonthlyDeduction = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dailyDeduction")]
        DailyDeduction = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fixedValues")]
        FixedValues = 4,

    }

    /// <summary>
    /// TaxDeductionWorkCategories enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxDeductionWorkCategories
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"householdwork")]
        Householdwork = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"carework")]
        Carework = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"homeImprovement")]
        HomeImprovement = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ownPropety")]
        OwnPropety = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"relativesProperty")]
        RelativesProperty = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"oilHeatingReplacementWork")]
        OilHeatingReplacementWork = 6,

    }

    /// <summary>
    /// TaxReportHandling enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxReportHandling
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noZeroSalaryReport")]
        NoZeroSalaryReport = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"noMonthlyReport")]
        NoMonthlyReport = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"always")]
        Always = 3,

    }

    /// <summary>
    /// TaxWithholdingKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxWithholdingKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"percentage")]
        Percentage = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fixedValue")]
        FixedValue = 2,

    }

    /// <summary>
    /// TesSubtype enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TesSubtype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelected")]
        NotSelected = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"constructionCarpenter")]
        ConstructionCarpenter = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"constructionFloor")]
        ConstructionFloor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"constructionOther")]
        ConstructionOther = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"constructionFreeContract")]
        ConstructionFreeContract = 4,

    }

    /// <summary>
    /// TestEnum enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TestEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valueZero")]
        ValueZero = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"valueOne")]
        ValueOne = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"valueTwo")]
        ValueTwo = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"valueThree")]
        ValueThree = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"valueFour")]
        ValueFour = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"valueFive")]
        ValueFive = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"valueSix")]
        ValueSix = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"valueSeven")]
        ValueSeven = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"valueEight")]
        ValueEight = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"valueNine")]
        ValueNine = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"valueTen")]
        ValueTen = 10,

    }

    /// <summary>
    /// ThreadedMessageType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ThreadedMessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"text")]
        Text = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blobFile")]
        BlobFile = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"calculation")]
        Calculation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"payroll")]
        Payroll = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"workerAccount")]
        WorkerAccount = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"salaxyEmail")]
        SalaxyEmail = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"salaxySms")]
        SalaxySms = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"timer")]
        Timer = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"timerEdited")]
        TimerEdited = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlyReport")]
        HourlyReport = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"timeReport")]
        TimeReport = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"absence")]
        Absence = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"annualLeave")]
        AnnualLeave = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"calcRow")]
        CalcRow = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"travel")]
        Travel = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"expense")]
        Expense = 17,

    }

    /// <summary>
    /// UnemploymentPayrollLimitStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnemploymentPayrollLimitStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"higher")]
        Higher = 1,

    }

    /// <summary>
    /// UnionPaymentType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnionPaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelected")]
        NotSelected = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"raksaNormal")]
        RaksaNormal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"raksaUnemploymentOnly")]
        RaksaUnemploymentOnly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 3,

    }

    /// <summary>
    /// Unit enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hours")]
        Hours = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"days")]
        Days = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"weeks")]
        Weeks = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"period")]
        Period = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"one")]
        One = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"count")]
        Count = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"kilometers")]
        Kilometers = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"euro")]
        Euro = 9,

    }

    /// <summary>
    /// UsecaseActionType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsecaseActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"clientScript")]
        ClientScript = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"clientScriptAsync")]
        ClientScriptAsync = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"serverScript")]
        ServerScript = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"serverScriptAsync")]
        ServerScriptAsync = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"webServiceCall")]
        WebServiceCall = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"powerAutomateFlow")]
        PowerAutomateFlow = 5,

    }

    /// <summary>
    /// UsecaseStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsecaseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"inactive")]
        Inactive = 3,

    }

    /// <summary>
    /// VarmaPensionOrderAction enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VarmaPensionOrderAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"newYel")]
        NewYel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"newTyel")]
        NewTyel = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"move")]
        Move = 3,

    }

    /// <summary>
    /// VarmaPensionOrderYelPayer enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VarmaPensionOrderYelPayer
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneur")]
        Entrepreneur = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"company")]
        Company = 2,

    }

    /// <summary>
    /// VatRate enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VatRate
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"vat0000")]
        Vat0000 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"vat1000")]
        Vat1000 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"vat1400")]
        Vat1400 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"vat2400")]
        Vat2400 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"vat2550")]
        Vat2550 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 7,

    }

    /// <summary>
    /// WageBasis enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WageBasis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"monthly")]
        Monthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hourly")]
        Hourly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"performanceBased")]
        PerformanceBased = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 4,

    }

    /// <summary>
    /// WebSiteUserRole enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WebSiteUserRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"household")]
        Household = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"worker")]
        Worker = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"company")]
        Company = 3,

    }

    /// <summary>
    /// WorkerSalaryNotification enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkerSalaryNotification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"always")]
        Always = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"silent")]
        Silent = 1,

    }

    /// <summary>
    /// WorkerSalarySlipDeliveryMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkerSalarySlipDeliveryMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"payslip")]
        Payslip = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"omapalkka")]
        Omapalkka = 2,

    }

    /// <summary>
    /// WorkflowEventFeatures enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkflowEventFeatures
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"isActive")]
        IsActive = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"isEditable")]
        IsEditable = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"isRemovable")]
        IsRemovable = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"isOnHold")]
        IsOnHold = 4,

    }

    /// <summary>
    /// YearEndAdminCheck enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum YearEndAdminCheck
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notChecked")]
        NotChecked = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"okWithWarning")]
        OkWithWarning = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"errors")]
        Errors = 3,

    }

    /// <summary>
    /// YearEndFeedbackCalculationType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum YearEndFeedbackCalculationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salaxyPayment")]
        SalaxyPayment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"external")]
        External = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"correction")]
        Correction = 3,

    }

    /// <summary>
    /// YearEndUserFeedback enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum YearEndUserFeedback
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notChecked")]
        NotChecked = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"okWithModifications")]
        OkWithModifications = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"willHandleMyself")]
        WillHandleMyself = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"noYearlyReports")]
        NoYearlyReports = 4,

    }

    /// <summary>
    /// YtjCompanyType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum YtjCompanyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"noCompanyType")]
        NoCompanyType = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"housingCooperative")]
        HousingCooperative = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"condominium")]
        Condominium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"asoAssociation")]
        AsoAssociation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"openCompany")]
        OpenCompany = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"association")]
        Association = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"hypoAssociation")]
        HypoAssociation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"mutualRealEstateCompany")]
        MutualRealEstateCompany = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ky")]
        Ky = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"osuuskunta")]
        Osuuskunta = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"cooperativeBank")]
        CooperativeBank = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"oy")]
        Oy = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"publicLimitedCompany")]
        PublicLimitedCompany = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"foundation")]
        Foundation = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"branch")]
        Branch = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"savingsBank")]
        SavingsBank = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"financialAssociation")]
        FinancialAssociation = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"stateEstablishment")]
        StateEstablishment = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"insuranceAssociation")]
        InsuranceAssociation = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"privateEntrepreneur")]
        PrivateEntrepreneur = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"otherAssociation")]
        OtherAssociation = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"specialPurposeAssociation")]
        SpecialPurposeAssociation = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"forestCareAssociation")]
        ForestCareAssociation = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"otherFinancialAssociation")]
        OtherFinancialAssociation = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"religiousCommunity")]
        ReligiousCommunity = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"jointInterestGroups")]
        JointInterestGroups = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"taxableGrouping")]
        TaxableGrouping = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"deathEstate")]
        DeathEstate = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"mutualInsuranceAssociation")]
        MutualInsuranceAssociation = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"foreignOrganisation")]
        ForeignOrganisation = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"municipalEstablishment")]
        MunicipalEstablishment = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"federationOfMunicipalitiesEstablishment")]
        FederationOfMunicipalitiesEstablishment = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"alandFederation")]
        AlandFederation = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"europeanCooperative")]
        EuropeanCooperative = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"europeanCooperativeBank")]
        EuropeanCooperativeBank = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"reindeerHerdingCooperative")]
        ReindeerHerdingCooperative = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 36,

    }

    /// <summary>
    /// CarBenefitKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CarBenefitKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"limitedCarBenefit")]
        LimitedCarBenefit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fullCarBenefit")]
        FullCarBenefit = 2,

    }

    /// <summary>
    /// BicycleBenefitKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BicycleBenefitKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noDeduction")]
        NoDeduction = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"singleDeduction")]
        SingleDeduction = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"periodicalDeduction")]
        PeriodicalDeduction = 3,

    }

    /// <summary>
    /// UnionPaymentKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnionPaymentKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"percentage")]
        Percentage = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"percentageAndLimits")]
        PercentageAndLimits = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"raksaNormal")]
        RaksaNormal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"raksaUnemploymentOnly")]
        RaksaUnemploymentOnly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 6,

    }

    /// <summary>
    /// NonProfitOrgKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NonProfitOrgKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"kilometreAllowance")]
        KilometreAllowance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dailyAllowance")]
        DailyAllowance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"accomodationAllowance")]
        AccomodationAllowance = 3,

    }

    /// <summary>
    /// SubsidisedCommuteKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubsidisedCommuteKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noDeduction")]
        NoDeduction = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"singleDeduction")]
        SingleDeduction = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"periodicalDeduction")]
        PeriodicalDeduction = 3,

    }

    /// <summary>
    /// MealBenefitKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MealBenefitKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cateringContract")]
        CateringContract = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mealTicket")]
        MealTicket = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"taxableAmount")]
        TaxableAmount = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"mealAllowance")]
        MealAllowance = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"institute")]
        Institute = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"teacher")]
        Teacher = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"restaurantWorker")]
        RestaurantWorker = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"collectedReimbursement")]
        CollectedReimbursement = 8,

    }

    /// <summary>
    /// DailyAllowanceKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DailyAllowanceKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fullDailyAllowance")]
        FullDailyAllowance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"partialDailyAllowance")]
        PartialDailyAllowance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internationalDailyAllowance")]
        InternationalDailyAllowance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"mealAllowance")]
        MealAllowance = 4,

    }

    /// <summary>
    /// BoardKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BoardKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

    }

    /// <summary>
    /// RemunerationKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RemunerationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"initiativeFee")]
        InitiativeFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"bonusPay")]
        BonusPay = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"commission")]
        Commission = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"performanceBonus")]
        PerformanceBonus = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"shareIssueForEmployees")]
        ShareIssueForEmployees = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"profitSharingBonus")]
        ProfitSharingBonus = 6,

    }

    /// <summary>
    /// OtherCompensationKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherCompensationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"meetingFee")]
        MeetingFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lectureFee")]
        LectureFee = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"positionOfTrustCompensation")]
        PositionOfTrustCompensation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"accruedTimeOffCompensation")]
        AccruedTimeOffCompensation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"membershipOfGoverningBodyCompensation")]
        MembershipOfGoverningBodyCompensation = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"monetaryGiftForEmployees")]
        MonetaryGiftForEmployees = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"useCompensationAsEarnedIncome")]
        UseCompensationAsEarnedIncome = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"useCompensationAsCapitalIncome")]
        UseCompensationAsCapitalIncome = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"otherTaxableIncomeAsEarnedIncome")]
        OtherTaxableIncomeAsEarnedIncome = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"stockOptionsAndGrants")]
        StockOptionsAndGrants = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeInventionCompensation")]
        EmployeeInventionCompensation = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"capitalIncomePayment")]
        CapitalIncomePayment = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"workEffortBasedDividendsAsWage")]
        WorkEffortBasedDividendsAsWage = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"workEffortBasedDividendsAsNonWage")]
        WorkEffortBasedDividendsAsNonWage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeStockOption")]
        EmployeeStockOption = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeStockOptionWithLowerPrice")]
        EmployeeStockOptionWithLowerPrice = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"copyrightRoyaltiesEarnedIncome")]
        CopyrightRoyaltiesEarnedIncome = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"stockGrantPaidInMoney")]
        StockGrantPaidInMoney = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeStockOptionPaidInMoney")]
        EmployeeStockOptionPaidInMoney = 19,

    }

    /// <summary>
    /// PaidSickLeaveKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaidSickLeaveKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveSalary")]
        PaidSickLeaveSalary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveHourlySalary")]
        PaidSickLeaveHourlySalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveMonthlySalary")]
        PaidSickLeaveMonthlySalary = 3,

    }

    /// <summary>
    /// WorkingTimeCompensationKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkingTimeCompensationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"emergencyWorkCompensation")]
        EmergencyWorkCompensation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"eveningWorkCompensation")]
        EveningWorkCompensation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"eveningShiftAllowance")]
        EveningShiftAllowance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"saturdayPay")]
        SaturdayPay = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"extraWorkPremium")]
        ExtraWorkPremium = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"otherCompensation")]
        OtherCompensation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingTimeCompensation")]
        WaitingTimeCompensation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"sundayWorkCompensation")]
        SundayWorkCompensation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"standByCompensation")]
        StandByCompensation = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"weeklyRestCompensation")]
        WeeklyRestCompensation = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"overtimeCompensation")]
        OvertimeCompensation = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"nightWorkAllowance")]
        NightWorkAllowance = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"nightShiftCompensation")]
        NightShiftCompensation = 13,

    }

    /// <summary>
    /// EmploymentTerminationKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentTerminationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noticePeriodCompensation")]
        NoticePeriodCompensation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monetaryWorkingTimeBankCompensation")]
        MonetaryWorkingTimeBankCompensation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"terminationAndLayOffDamages")]
        TerminationAndLayOffDamages = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntaryTerminationCompensation")]
        VoluntaryTerminationCompensation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"pensionPaidByEmployer")]
        PensionPaidByEmployer = 5,

    }

    /// <summary>
    /// ForeclosureKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ForeclosureKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"periodic")]
        Periodic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"nonPeriodic")]
        NonPeriodic = 3,

    }

    /// <summary>
    /// TotalWorkerPaymentKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TotalWorkerPaymentKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerPayment")]
        TotalWorkerPayment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerWorkerPaymentExcludingExpenses")]
        TotalWorkerWorkerPaymentExcludingExpenses = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerPaymentAndTax")]
        TotalWorkerPaymentAndTax = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerWorkerPaymentAndTaxExcludingExpenses")]
        TotalWorkerWorkerPaymentAndTaxExcludingExpenses = 4,

    }

    /// <summary>
    /// TransactionCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ignored")]
        Ignored = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"timeRatePay")]
        TimeRatePay = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"initiativeFee")]
        InitiativeFee = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"bonusPay")]
        BonusPay = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"complementaryWagePaidDuringBenefitPeriod")]
        ComplementaryWagePaidDuringBenefitPeriod = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"emergencyWorkCompensation")]
        EmergencyWorkCompensation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"eveningWorkCompensation")]
        EveningWorkCompensation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"eveningShiftAllowance")]
        EveningShiftAllowance = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"noticePeriodCompensation")]
        NoticePeriodCompensation = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"kilometreAllowanceTaxable")]
        KilometreAllowanceTaxable = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"meetingFee")]
        MeetingFee = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"saturdayPay")]
        SaturdayPay = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"extraWorkPremium")]
        ExtraWorkPremium = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayBonus")]
        HolidayBonus = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"lectureFee")]
        LectureFee = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForTrustPosition")]
        CompensationForTrustPosition = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"otherCompensation")]
        OtherCompensation = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingTimeCompensation")]
        WaitingTimeCompensation = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"workingConditionCompensation")]
        WorkingConditionCompensation = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"partialPayDuringSickLeave")]
        PartialPayDuringSickLeave = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"commission")]
        Commission = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"sundayWorkCompensation")]
        SundayWorkCompensation = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"benefitArisingFromSyntheticOption")]
        BenefitArisingFromSyntheticOption = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"performanceBonus")]
        PerformanceBonus = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"monetaryCompensationFromWorkingTimeBank")]
        MonetaryCompensationFromWorkingTimeBank = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForAccruedTimeOff")]
        CompensationForAccruedTimeOff = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"shareIssueForEmployees")]
        ShareIssueForEmployees = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"contractPay")]
        ContractPay = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"damagesInConjunctionWithTermination")]
        DamagesInConjunctionWithTermination = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"standByCompensation")]
        StandByCompensation = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntaryCompensationInConjunctionWithTermination")]
        VoluntaryCompensationInConjunctionWithTermination = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"weeklyRestCompensation")]
        WeeklyRestCompensation = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"profitSharingBonus")]
        ProfitSharingBonus = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"annualHolidayCompensation")]
        AnnualHolidayCompensation = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"overtimeCompensation")]
        OvertimeCompensation = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"nightWorkAllowance")]
        NightWorkAllowance = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"nightShiftCompensation")]
        NightShiftCompensation = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"otherRegularCompensation")]
        OtherRegularCompensation = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForUnusedCompensatoryLeave")]
        CompensationForUnusedCompensatoryLeave = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"accommodationBenefit")]
        AccommodationBenefit = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"interestBenefitForHousingLoan")]
        InterestBenefitForHousingLoan = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"mealAllowance")]
        MealAllowance = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"carBenefit")]
        CarBenefit = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForGoverningBodyMembership")]
        CompensationForGoverningBodyMembership = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"shareOfReserveDrawnFromPersonnelFund")]
        ShareOfReserveDrawnFromPersonnelFund = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"monetaryGiftForEmployees")]
        MonetaryGiftForEmployees = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"kilometreAllowanceTaxExempt")]
        KilometreAllowanceTaxExempt = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"treatmentFeeForMunicipalVeterinarian")]
        TreatmentFeeForMunicipalVeterinarian = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForUseEarnedIncome")]
        CompensationForUseEarnedIncome = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForUseCapitalIncome")]
        CompensationForUseCapitalIncome = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"otherTaxableBenefitForEmployees")]
        OtherTaxableBenefitForEmployees = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"otherTaxableIncomeDeemedEarnedIncome")]
        OtherTaxableIncomeDeemedEarnedIncome = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"otherFringeBenefit")]
        OtherFringeBenefit = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"kinshipCarersFee")]
        KinshipCarersFee = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"stockOptions")]
        StockOptions = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesPaidBySubstitutePayerIncludingSocialInsurance")]
        WagesPaidBySubstitutePayerIncludingSocialInsurance = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesPaidBySubstitutePayerIncludingEarningsRelatedPensionInsurance")]
        WagesPaidBySubstitutePayerIncludingEarningsRelatedPensionInsurance = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesPaidBySubstitutePayerIncludingUnemploymentInsurance")]
        WagesPaidBySubstitutePayerIncludingUnemploymentInsurance = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesPaidBySubstitutePayerIncludingAccidentAndOccupationalDiseaseInsurance")]
        WagesPaidBySubstitutePayerIncludingAccidentAndOccupationalDiseaseInsurance = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesPaidBySubstitutePayerIncludingHealthInsurance")]
        WagesPaidBySubstitutePayerIncludingHealthInsurance = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForEmployeeInvention")]
        CompensationForEmployeeInvention = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"reimbursementOfPrivateCaretakersExpenses")]
        ReimbursementOfPrivateCaretakersExpenses = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"privateCaretakersFee")]
        PrivateCaretakersFee = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"reimbursementOfFamilyDayCareProvidersExpenses")]
        ReimbursementOfFamilyDayCareProvidersExpenses = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"telephoneBenefit")]
        TelephoneBenefit = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"dailyAllowance")]
        DailyAllowance = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"capitalIncomePayment")]
        CapitalIncomePayment = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"mealBenefit")]
        MealBenefit = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"reimbursementOfCostsPaidToConciliator")]
        ReimbursementOfCostsPaidToConciliator = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"nonWageCompensationForWork")]
        NonWageCompensationForWork = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"supplementaryDailyAllowancePaidByEmployerSpecificHealthInsuranceFund")]
        SupplementaryDailyAllowancePaidByEmployerSpecificHealthInsuranceFund = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"pensionPaidByEmployer")]
        PensionPaidByEmployer = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"dividendsBasedOnWages")]
        DividendsBasedOnWages = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"dividendsBasedOnNonWage")]
        DividendsBasedOnNonWage = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"employerSubsidisedCommuterTicketTaxExempt")]
        EmployerSubsidisedCommuterTicketTaxExempt = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"employerSubsidisedCommuterTicketTaxable")]
        EmployerSubsidisedCommuterTicketTaxable = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeStockOption")]
        EmployeeStockOption = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesTransferredToAthletesSpecialFund")]
        WagesTransferredToAthletesSpecialFund = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesPaidFromAthletesSpecialFund")]
        WagesPaidFromAthletesSpecialFund = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesForInsurancePurposes")]
        WagesForInsurancePurposes = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"taxableReimbursementOfExpenses")]
        TaxableReimbursementOfExpenses = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"privateDayCareAllowanceMunicipalSupplement")]
        PrivateDayCareAllowanceMunicipalSupplement = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"privateDayCareAllowanceWages")]
        PrivateDayCareAllowanceWages = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"privateDayCareAllowanceNonWage")]
        PrivateDayCareAllowanceNonWage = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"kilometreAllowancePaidByNonProfitOrganisation")]
        KilometreAllowancePaidByNonProfitOrganisation = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"dailyAllowancePaidByNonProfitOrganisation")]
        DailyAllowancePaidByNonProfitOrganisation = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"unjustEnrichment")]
        UnjustEnrichment = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeStockOptionLowerMarketPrice")]
        EmployeeStockOptionLowerMarketPrice = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"royaltyPaidToNonResidentTaxpayer")]
        RoyaltyPaidToNonResidentTaxpayer = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"bicycleBenefitTaxExempt")]
        BicycleBenefitTaxExempt = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"bicycleBenefitTaxable")]
        BicycleBenefitTaxable = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"conditionalStockOptions")]
        ConditionalStockOptions = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"copyrightRoyaltiesEarnedIncome")]
        CopyrightRoyaltiesEarnedIncome = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"stockGrantPaidInMoney")]
        StockGrantPaidInMoney = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeStockOptionPaidInMoney")]
        EmployeeStockOptionPaidInMoney = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"earningsFromJuELEmployerToLightEntrepreneur")]
        EarningsFromJuELEmployerToLightEntrepreneur = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationCollectedForCarBenefit")]
        CompensationCollectedForCarBenefit = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"withholdingTax")]
        WithholdingTax = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"electedOfficialFee")]
        ElectedOfficialFee = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"taxAtSource")]
        TaxAtSource = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"taxAtSourceDeduction")]
        TaxAtSourceDeduction = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"wagesPaid")]
        WagesPaid = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"reimbursementCollectedForOtherFringeBenefits")]
        ReimbursementCollectedForOtherFringeBenefits = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"otherItemDeductibleFromNetWage")]
        OtherItemDeductibleFromNetWage = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"netWage")]
        NetWage = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"employerPaidPremiumForCollectiveAdditionalPensionInsurance")]
        EmployerPaidPremiumForCollectiveAdditionalPensionInsurance = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"employerPaidPremiumForCollectiveAdditionalPensionInsuranceEmployeesContribution")]
        EmployerPaidPremiumForCollectiveAdditionalPensionInsuranceEmployeesContribution = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"employeesHealthInsuranceContribution")]
        EmployeesHealthInsuranceContribution = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"employeesPensionInsuranceContribution")]
        EmployeesPensionInsuranceContribution = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"employeesUnemploymentInsuranceContribution")]
        EmployeesUnemploymentInsuranceContribution = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"reimbursementForEmployerSubsidisedCommuterTicket")]
        ReimbursementForEmployerSubsidisedCommuterTicket = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"taxPaidAbroad")]
        TaxPaidAbroad = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"distraint")]
        Distraint = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntaryIndividualPensionInsurancePremium")]
        VoluntaryIndividualPensionInsurancePremium = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"deductionBeforeWithholding")]
        DeductionBeforeWithholding = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"reimbursementCollectedForBicycleBenefit")]
        ReimbursementCollectedForBicycleBenefit = 116,

    }

    /// <summary>
    /// TrainingKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrainingKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingSalary")]
        TrainingSalary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingHourlySalary")]
        TrainingHourlySalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingMonthlySalary")]
        TrainingMonthlySalary = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Holidays
    {
        [Newtonsoft.Json.JsonProperty("newYearsDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate NewYearsDay { get; set; }

        [Newtonsoft.Json.JsonProperty("epiphany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate Epiphany { get; set; }

        [Newtonsoft.Json.JsonProperty("goodFriday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate GoodFriday { get; set; }

        [Newtonsoft.Json.JsonProperty("easterSunday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate EasterSunday { get; set; }

        [Newtonsoft.Json.JsonProperty("easterSaturday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate EasterSaturday { get; set; }

        [Newtonsoft.Json.JsonProperty("easterMonday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate EasterMonday { get; set; }

        [Newtonsoft.Json.JsonProperty("mayDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate MayDay { get; set; }

        [Newtonsoft.Json.JsonProperty("ascensionDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate AscensionDay { get; set; }

        [Newtonsoft.Json.JsonProperty("pentecost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate Pentecost { get; set; }

        [Newtonsoft.Json.JsonProperty("midsummerEve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate MidsummerEve { get; set; }

        [Newtonsoft.Json.JsonProperty("midsummerDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate MidsummerDay { get; set; }

        [Newtonsoft.Json.JsonProperty("allSaintsDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate AllSaintsDay { get; set; }

        [Newtonsoft.Json.JsonProperty("independenceDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate IndependenceDay { get; set; }

        [Newtonsoft.Json.JsonProperty("christmasEve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate ChristmasEve { get; set; }

        [Newtonsoft.Json.JsonProperty("christmasDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate ChristmasDay { get; set; }

        [Newtonsoft.Json.JsonProperty("stStephensDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate StStephensDay { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Holidays2
    {
        [Newtonsoft.Json.JsonProperty("newYearsDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate NewYearsDay { get; set; }

        [Newtonsoft.Json.JsonProperty("epiphany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate Epiphany { get; set; }

        [Newtonsoft.Json.JsonProperty("goodFriday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate GoodFriday { get; set; }

        [Newtonsoft.Json.JsonProperty("easterSunday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate EasterSunday { get; set; }

        [Newtonsoft.Json.JsonProperty("easterSaturday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate EasterSaturday { get; set; }

        [Newtonsoft.Json.JsonProperty("easterMonday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate EasterMonday { get; set; }

        [Newtonsoft.Json.JsonProperty("mayDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate MayDay { get; set; }

        [Newtonsoft.Json.JsonProperty("ascensionDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate AscensionDay { get; set; }

        [Newtonsoft.Json.JsonProperty("pentecost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate Pentecost { get; set; }

        [Newtonsoft.Json.JsonProperty("midsummerEve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate MidsummerEve { get; set; }

        [Newtonsoft.Json.JsonProperty("midsummerDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate MidsummerDay { get; set; }

        [Newtonsoft.Json.JsonProperty("allSaintsDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate AllSaintsDay { get; set; }

        [Newtonsoft.Json.JsonProperty("independenceDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate IndependenceDay { get; set; }

        [Newtonsoft.Json.JsonProperty("christmasEve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate ChristmasEve { get; set; }

        [Newtonsoft.Json.JsonProperty("christmasDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate ChristmasDay { get; set; }

        [Newtonsoft.Json.JsonProperty("stStephensDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayDate StStephensDay { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserInfoApplicationRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noAccess")]
        NoAccess = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"readOnly")]
        ReadOnly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"readWrite")]
        ReadWrite = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625