//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Salaxy.Client.Import
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "/";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Updates payroll data based on changing periods
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayrollDetails> UpdatePayrollAsync(PayrollDetails body)
        {
            return UpdatePayrollAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates payroll data based on changing periods
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayrollDetails> UpdatePayrollAsync(PayrollDetails body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/update-payroll"
                    urlBuilder_.Append("api/v01/worktime/update-payroll");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayrollDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Commits all the data in the employment realtion specific worktime objects (in staging area) to the payroll system.
        /// </remarks>
        /// <param name="id">Identifier for the payroll object to commit.</param>
        /// <param name="body">Oprtional properties managing the commit process.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CommitPayrollAsync(string id, Body body)
        {
            return CommitPayrollAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Commits all the data in the employment realtion specific worktime objects (in staging area) to the payroll system.
        /// </remarks>
        /// <param name="id">Identifier for the payroll object to commit.</param>
        /// <param name="body">Oprtional properties managing the commit process.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CommitPayrollAsync(string id, Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/commit-payroll/{id}"
                    urlBuilder_.Append("api/v01/worktime/commit-payroll/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates worktime data: employment relations (worker info) or/and worktime rows (the rows data of calculations).
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorktimeImport> UpdateWorktimeAsync(WorktimeImport body)
        {
            return UpdateWorktimeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates worktime data: employment relations (worker info) or/and worktime rows (the rows data of calculations).
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorktimeImport> UpdateWorktimeAsync(WorktimeImport body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/update-worktime"
                    urlBuilder_.Append("api/v01/worktime/update-worktime");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorktimeImport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Marks the selected rows with given state.
        /// </remarks>
        /// <param name="body">The payload containing the rows to mark and the new status.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorktimeImport> UpdateWorktimeStatusAsync(Body2 body)
        {
            return UpdateWorktimeStatusAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Marks the selected rows with given state.
        /// </remarks>
        /// <param name="body">The payload containing the rows to mark and the new status.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorktimeImport> UpdateWorktimeStatusAsync(Body2 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/update-worktime-status"
                    urlBuilder_.Append("api/v01/worktime/update-worktime-status");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorktimeImport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Recalculates the prices and recreates the preview objects for a worktime import.
        /// </remarks>
        /// <param name="id">Identifier of the worktime import (employment id) to recalculate.</param>
        /// <returns>The recalculated worktime import object. This is also saved to the database.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorktimeImport> RecalculateWorktimeAsync(string id)
        {
            return RecalculateWorktimeAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Recalculates the prices and recreates the preview objects for a worktime import.
        /// </remarks>
        /// <param name="id">Identifier of the worktime import (employment id) to recalculate.</param>
        /// <returns>The recalculated worktime import object. This is also saved to the database.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorktimeImport> RecalculateWorktimeAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/recalculate/{id}"
                    urlBuilder_.Append("api/v01/worktime/recalculate/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorktimeImport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets a list of calculations / salary slips for a worker / employment relation.
        /// </remarks>
        /// <param name="employmentId">This may be either employment ID or Personal ID (Finnish HETU).</param>
        /// <param name="type">The type of calculations to fetch.
        /// <br/>"preview" for calculations based on preview data (not committed worktime data)
        /// <br/>"committed" for committed calculations in Palkkaus.fi database.
        /// <br/>"all" (default) for all calculations.
        /// <br/>"distinct" for all calculations but only returning a single calculation per payroll. This option takes a committed version over a preview version.</param>
        /// <returns>A list of calculations as an OData object (currently does not support paging, filtering etc.).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ODataResult_CalculationListItem_> GetCalculationsAsync(string employmentId, Type? type)
        {
            return GetCalculationsAsync(employmentId, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets a list of calculations / salary slips for a worker / employment relation.
        /// </remarks>
        /// <param name="employmentId">This may be either employment ID or Personal ID (Finnish HETU).</param>
        /// <param name="type">The type of calculations to fetch.
        /// <br/>"preview" for calculations based on preview data (not committed worktime data)
        /// <br/>"committed" for committed calculations in Palkkaus.fi database.
        /// <br/>"all" (default) for all calculations.
        /// <br/>"distinct" for all calculations but only returning a single calculation per payroll. This option takes a committed version over a preview version.</param>
        /// <returns>A list of calculations as an OData object (currently does not support paging, filtering etc.).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ODataResult_CalculationListItem_> GetCalculationsAsync(string employmentId, Type? type, System.Threading.CancellationToken cancellationToken)
        {
            if (employmentId == null)
                throw new System.ArgumentNullException("employmentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/employment/{employmentId}/calculations"
                    urlBuilder_.Append("api/v01/worktime/employment/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employmentId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/calculations");
                    urlBuilder_.Append('?');
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ODataResult_CalculationListItem_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets a salary slip PDF file for a calculation.
        /// </remarks>
        /// <param name="calcId">Identifier for the calculation.</param>
        /// <param name="lang">Optional language for the PDF file. Default is Finnish.</param>
        /// <returns>The salary slip as a PDF file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetSalarySlipPdfAsync(string calcId, Language? lang)
        {
            return GetSalarySlipPdfAsync(calcId, lang, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets a salary slip PDF file for a calculation.
        /// </remarks>
        /// <param name="calcId">Identifier for the calculation.</param>
        /// <param name="lang">Optional language for the PDF file. Default is Finnish.</param>
        /// <returns>The salary slip as a PDF file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetSalarySlipPdfAsync(string calcId, Language? lang, System.Threading.CancellationToken cancellationToken)
        {
            if (calcId == null)
                throw new System.ArgumentNullException("calcId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/calculations/{calcId}/pdf"
                    urlBuilder_.Append("api/v01/worktime/calculations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(calcId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/pdf");
                    urlBuilder_.Append('?');
                    if (lang != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets a salary slip HTML file for a calculation.
        /// </remarks>
        /// <param name="calcId">Identifier for the calculation.</param>
        /// <param name="lang">Optional language for the HTML file. Default is Finnish.</param>
        /// <returns>The salary slip as an HTML file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetSalarySliphtmlAsync(string calcId, Language? lang)
        {
            return GetSalarySliphtmlAsync(calcId, lang, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets a salary slip HTML file for a calculation.
        /// </remarks>
        /// <param name="calcId">Identifier for the calculation.</param>
        /// <param name="lang">Optional language for the HTML file. Default is Finnish.</param>
        /// <returns>The salary slip as an HTML file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetSalarySliphtmlAsync(string calcId, Language? lang, System.Threading.CancellationToken cancellationToken)
        {
            if (calcId == null)
                throw new System.ArgumentNullException("calcId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/html"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/calculations/{calcId}/html"
                    urlBuilder_.Append("api/v01/worktime/calculations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(calcId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/html");
                    urlBuilder_.Append('?');
                    if (lang != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lang")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets a salary slip PDF file for a calculation.
        /// </remarks>
        /// <param name="calcId">Identifier for the calculation.</param>
        /// <returns>The salary slip as a PDF file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Calculation> GetSalaryCalcDataAsync(string calcId)
        {
            return GetSalaryCalcDataAsync(calcId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets a salary slip PDF file for a calculation.
        /// </remarks>
        /// <param name="calcId">Identifier for the calculation.</param>
        /// <returns>The salary slip as a PDF file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Calculation> GetSalaryCalcDataAsync(string calcId, System.Threading.CancellationToken cancellationToken)
        {
            if (calcId == null)
                throw new System.ArgumentNullException("calcId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/calculations/{calcId}"
                    urlBuilder_.Append("api/v01/worktime/calculations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(calcId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Calculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets a list of the items (metadata from index only).
        /// </remarks>
        /// <returns>Array of list items from index.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ODataResult_BlobListItem_> GetODataAsync()
        {
            return GetODataAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets a list of the items (metadata from index only).
        /// </remarks>
        /// <returns>Array of list items from index.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ODataResult_BlobListItem_> GetODataAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime"
                    urlBuilder_.Append("api/v01/worktime");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ODataResult_BlobListItem_>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create a new item or updates an existing one.
        /// </remarks>
        /// <returns>The saved item with processed data.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorktimeImportApiItem> SaveAsync(WorktimeImport body)
        {
            return SaveAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create a new item or updates an existing one.
        /// </remarks>
        /// <returns>The saved item with processed data.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorktimeImportApiItem> SaveAsync(WorktimeImport body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime"
                    urlBuilder_.Append("api/v01/worktime");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorktimeImportApiItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets an item from storage based on its id.
        /// </remarks>
        /// <param name="id">Unique identifier for the item.</param>
        /// <returns>The item if found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WorktimeImportApiItem> FindByIdAsync(string id)
        {
            return FindByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets an item from storage based on its id.
        /// </remarks>
        /// <param name="id">Unique identifier for the item.</param>
        /// <returns>The item if found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorktimeImportApiItem> FindByIdAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/{id}"
                    urlBuilder_.Append("api/v01/worktime/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorktimeImportApiItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Removes the item from the storage if allowed.
        /// </remarks>
        /// <param name="id">Identifier for the item.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteAsync(string id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Removes the item from the storage if allowed.
        /// </remarks>
        /// <param name="id">Identifier for the item.</param>
        /// <returns>No content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/worktime/{id}"
                    urlBuilder_.Append("api/v01/worktime/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the main Open API specification for the API.
        /// </remarks>
        /// <returns>The the definition of the API as an Open API definition (swagger).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SwaggerAsync()
        {
            return SwaggerAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the main Open API specification for the API.
        /// </remarks>
        /// <returns>The the definition of the API as an Open API definition (swagger).</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SwaggerAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/about/swagger/main"
                    urlBuilder_.Append("api/v01/about/swagger/main");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the application version.
        /// </remarks>
        /// <returns>The version of the application.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> GetVersionAsync()
        {
            return GetVersionAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the application version.
        /// </remarks>
        /// <returns>The version of the application.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GetVersionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/about/version"
                    urlBuilder_.Append("api/v01/about/version");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the public Salaxy client configuration for the current environment:
        /// <br/>Server addresses, App Insights instrumentation keys etc.
        /// </remarks>
        /// <returns>The client config as JSON.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Config> ClientConfigAsync()
        {
            return ClientConfigAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the public Salaxy client configuration for the current environment:
        /// <br/>Server addresses, App Insights instrumentation keys etc.
        /// </remarks>
        /// <returns>The client config as JSON.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Config> ClientConfigAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/about/client-config"
                    urlBuilder_.Append("api/v01/about/client-config");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Config>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the public Salaxy client configuration (see "client-config") as a JavaScript file that sets the config in window.salaxy.config.
        /// <br/>The JavaScript can then be included in an HTML file with script tag (waits for the file before continuing).
        /// </remarks>
        /// <returns>A JavaScript file that can be easily included in HTML file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ClientConfigJavaScriptAsync()
        {
            return ClientConfigJavaScriptAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the public Salaxy client configuration (see "client-config") as a JavaScript file that sets the config in window.salaxy.config.
        /// <br/>The JavaScript can then be included in an HTML file with script tag (waits for the file before continuing).
        /// </remarks>
        /// <returns>A JavaScript file that can be easily included in HTML file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ClientConfigJavaScriptAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/javascript"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/v01/about/client-config.js"
                    urlBuilder_.Append("api/v01/about/client-config.js");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// LegalEntityType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegalEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"person")]
        Person = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"company")]
        Company = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"personCreatedByEmployer")]
        PersonCreatedByEmployer = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"partner")]
        Partner = 4,

    }

    /// <summary>
    /// AvatarPictureType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AvatarPictureType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"icon")]
        Icon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"uploaded")]
        Uploaded = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"gravatar")]
        Gravatar = 2,

    }

    /// <summary>
    /// Defines an avatar for an account, profile etc. - mainly the image that should be shown, names and short description
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Avatar
    {
        /// <summary>
        /// Entity type: person/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// First name or company name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name, for companies, this should be null
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Display name. For a person this is 'FirstName LastName' (auto-created).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Sortable name for ordered lists etc. For a person this is 'LastName, FirstName' (auto-created).
        /// <br/>Depending on the data storage, this may be all-lowercase for easier sorting and search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortableName { get; set; }

        /// <summary>
        /// Type of the Avatar picture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pictureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AvatarPictureType? PictureType { get; set; }

        /// <summary>
        /// Color - currently only used by type Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Initials - currently only used by type Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Initials { get; set; }

        /// <summary>
        /// URL of the picture if specified as picture (null in a case of type Icon)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Short description of the user.
        /// <br/>This may be overriden by a context specific value by the business logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Common contact information object for Person, Company, Location etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// Contact e-mail address. Always lower invariant, trimmed and empty string set to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Street address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// City or community (postitoimipaikka)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// This is the ISO code for country.
        /// <br/>Currently, it should always be "fi".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

    }

    /// <summary>
    /// Employer of a calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcEmployer
    {
        /// <summary>
        /// Display image information and type of employer.
        /// <br/>NOTE: Recalculate-method retains the values for display purposes if AccountId or IsSelf is not set.
        /// <br/>This is mainly for demo and testing in anonymous mode.
        /// <br/>However, in storage methods, the value is reset based on values of AccountId or IsSelf
        /// <br/>even if they are not set: Anything stored in Avatar will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// The Palkkaus.fi Account identifier for the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// True if Profile is the current Authorization.
        /// <br/>If set to true, will set current Authorization as this contract party.
        /// <br/>This overrides any value in AccountId, so be sure to switch this back to false if this is switchable.
        /// <br/>Setting to False does not have any immediate effect.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSelf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSelf { get; set; }

        /// <summary>
        /// Current address of the employer.
        /// <br/>Please note that this is a read only field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Official id of the person or company.
        /// <br/>Please note that this is a read only field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

    }

    /// <summary>
    /// The required information for paying the Salary to Worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcWorkerPaymentData
    {
        /// <summary>
        /// First name of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name / Surname of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets the Social security number the way the user set it in input.
        /// <br/>HOWEVER: The getter will change the string to upper invariant/trim and if the last character is "*", it will be replaced by calculated checksum.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialSecurityNumber { get; set; }

        /// <summary>
        /// Social security number if valid or null
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityNumberValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialSecurityNumberValid { get; set; }

        /// <summary>
        /// IBAN number for the Bank account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

        /// <summary>
        /// Contact e-mail address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

    }

    /// <summary>
    /// DateOfBirthAccuracy enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DateOfBirthAccuracy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"assumption")]
        Assumption = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ageBased")]
        AgeBased = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ageGroupBased")]
        AgeGroupBased = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"monthCorrect")]
        MonthCorrect = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"exact")]
        Exact = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"verified")]
        Verified = 5,

    }

    /// <summary>
    /// Describes the range of dates from start to end and the number of days in between.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRange
    {
        /// <summary>
        /// Start date of the period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Start { get; set; }

        /// <summary>
        /// End date of the period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End { get; set; }

        /// <summary>
        /// Number of days in the range.
        /// <br/>Depending of the context, this may be mathematical (end - start) or
        /// <br/>explicitly specified (typically working days).
        /// <br/>Typically an integer, and calculations and UI's may choose to round it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daysCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DaysCount { get; set; }

        /// <summary>
        /// The collection of days contained in the DateRange if specified by the user.
        /// <br/>Alternative to DaysCount. If set, should also set DaysCount for backward compatibility.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Days { get; set; }

    }

    /// <summary>
    /// TaxcardApiIncomeType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxcardApiIncomeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salary")]
        Salary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dividendsForWorkAsSalary")]
        DividendsForWorkAsSalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"personnelFundIncome")]
        PersonnelFundIncome = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"salaryOneOff")]
        SalaryOneOff = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForUseEarnedIncome")]
        CompensationForUseEarnedIncome = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationForUseCapitalIncome")]
        CompensationForUseCapitalIncome = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"compensationVatResponsible")]
        CompensationVatResponsible = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"dividendsForWorkAsCompensation")]
        DividendsForWorkAsCompensation = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"athletePay")]
        AthletePay = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"otherTaxableIncome")]
        OtherTaxableIncome = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"otherTaxableIncomeOneOff")]
        OtherTaxableIncomeOneOff = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"employeeStockOption")]
        EmployeeStockOption = 13,

    }

    /// <summary>
    /// TaxcardKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxcardKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noTaxCard")]
        NoTaxCard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"defaultYearly")]
        DefaultYearly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"replacement")]
        Replacement = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"noWithholdingHousehold")]
        NoWithholdingHousehold = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"others")]
        Others = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 7,

    }

    /// <summary>
    /// Basic information about the taxcard: This object has the information printed in SalarySlip etc. but not the full salaries paid to the taxcard etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxcardSnapshot
    {
        /// <summary>
        /// Year that the tax card is valid for. Typically this means from February of this year to January of the following.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forYear", Required = Newtonsoft.Json.Required.Always)]
        public double ForYear { get; set; }

        /// <summary>
        /// Validity for the taxcard as expressed in the card.
        /// <br/>Note that the end date may not be reliable if new taxcard has replaced this one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Validity { get; set; }

        /// <summary>
        /// Tax percent as percent. I.e. for 50% set 50, not 0.5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent { get; set; }

        /// <summary>
        /// Income up to which the TaxPercent can be used.
        /// <br/>Any income above the limit is taxed with ExcessTaxPercent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IncomeLimit { get; set; }

        /// <summary>
        /// Cumulative income on the taxcard - including this calculation.
        /// <br/>Note that with shared taxcards, this may include income from other employers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cumulativeIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CumulativeIncome { get; set; }

        /// <summary>
        /// Tax percentage that is used in calculating the widthholding tax for the part of income above the IncomeLimit.
        /// <br/>This is percent. I.e. for 50% set 50, not 0.5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent2 { get; set; }

        /// <summary>
        /// A Worker may request a minimum percent that is deducted even if the effective tax percent would be lower.
        /// <br/>This can be used if Worker knows that he/she will be earning more in the year than what was estimated when the taxcard was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentMin { get; set; }

        /// <summary>
        /// TaxPercentMin set by owner of the card.
        /// <br/>This overrides the tax percent min set by the taxcard sharer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentMinOwned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentMinOwned { get; set; }

        /// <summary>
        /// The income type of the taxacard if fetched from the tax authorities taxcard API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardApiIncomeType? IncomeType { get; set; }

        /// <summary>
        /// Type of the taxcard as of 2019, when the taxcards logic was simplified by the Finnish tazx authorities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxcardKind? Kind { get; set; }

        /// <summary>
        /// Uri to the file copy of the tax card.
        /// <br/>Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileUri { get; set; }

        /// <summary>
        /// Uri to the preview image of the tax card.
        /// <br/>Set by the system as part of the upload process, do not change in the API though it may be technically possible. This may have unintended results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previewUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviewUri { get; set; }

        /// <summary>
        /// Explicit value of when the item was last checked. At the moment, updated in API fetches only, but may be used later for other checks.
        /// <br/>Undefined value is 1.1.2000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastChecked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastChecked { get; set; }

    }

    /// <summary>
    /// Tax card information stored as part of the Calculation object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcTax
    {
        /// <summary>
        /// Identifier for a stored tax card if one is applied to this calculation.
        /// <br/>System updates the TaxCardId automatically in Recalculate / Save if it finds a better candidate
        /// <br/>and also updates the Snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxcardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxcardId { get; set; }

        /// <summary>
        /// Snapshot of the tax card for salary slip etc. purposes.
        /// <br/>Updated in Recalculate / Save based on TaxCardId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxcardSnapshot Snapshot { get; set; }

        /// <summary>
        /// Possibility to set a fixed widthholding tax amount for this calculation regardless of
        /// <br/>the percentage etc. in the tax card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedTaxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FixedTaxAmount { get; set; }

        /// <summary>
        /// The API returns true if there is a valid taxcard for the PaidAt date for this calculation
        /// <br/>or if FixedTaxAmount is set for th calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Calculated widthholding tax. Note that this is an estimation until the calculation is actually paid.
        /// <br/>Also, if the salary is not paid as cash (e.g. fringe benefits), there may not be enough money to make the full deduction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedTax { get; set; }

        /// <summary>
        /// A flag that during last recalculation, there was a new shared taxcard that was waiting approval.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasNewSharedCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasNewSharedCard { get; set; }

        /// <summary>
        /// Tax percent that is used in visualization. This is mainly used in Unit testing and anonymous calcultors.
        /// <br/>Not used in real paid calculations. This is percent. I.e. for 50% set 50, not 0.5.
        /// <br/>If PaymentData or AccountId lead to a valid tax card type and percent, or if there is FixedTaxAmount, this value is not used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercentForVisualization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercentForVisualization { get; set; }

    }

    /// <summary>
    /// Worker object for the current calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcWorker
    {
        /// <summary>
        /// Palkkaus.fi Account Id for the worker.
        /// <br/>Alternatively you can set the Payment data with the required infromation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Employment Id for the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Data that is needed for salary payment.
        /// <br/>This object may be null if AccountId has been set.
        /// <br/>Also, if AccountId has been set, these properties will be ignored:
        /// <br/>The Worker will decide on payment properties herself.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorkerPaymentData PaymentData { get; set; }

        /// <summary>
        /// Display image and properties of the Worker.
        /// <br/>Based on either the AccountId or PaymentData
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// True if Profile is the currently Account
        /// <br/>If set to true, will set current Account as this contract party.
        /// <br/>This overrides any value in AccountId, so be sure to switch this back to false if this is switchable.
        /// <br/>Setting to False does not have any immediate effect.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSelf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSelf { get; set; }

        /// <summary>
        /// Date of birth for the Worker - this affects the side costs.
        /// <br/>Please also set the DateOfBirthAccuracy, if you set this property.
        /// <br/>If PaymentData or AccountId lead to a valid Social security number, it will override any age set here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Accuracy of the date of birth
        /// <br/>If PaymentData or AccountId lead to a valid Social security number, it will override any age set here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirthAccuracy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public DateOfBirthAccuracy? DateOfBirthAccuracy { get; set; }

        /// <summary>
        /// New Widthholding tax logic that is based on separately stored tax cards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcTax Tax { get; set; }

        /// <summary>
        /// Current address of the worker.
        /// <br/>Please note that this is a read only field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

    }

    /// <summary>
    /// CalculationStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentStarted")]
        PaymentStarted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentSucceeded")]
        PaymentSucceeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentCanceled")]
        PaymentCanceled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentError")]
        PaymentError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentWorkerCopy")]
        PaymentWorkerCopy = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"workerRequested")]
        WorkerRequested = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"workerRequestAccepted")]
        WorkerRequestAccepted = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"workerRequestDeclined")]
        WorkerRequestDeclined = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentRefunded")]
        PaymentRefunded = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingApproval")]
        WaitingApproval = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"payrollDraft")]
        PayrollDraft = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"proDraft")]
        ProDraft = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedWaiting")]
        SharedWaiting = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedApproved")]
        SharedApproved = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"sharedRejected")]
        SharedRejected = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"history")]
        History = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"template")]
        Template = 17,

    }

    /// <summary>
    /// SalaryDateKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalaryDateKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"inPast")]
        InPast = 1,

    }

    /// <summary>
    /// Defines the properties of salary calculation workflow - typically the workflow from draft to Payment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcWorkflow
    {
        /// <summary>
        /// Status of the calculation from Draft to PaymentSucceeded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationStatus? Status { get; set; }

        /// <summary>
        /// Time when this calculation was paid (if it was paid) to Palkkaus service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paidAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaidAt { get; set; }

        /// <summary>
        /// Time when the salary was paid by Palkkaus service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPaidAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalaryPaidAt { get; set; }

        /// <summary>
        /// The estimated date when the salary is withdrawable by the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalaryDate { get; set; }

        /// <summary>
        /// The requested date for the SalaryDate from the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedSalaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedSalaryDate { get; set; }

        /// <summary>
        /// Defines the re-setting of the salary date in the calculation re-calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDateKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SalaryDateKind? SalaryDateKind { get; set; }

    }

    /// <summary>
    /// SalaryKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalaryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixedSalary")]
        FixedSalary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlySalary")]
        HourlySalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlySalary")]
        MonthlySalary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerPayment")]
        TotalWorkerPayment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"totalEmployerPayment")]
        TotalEmployerPayment = 6,

    }

    /// <summary>
    /// TaxDeductionWorkCategories enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxDeductionWorkCategories
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"householdwork")]
        Householdwork = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"carework")]
        Carework = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"homeImprovement")]
        HomeImprovement = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ownPropety")]
        OwnPropety = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"relativesProperty")]
        RelativesProperty = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"oilHeatingReplacementWork")]
        OilHeatingReplacementWork = 6,

    }

    /// <summary>
    /// Defines the main salary that is the bases for the calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Salary
    {
        /// <summary>
        /// Type of the salary being calculated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SalaryKind Kind { get; set; }

        /// <summary>
        /// Amount of e.g. hours, months for the salary. Default is 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Price of one unit - e.g. hour, month.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }

        /// <summary>
        /// E.g. hour, month. Typically this parameter can be left empty/null and the unit is set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        /// <summary>
        /// Optional message for the salary row that is shown in reports. If null, will be set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// If set to true, will calculate the household deduction. Applies only to natural persons - as oppsed to companies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHouseholdDeductible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHouseholdDeductible { get; set; }

        /// <summary>
        /// If tax IsHouseholdDeductible is set to true, please also select the category (categories).
        /// <br/>Note that "OwnPropety" is a default, it does not need to be set: Only set RelativesProperty if necessary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxDeductionCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TaxDeductionWorkCategories? TaxDeductionCategories { get; set; }

    }

    /// <summary>
    /// CalculationRowType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationRowType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salary")]
        Salary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlySalary")]
        HourlySalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlySalary")]
        MonthlySalary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"totalWorkerPayment")]
        TotalWorkerPayment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"totalEmployerPayment")]
        TotalEmployerPayment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"overtime")]
        Overtime = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"tesWorktimeShortening")]
        TesWorktimeShortening = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"eveningAddition")]
        EveningAddition = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"nightimeAddition")]
        NightimeAddition = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"saturdayAddition")]
        SaturdayAddition = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"sundayWork")]
        SundayWork = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"otherAdditions")]
        OtherAdditions = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveSalary")]
        PaidSickLeaveSalary = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveHourlySalary")]
        PaidSickLeaveHourlySalary = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeaveMonthlySalary")]
        PaidSickLeaveMonthlySalary = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingSalary")]
        TrainingSalary = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingHourlySalary")]
        TrainingHourlySalary = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"trainingMonthlySalary")]
        TrainingMonthlySalary = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"accomodationBenefit")]
        AccomodationBenefit = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"mealBenefit")]
        MealBenefit = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"phoneBenefit")]
        PhoneBenefit = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"carBenefit")]
        CarBenefit = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"bicycleBenefit")]
        BicycleBenefit = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"otherBenefit")]
        OtherBenefit = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayCompensation")]
        HolidayCompensation = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayBonus")]
        HolidayBonus = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"holidaySalary")]
        HolidaySalary = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"dailyAllowance")]
        DailyAllowance = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"dailyAllowanceHalf")]
        DailyAllowanceHalf = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"mealCompensation")]
        MealCompensation = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"milageOwnCar")]
        MilageOwnCar = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"toolCompensation")]
        ToolCompensation = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"expenses")]
        Expenses = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"milageDaily")]
        MilageDaily = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"milageOther")]
        MilageOther = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"unionPayment")]
        UnionPayment = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"foreclosure")]
        Foreclosure = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"advance")]
        Advance = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"foreclosureByPalkkaus")]
        ForeclosureByPalkkaus = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"prepaidExpenses")]
        PrepaidExpenses = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"otherDeductions")]
        OtherDeductions = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"deductibleOfExerciseAndCultureBenefit")]
        DeductibleOfExerciseAndCultureBenefit = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"childCareSubsidy")]
        ChildCareSubsidy = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"chainsawReduction")]
        ChainsawReduction = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"nonProfitOrg")]
        NonProfitOrg = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"subsidisedCommute")]
        SubsidisedCommute = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"irIncomeType")]
        IrIncomeType = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"board")]
        Board = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"remuneration")]
        Remuneration = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"otherCompensation")]
        OtherCompensation = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"workingTimeCompensation")]
        WorkingTimeCompensation = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"employmentTermination")]
        EmploymentTermination = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlySalaryWithWorkingTimeCompensation")]
        HourlySalaryWithWorkingTimeCompensation = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"paidSickLeave")]
        PaidSickLeave = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"training")]
        Training = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"taxAtSource")]
        TaxAtSource = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"taxWithholding")]
        TaxWithholding = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"absencePeriod")]
        AbsencePeriod = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"serviceCharge")]
        ServiceCharge = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"service")]
        Service = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"totals")]
        Totals = 62,

    }

    /// <summary>
    /// CalculationRowUnit enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationRowUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"count")]
        Count = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"days")]
        Days = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"kilometers")]
        Kilometers = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"hours")]
        Hours = 5,

    }

    /// <summary>
    /// CalculationRowSource enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationRowSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manualRow")]
        ManualRow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"worktimeImport")]
        WorktimeImport = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"priceEmployment")]
        PriceEmployment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"priceCompany")]
        PriceCompany = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"customRowtype")]
        CustomRowtype = 6,

    }

    /// <summary>
    /// VatRate enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VatRate
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"vat0000")]
        Vat0000 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"vat1000")]
        Vat1000 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"vat1400")]
        Vat1400 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"vat2400")]
        Vat2400 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"vat2550")]
        Vat2550 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 7,

    }

    /// <summary>
    /// For VAT breakdown of a receipt (ALV-erittely) represents a single VAT rate and the revenue and tax with that rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VatEntry
    {
        /// <summary>
        /// Tax amount of specific VAT rate in euro.
        /// <br/>This value is mandatory, if the collection of VatEntries contains more than one item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax { get; set; }

        /// <summary>
        /// Applied VAT rate. This is always mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public VatRate? VatRate { get; set; }

        /// <summary>
        /// Tax as percent of Net sales (0-1). Currently just informative, but may later be used for Custom non-standard VAT rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPercent { get; set; }

        /// <summary>
        /// Gross sales for specific VAT rate including the tax (VAT).
        /// <br/>This value is mandatory, if the collection of VatEntries contains more than one item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gross", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Gross { get; set; }

        /// <summary>
        /// Net sales for specific VAT rate excluding the tax (VAT).
        /// <br/>This value is mandatory, if the collection of VatEntries contains more than one item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("net", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Net { get; set; }

    }

    /// <summary>
    /// Id of the cost accounting dimension with optional percentage for shared costs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CostAccountingDimension
    {
        /// <summary>
        /// Dimension Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Cost accounting dimension value id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Sharing percent for the dimension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

    }

    /// <summary>
    /// Provides row specific data for accounting (both cost and financial accounting).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RowAccounting
    {
        /// <summary>
        /// Percent for VAT calculation expressed as decimal: 24% is 0.24.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VatPercent { get; set; }

        /// <summary>
        /// Total VAT amount splitted by VAT rates.
        /// <br/>Please note, that if both {Palkkaus.Model.Calc.RowAccounting.VatPercent} and the {Palkkaus.Model.Calc.RowAccounting.VatEntries} with some entries given,
        /// <br/>the {Palkkaus.Model.Calc.RowAccounting.VatEntries} are applied.
        /// <br/>Please note that this is null by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vatEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VatEntry> VatEntries { get; set; }

        /// <summary>
        /// Special flags for account number mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AccountNumberFlags { get; set; }

        /// <summary>
        /// Values for cost accounting dimensions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimension> Dimensions { get; set; }

    }

    /// <summary>
    /// This is a user defined calculation row as opposed to CalculationRow that may be either based on a user defined row or generated by the system based on e.g. TES parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDefinedRow
    {
        /// <summary>
        /// Zero based row index that can be used to match the row to result rows or when deleting.
        /// <br/>NOTE: The Row ID is given values on the fly so setting this will not have any effect at the moment.
        /// <br/>It may reorder the entries in later implementations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RowIndex { get; set; }

        /// <summary>
        /// Logical type of the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowType? RowType { get; set; }

        /// <summary>
        /// Description text of the row that is shown in reports. If null, will be set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count for the row - default is one
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price for the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Unit for the row. Guessed based on the RowType and count, but you are better off setting it to be sure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowUnit? Unit { get; set; }

        /// <summary>
        /// Source of the calculation row - affects how the row is handled in editing / recalculation scenarios.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowSource? Source { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This is a pass-through string that is passed to the result calculations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// Accounting related data for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RowAccounting Accounting { get; set; }

        /// <summary>
        /// Period if different than the Period of calculation.
        /// <br/>Will be reported to the National Incomes registry, but also affect some other calculations.
        /// <br/>Note that this property may be (and by default is) null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// FrameworkAgreement enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FrameworkAgreement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notDefined")]
        NotDefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"construction")]
        Construction = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mll")]
        Mll = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"childCare")]
        ChildCare = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"cleaning")]
        Cleaning = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"santaClaus")]
        SantaClaus = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneur")]
        Entrepreneur = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 7,

    }

    /// <summary>
    /// TesSubtype enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TesSubtype
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelected")]
        NotSelected = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"constructionCarpenter")]
        ConstructionCarpenter = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"constructionFloor")]
        ConstructionFloor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"constructionOther")]
        ConstructionOther = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"constructionFreeContract")]
        ConstructionFreeContract = 4,

    }

    /// <summary>
    /// Captures the collection of parameters that different Framework agreements (TES) have.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TesParameters
    {
        /// <summary>
        /// Type of the work framework
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public FrameworkAgreement? Type { get; set; }

        /// <summary>
        /// Subtype when one framework has several options
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public TesSubtype? SubType { get; set; }

        /// <summary>
        /// Marker that the payments defined by framework agreement are included in the salary (will not be added by the calculation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTesIncludedInSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTesIncludedInSalary { get; set; }

        /// <summary>
        /// Number of days may affect calculation of different payments calculated based on a Framework agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumberOfDays { get; set; }

        /// <summary>
        /// Travel expences per day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyTravelExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DailyTravelExpenses { get; set; }

        /// <summary>
        /// The amount of kilometers travelled by day - used to define the amount of travel expenses in aomse framework agreements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyTravelExpensesKm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DailyTravelExpensesKm { get; set; }

        /// <summary>
        /// Daily expenses amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DailyExpenses { get; set; }

        /// <summary>
        /// If true will calculate the Finnish child care subsidy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isYksityisenHoidonTuki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsYksityisenHoidonTuki { get; set; }

        /// <summary>
        /// Amount of Finnish child care subsidy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yksityisenHoidonTukiAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YksityisenHoidonTukiAmount { get; set; }

    }

    /// <summary>
    /// A usecase for creating and editing salary calculations and other . In practice, a usecase is either a user interface or a microservice that provides the bases for the object. Provides the possibility to store useacase specific data as part of object. NOTE: For Calculations, this functionality will replace TesParameters in the 3.0 version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsecaseData
    {
        /// <summary>
        /// Key for the usecase based on which it is resolved.
        /// <br/>Later, this may resolve to a user interface, microservice or a to manifest registering one.
        /// <br/>For now, just use a unique string starting with a domain you own.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// A short label of that can be shown to the end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Optional description of the use case for the end user.
        /// <br/>Shown in detail views when explaining the logic of the usecase.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Calculates the total numbers - the ones that are common to Employer and worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalCalculationDTO
    {
        /// <summary>
        /// The total pension payment for this calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pension { get; set; }

        /// <summary>
        /// The total unemployment payment sum.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Unemployment { get; set; }

        /// <summary>
        /// The total of all calculation rows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// The base salary without overtime and other such additions that are part of gross salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalBaseSalary { get; set; }

        /// <summary>
        /// Gross salary is the salary including additions like overtime, but not benefits or expenses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalGrossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalGrossSalary { get; set; }

        /// <summary>
        /// Taxable salary is the salary from the taxation point of view - includes some benefits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxable { get; set; }

        /// <summary>
        /// Deduction from TotalTaxable to tax at source calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAtSourceDeduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAtSourceDeduction { get; set; }

        /// <summary>
        /// DEPRICATED: This is now the same as TotalPensionInsuranceBase. For other social insurances, you may want to use
        /// <br/>TotalUnemploymentInsuranceBase, TotalHealthInsuranceBase or TotalAccidentInsuranceBase,
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSocialSecurityBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalSocialSecurityBase { get; set; }

        /// <summary>
        /// Base income for calculating the Pension insurance contributions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPensionInsuranceBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPensionInsuranceBase { get; set; }

        /// <summary>
        /// Base income for calculating the Unemployment insurance contributions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUnemploymentInsuranceBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalUnemploymentInsuranceBase { get; set; }

        /// <summary>
        /// Base income for calculating the Health insurance contributions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalHealthInsuranceBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalHealthInsuranceBase { get; set; }

        /// <summary>
        /// Base income for calculating the Accident insurance contributions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAccidentInsuranceBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalAccidentInsuranceBase { get; set; }

        /// <summary>
        /// Tax free expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalExpenses { get; set; }

        /// <summary>
        /// Total sum of rows that are paid through Salaxy Customer Funds account.
        /// <br/>This is the Gross sum before side costs, deductions etc., but it is not Gross salary as it includes expenses etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPayable { get; set; }

    }

    /// <summary>
    /// IrRowSourceType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IrRowSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"usecase")]
        Usecase = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"usecaseV02")]
        UsecaseV02 = 2,

    }

    /// <summary>
    /// Unit enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hours")]
        Hours = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"days")]
        Days = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"weeks")]
        Weeks = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"period")]
        Period = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"one")]
        One = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"count")]
        Count = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"kilometers")]
        Kilometers = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"euro")]
        Euro = 9,

    }

    /// <summary>
    /// IrFlags enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IrFlags
    {

        [System.Runtime.Serialization.EnumMember(Value = @"noMoney")]
        NoMoney = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"oneOff")]
        OneOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unjustEnrichment")]
        UnjustEnrichment = 2,

    }

    /// <summary>
    /// IrInsuranceExceptions enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IrInsuranceExceptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"includeAll")]
        IncludeAll = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"includePension")]
        IncludePension = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"includeHealthInsurance")]
        IncludeHealthInsurance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"includeUnemployment")]
        IncludeUnemployment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"includeAccidentInsurance")]
        IncludeAccidentInsurance = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"excludeAll")]
        ExcludeAll = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"excludePension")]
        ExcludePension = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"excludeHealthInsurance")]
        ExcludeHealthInsurance = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"excludeUnemployment")]
        ExcludeUnemployment = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"excludeAccidentInsurance")]
        ExcludeAccidentInsurance = 9,

    }

    /// <summary>
    /// AllowanceCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllowanceCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mealAllowance")]
        MealAllowance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"partialDailyAllowance")]
        PartialDailyAllowance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"fullDailyAllowance")]
        FullDailyAllowance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internationalDailyAllowance")]
        InternationalDailyAllowance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"taxExemptReimbursementsAbroad")]
        TaxExemptReimbursementsAbroad = 4,

    }

    /// <summary>
    /// CarBenefitCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CarBenefitCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"limitedCarBenefit")]
        LimitedCarBenefit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fullCarBenefit")]
        FullCarBenefit = 1,

    }

    /// <summary>
    /// AgeGroupCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgeGroupCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"a")]
        A = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"b")]
        B = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"c")]
        C = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"u")]
        U = 3,

    }

    /// <summary>
    /// Car benefit Mandatory data group, if the income type is "Car benefit". This data group may not be used with other income types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CarBenefit
    {
        /// <summary>
        /// Car benefit type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carBenefitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CarBenefitCode? CarBenefitCode { get; set; }

        /// <summary>
        /// Car age group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ageGroupCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AgeGroupCode? AgeGroupCode { get; set; }

        /// <summary>
        /// Odometer reading
        /// <br/>
        /// <br/>The value must be greater than or equal to 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Kilometers { get; set; }

        /// <summary>
        /// Car emissions value
        /// <br/>
        /// <br/>The car emissions value must be greater than or equal to 0, and smaller than or
        /// <br/>equal to 100. The car emissions value can only be reported if the payment date
        /// <br/>or other reporting date is in 2022–2025.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emissionsValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EmissionsValue { get; set; }

    }

    /// <summary>
    /// Reporting details to Incomes registry (Tulorekisteri).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrDetails
    {
        /// <summary>
        /// The number code in Incomes Register.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Code { get; set; }

        /// <summary>
        /// Boolean flags that can be set on transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IrFlags> Flags { get; set; }

        /// <summary>
        /// Defines the exceptions to Insurance / Sidecost defaults that are set by the row type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IrInsuranceExceptions> InsuranceExceptions { get; set; }

        /// <summary>
        /// Daily allowance code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<AllowanceCode> DailyAllowance { get; set; }

        /// <summary>
        /// Set this to true if meak benefit is of tax value - false if it si not.
        /// <br/>The value should be null if the row is not mealBenefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealBenefitIsTaxValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MealBenefitIsTaxValue { get; set; }

        /// <summary>
        /// Provides the additional data needed for car benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarBenefit CarBenefit { get; set; }

        /// <summary>
        /// If true, report zero amount to IR.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noTransactionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoTransactionAmount { get; set; }

    }

    /// <summary>
    /// CalcGroup enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalcGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"baseSalary")]
        BaseSalary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"salaryAdditions")]
        SalaryAdditions = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"benefits")]
        Benefits = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"expenses")]
        Expenses = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"deductions")]
        Deductions = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"otherNoPayment")]
        OtherNoPayment = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"totals")]
        Totals = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 8,

    }

    /// <summary>
    /// CalculationFlag enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalculationFlag
    {

        [System.Runtime.Serialization.EnumMember(Value = @"exclude")]
        Exclude = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pensionInsurance")]
        PensionInsurance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"accidentInsurance")]
        AccidentInsurance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unemploymentInsurance")]
        UnemploymentInsurance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"healthInsurance")]
        HealthInsurance = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"insurancesDeduction")]
        InsurancesDeduction = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"noTax")]
        NoTax = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"tax")]
        Tax = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"taxDeduction")]
        TaxDeduction = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"cfNoPayment")]
        CfNoPayment = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"cfPayment")]
        CfPayment = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"cfDeduction")]
        CfDeduction = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"cfDeductionAtSalaxy")]
        CfDeductionAtSalaxy = 12,

    }

    /// <summary>
    /// Details from Salaxy internal calulcation point-of-view (logic not in IR).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrRowCalculationProperties
    {
        /// <summary>
        /// Grouping for reports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalcGroup? Grouping { get; set; }

        /// <summary>
        /// Defines the behavior of the row in Salaxy calculation process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("behavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<CalculationFlag> Behavior { get; set; }

    }

    /// <summary>
    /// Business level modeling corresponding to WageReportsToIRTypes Transaction. Also contains additional data for accounting and integration purposes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IrRow
    {
        /// <summary>
        /// Type of the row - basically describes the source for this row:
        /// <br/>Either Manual (default) or Usecase logic, which may be legacy / API v02 or new / API v03.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public IrRowSourceType? Type { get; set; }

        /// <summary>
        /// Description text of the row that is shown in reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count for the row. Default is one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Simple multiplication: Count * Price - no other logic. Not used as Input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// Unit for the row. If specified as Undefined, set by the server-logic based on row type etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Unit? Unit { get; set; }

        /// <summary>
        /// Details for the National Incomes registry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrDetails IrData { get; set; }

        /// <summary>
        /// Details from Salaxy internal calulcation point-of-view (logic not in IR).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IrRowCalculationProperties CalcData { get; set; }

        /// <summary>
        /// Earnings period if different than the report period.
        /// <br/>Note that this property may be (and by default is) null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earningPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange EarningPeriod { get; set; }

        /// <summary>
        /// Accounting related data for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RowAccounting Accounting { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Models the business logic of Employer side of the calculation. For documentation, see the IEmployerCalculation interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployerCalculationDTO
    {
        /// <summary>
        /// All side cost: The mandatory side costs + Palkkaus and partner fees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allSideCosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AllSideCosts { get; set; }

        /// <summary>
        /// The final cost after household decuction from the tax authorities:
        /// <br/>Add to the payment the deductions (paid by employer) and deduct House hold deduction (later potentially other such subsidies)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finalCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinalCost { get; set; }

        /// <summary>
        /// Household deduction that the tax man will reimburse in taxation.
        /// <br/>This is an estimation: There is minimum and maximum limits etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdDeduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HouseholdDeduction { get; set; }

        /// <summary>
        /// The mandatory side costs are Pension (TyEL), Social secuirty and Unemployment insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mandatorySideCosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MandatorySideCosts { get; set; }

        /// <summary>
        /// The Palkkaus.fi fee including potential partner fees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("palkkaus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Palkkaus { get; set; }

        /// <summary>
        /// Extra service charge in addition to Palkkaus fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Service { get; set; }

        /// <summary>
        /// The part of the Pension that Employer pays
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pension { get; set; }

        /// <summary>
        /// The social security payment- paid as part of taxation (ennakonpidätys).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SocialSecurity { get; set; }

        /// <summary>
        /// Total payment that is Paid to Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPayment { get; set; }

        /// <summary>
        /// Total payment using pre Insiders register calculation logic.
        /// <br/>DEPRICATED: This is provided for special scenarios and may be removed without warning
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPaymentLegacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPaymentLegacy { get; set; }

        /// <summary>
        /// Total salary cost is the paid salary, deductions and side costs, but not expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSalaryCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalSalaryCost { get; set; }

        /// <summary>
        /// The part of the unemployment insurance that the employer pays
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Unemployment { get; set; }

        /// <summary>
        /// Total deductions that are made from the payment that is paid to Palkkaus and then to Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDeductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDeductions { get; set; }

        /// <summary>
        /// Union payment if it is deducted from the final figure
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionUnionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionUnionPayment { get; set; }

        /// <summary>
        /// Pension payments, when paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionPensionSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionPensionSelfPayment { get; set; }

        /// <summary>
        /// Unemployment insurance (TVR) payments, when paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionUnemploymentSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionUnemploymentSelfPayment { get; set; }

        /// <summary>
        /// Salary advance - this part has already been paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionSalaryAdvance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionSalaryAdvance { get; set; }

        /// <summary>
        /// Foreclosure that has already been paid by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionForeclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionForeclosure { get; set; }

        /// <summary>
        /// Tax and social security payments, when paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionTaxAndSocialSecuritySelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionTaxAndSocialSecuritySelfPayment { get; set; }

        /// <summary>
        /// Worker salary and expense payments, when paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionWorkerSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionWorkerSelfPayment { get; set; }

        /// <summary>
        /// Foreclosure that Palkkaus.fi pays in behalf of employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreclosureByPalkkaus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ForeclosureByPalkkaus { get; set; }

        /// <summary>
        /// Other deductions that are deducted from the net salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionOtherDeductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionOtherDeductions { get; set; }

    }

    /// <summary>
    /// The Worker side of the calculation. SalarySlip is largely written based on this calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerCalculationDTO
    {
        /// <summary>
        /// The benefits as valued by the tax authority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Benefits { get; set; }

        /// <summary>
        /// All the items that are deducted from the salary (this is also the order if there is not enough payable money):
        /// <br/>SalaryAdvance + Tax + Pension + UnemploymentInsurance + UnionPayment + OtherDeductions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Deductions { get; set; }

        /// <summary>
        /// The payment that is made to the Worker based on salary after all deductions.
        /// <br/>Does not include expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SalaryPayment { get; set; }

        /// <summary>
        /// The salary advance that was paid to the Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryAdvance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SalaryAdvance { get; set; }

        /// <summary>
        /// The foreclosure that been deducted from the salary by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Foreclosure { get; set; }

        /// <summary>
        /// Ennakonpidätys: The taxes that were deducted from the worker salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax { get; set; }

        /// <summary>
        /// Lähdevero: The tax at source that were deducted from the worker salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAtSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxAtSource { get; set; }

        /// <summary>
        /// Net salary after tax - before worker foreclosure or deductions of the side costs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryAfterTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SalaryAfterTax { get; set; }

        /// <summary>
        /// Net salary after tax and foreclosure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryAfterTaxAndForeclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SalaryAfterTaxAndForeclosure { get; set; }

        /// <summary>
        /// Part of the Pension that is taken from the Worker side of the salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pension { get; set; }

        /// <summary>
        /// Workers part of the unemployment insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentInsurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnemploymentInsurance { get; set; }

        /// <summary>
        /// The social security payment. NOT paid as a part of tax withhold .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SocialSecurity { get; set; }

        /// <summary>
        /// The union payment that is deducted from the Worker salarya s per workers request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnionPayment { get; set; }

        /// <summary>
        /// Widthholding tax: The original calulated version - there might not be enough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullTax { get; set; }

        /// <summary>
        /// Tax at source: The original calulated version - there might not be enough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullTaxAtSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullTaxAtSource { get; set; }

        /// <summary>
        /// The salary advance that was paid to the Worker
        /// <br/>The original calulated version - there might not be enough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullSalaryAdvance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullSalaryAdvance { get; set; }

        /// <summary>
        /// Part of the Pension that is taken from the Worker side of the salary.
        /// <br/>The original calulated version - there might not be anough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullPension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullPension { get; set; }

        /// <summary>
        /// Workers part of the unemployment insurance.
        /// <br/>The original calulated version - there might not be anough money to finally pay this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullUnemploymentInsurance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullUnemploymentInsurance { get; set; }

        /// <summary>
        /// The social security payment. NOT paid as a part of tax withhold .
        /// <br/>The original calculted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullSocialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullSocialSecurity { get; set; }

        /// <summary>
        /// The union payment that is deducted from the Worker salarya s per workers request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullUnionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullUnionPayment { get; set; }

        /// <summary>
        /// The sum that is at the end paid to the Worker:
        /// <br/>Salary payment + expenses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWorkerPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalWorkerPayment { get; set; }

        /// <summary>
        /// Total payment using pre Insiders register calculation logic.
        /// <br/>DEPRICATED: This is provided for special scenarios and may be removed without warning
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWorkerPaymentLegacy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalWorkerPaymentLegacy { get; set; }

        /// <summary>
        /// The side costs that are deducted from the Worker salary according to law:
        /// <br/>Pension, Unemployment and Union payment. Tax is not included in this number.
        /// <br/>This is not an official number, really used in the charts etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSideCosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WorkerSideCosts { get; set; }

        /// <summary>
        /// Other deductions that are deducted from the net salary.
        /// <br/>The original calulated version - there might not be enough money to finally deduct this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullOtherDeductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullOtherDeductions { get; set; }

        /// <summary>
        /// Part of the other deductions that are deducted from the net salary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherDeductions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OtherDeductions { get; set; }

        /// <summary>
        /// Prepaid expenses that are deducted from the expenses to be paid to the worker.
        /// <br/>The original calulated version - there might not be enough money to finally deduct this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullPrepaidExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FullPrepaidExpenses { get; set; }

        /// <summary>
        /// Part of the prepaid expenses that are deducted from the expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prepaidExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrepaidExpenses { get; set; }

    }

    /// <summary>
    /// Defines a Calculation row in the calculation results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultRow
    {
        /// <summary>
        /// Row index that matches this row to a user defined row (which is zero-based).
        /// <br/>If the row is generated by calculation business logic (e.g. based on framework agreement), the index is -1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRowIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UserRowIndex { get; set; }

        /// <summary>
        /// Logical type of the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowType? RowType { get; set; }

        /// <summary>
        /// Source of the calculation row - affects how the row is handled in editing / recalculation scenarios.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowSource? RowSource { get; set; }

        /// <summary>
        /// Description text of the row that is shown in reports. If null, will be set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count for the row - default is one
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price for the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Unit for the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowUnit? Unit { get; set; }

        /// <summary>
        /// Total for the row - always Price * Count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// Base salary (Peruspalkka) is the monthly salary or total salary without addiotions (overtime, holidays etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalBaseSalary { get; set; }

        /// <summary>
        /// Gross salary (Bruttopalkka) is "real" salary including the additions (overtime, holidays etc.) but not benefits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalGrossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalGrossSalary { get; set; }

        /// <summary>
        /// Taxable income (Ennakonpidätyksen alainen ansio) is the salary from taxation point-of-view. It is basically the Gross Salary plus benefits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxable { get; set; }

        /// <summary>
        /// Social Security Base (Sosiaaliturvan alainen ansio) is typically the same as TotalTaxable,
        /// <br/>but e.g. child care subsidy (yksityisen hoidon tuki) is handled differently.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSocialSecurityBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalSocialSecurityBase { get; set; }

        /// <summary>
        /// Taxfree expenses compensation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalExpenses { get; set; }

        /// <summary>
        /// Deductions from the salary: Union payment, Advance, Foreclosure
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDeduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalDeduction { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This is a pass-through string that is kept as-is in the Salaxy system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// Period if different than the Period of calculation.
        /// <br/>Will be reported to the National Incomes registry, but also affect some other calculations.
        /// <br/>Note that this property may be (and by default is) null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Accounting related data for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RowAccounting Accounting { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Employer groups that are set on Example calculations. These will be replaced by properties from Worker / Employer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployerGroups
    {
        /// <summary>
        /// If true, the Employer is a private person.
        /// <br/>Otherwise Company or Unknown.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPrivatePerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivatePerson { get; set; }

    }

    /// <summary>
    /// PensionCompany enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PensionCompany
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"etera")]
        Etera = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ilmarinen")]
        Ilmarinen = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"elo")]
        Elo = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"pensionsAlandia")]
        PensionsAlandia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"varma")]
        Varma = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"veritas")]
        Veritas = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"apteekkien")]
        Apteekkien = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"verso")]
        Verso = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaMunicipal")]
        KevaMunicipal = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaAland")]
        KevaAland = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaChurch")]
        KevaChurch = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaKela")]
        KevaKela = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"kevaState")]
        KevaState = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"valio")]
        Valio = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 15,

    }

    /// <summary>
    /// InsuranceCompany enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InsuranceCompany
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"lähiTapiola")]
        LähiTapiola = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"pohjola")]
        Pohjola = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"if")]
        If = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fennia")]
        Fennia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"aVakuutus")]
        AVakuutus = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"aktia")]
        Aktia = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"pohjantähti")]
        Pohjantähti = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"tryg")]
        Tryg = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ålands")]
        Ålands = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"turva")]
        Turva = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"redarnas")]
        Redarnas = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"folksam")]
        Folksam = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"alandia")]
        Alandia = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 15,

    }

    /// <summary>
    /// AgeRange enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgeRange
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"age_15")]
        Age_15 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"age16")]
        Age16 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"age17")]
        Age17 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"age18_52")]
        Age18_52 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"age53_62")]
        Age53_62 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"age63_64")]
        Age63_64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"age65_67")]
        Age65_67 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"age68AndOVer")]
        Age68AndOVer = 8,

    }

    /// <summary>
    /// PensionCalculation enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PensionCalculation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"employee")]
        Employee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneur")]
        Entrepreneur = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"farmer")]
        Farmer = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"partialOwner")]
        PartialOwner = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"athlete")]
        Athlete = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"boardRemuneration")]
        BoardRemuneration = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"smallEntrepreneur")]
        SmallEntrepreneur = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"smallFarmer")]
        SmallFarmer = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"publicSector")]
        PublicSector = 10,

    }

    /// <summary>
    /// PensionRule enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PensionRule
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlyLowerLimit")]
        MonthlyLowerLimit = 1,

    }

    /// <summary>
    /// EmploymentRelationType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentRelationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"salary")]
        Salary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hourlySalary")]
        HourlySalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"monthlySalary")]
        MonthlySalary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"compensation")]
        Compensation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"boardMember")]
        BoardMember = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneur")]
        Entrepreneur = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"farmer")]
        Farmer = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"employedByStateEmploymentFund")]
        EmployedByStateEmploymentFund = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"athlete")]
        Athlete = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"performingArtist")]
        PerformingArtist = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"foreignWorker")]
        ForeignWorker = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"workingAbroad")]
        WorkingAbroad = 12,

    }

    /// <summary>
    /// EmploymentRelationTaxcard enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentRelationTaxcard
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"noTaxCard")]
        NoTaxCard = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"taxAtSource")]
        TaxAtSource = 4,

    }

    /// <summary>
    /// EmploymentRelationSalaryPaymentMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentRelationSalaryPaymentMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"bankAccount")]
        BankAccount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"external")]
        External = 1,

    }

    /// <summary>
    /// IncomeEarnerType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IncomeEarnerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"employedByStateEmploymentFund")]
        EmployedByStateEmploymentFund = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jointOwnerWithPayer")]
        JointOwnerWithPayer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"partialOwner")]
        PartialOwner = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"keyEmployee")]
        KeyEmployee = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"leasedEmployeeLivingAbroad")]
        LeasedEmployeeLivingAbroad = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"personWorkingInFrontierDistrict")]
        PersonWorkingInFrontierDistrict = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"personWorkingAbroad")]
        PersonWorkingAbroad = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"athlete")]
        Athlete = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"performingArtist")]
        PerformingArtist = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"restrictedPeriodInFinland")]
        RestrictedPeriodInFinland = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"netOfTaxContract")]
        NetOfTaxContract = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"organization")]
        Organization = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"personWorkingOnAlandFerry")]
        PersonWorkingOnAlandFerry = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"entrepreneurOrFarmerNoPensionRequired")]
        EntrepreneurOrFarmerNoPensionRequired = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"dimplomaticMission")]
        DimplomaticMission = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"eppo")]
        Eppo = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"lightEntrepreneur")]
        LightEntrepreneur = 16,

    }

    /// <summary>
    /// UnemploymentPayrollLimitStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnemploymentPayrollLimitStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"higher")]
        Higher = 1,

    }

    /// <summary>
    /// WorkerSalarySlipDeliveryMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkerSalarySlipDeliveryMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"payslip")]
        Payslip = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"omapalkka")]
        Omapalkka = 2,

    }

    /// <summary>
    /// Parameters that affect the calculation. EmployerResponsibilities is historical name - currentlty to object holds also other properties that are not well described as responsibilities. These based on the EmployerGroups selection or properties of the Employer and Worker snapshots as well as this Calculation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IEmployerResponsibilities
    {
        /// <summary>
        /// Employer groups that are set on Example calculations.
        /// <br/>These will be replaced by properties from Worker / Employer when these persons are set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployerGroups EmployerGroups { get; set; }

        /// <summary>
        /// Pension is not paid if the salary to this Worker is less than a certain amount in a month (about 60€)
        /// <br/>or worker is less than 17 or more than 64 years old.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noPensionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoPensionPayment { get; set; }

        /// <summary>
        /// If worker is less than 16 or more than 67, social secuiry payment is not paid
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSocialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoSocialSecurity { get; set; }

        /// <summary>
        /// If Worker is less than 17 or more than 64, TVR is not paid.
        /// <br/>Also if the Employer has no accident insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noTvr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoTvr { get; set; }

        /// <summary>
        /// The name of the Pension company because this affects the Pension percentage used in the calculation (only in contract situation).
        /// <br/>It also needs to be shown in the reports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCompany? PensionCompany { get; set; }

        /// <summary>
        /// Pension discount percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionDiscountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionDiscountPercent { get; set; }

        /// <summary>
        /// Customer specific pension percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionPercent { get; set; }

        /// <summary>
        /// Company for the current insurance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InsuranceCompany? InsuranceCompany { get; set; }

        /// <summary>
        /// Percent for calculating the estimate for the accident insurance amount to pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurancePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsurancePercent { get; set; }

        /// <summary>
        /// Percent for calculating the estimate for the group life insurance amount to pay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupLifeInsurancePercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GroupLifeInsurancePercent { get; set; }

        /// <summary>
        /// Accident insurance contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceContractNumber { get; set; }

        /// <summary>
        /// If the Worker is from 53 to 62 years old, more of the Pension payment
        /// <br/>is deducted from the Worker side of the salary (less for the Employer).
        /// <br/>NOTE: People from 63 to 67 years pay the same amount as 17-52 years old.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionOldAgePayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PensionOldAgePayment { get; set; }

        /// <summary>
        /// The employer should have a Pension contract (not a temporary employer).
        /// <br/>It does not necessarily mean that the user has a contract yet.
        /// <br/>NOTE: At the moment, this is not used for calculation - only in the Side costs visualizer tool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionRegularEmployer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PensionRegularEmployer { get; set; }

        /// <summary>
        /// If true, the employer has a Pension contract and makes the payments
        /// <br/>in a monthly schedule which means that Pension interest is calculated for the 20th of the next month.
        /// <br/>Currently, this is only enabled to Etera - other companies will follow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPensionMonthlyContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPensionMonthlyContract { get; set; }

        /// <summary>
        /// If true, the employer pays the Unemployment insurance directly to TVR.
        /// <br/>As of writing, this is true for all companies and with calculations starting 1.8.2018,
        /// <br/>false for households or calculations before the date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnemploymentSelfPayment { get; set; }

        /// <summary>
        /// The assumed salary payment date from the worker perspective.
        /// <br/>The system calculates the nearest possible salary date if no any salary date has been given by the
        /// <br/>employer. If given, the system confirms the given date.
        /// <br/>This date affects the yearly percents used in the salary calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculationPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalculationPaymentDate { get; set; }

        /// <summary>
        /// The age range that is used in the business logic that determines the employer responsibilities.
        /// <br/>This property replaces the EmployerGroups.AgeRange that was previous get/set.
        /// <br/>This is based on WorkerDateOfBirth and CalculationPaymentDate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionAgeRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AgeRange? PensionAgeRange { get; set; }

        /// <summary>
        /// Date of birth for the Worker - this affects the side costs.
        /// <br/>Please also set the DateOfBirthAccuracy, if you set this property.
        /// <br/>If SocialSecurityNumber is set, it will override any value set here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerDateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerDateOfBirth { get; set; }

        /// <summary>
        /// Accuracy of the date of birth
        /// <br/>If SocialSecurityNumber is set, it will override any value set here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerDateOfBirthAccuracy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public DateOfBirthAccuracy? WorkerDateOfBirthAccuracy { get; set; }

        /// <summary>
        /// Pension calculation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCalculation? PensionCalculation { get; set; }

        /// <summary>
        /// Rules (e.g. effect of monthly lower limit) for pension calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionRule? PensionRule { get; set; }

        /// <summary>
        /// Type of the employment relation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationType? EmploymentType { get; set; }

        /// <summary>
        /// Taxcard type from the employment point of view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentTaxcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationTaxcard? EmploymentTaxcard { get; set; }

        /// <summary>
        /// Worker's preferred salary payment method: bank account, external etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationSalaryPaymentMethod? SalaryPaymentMethod { get; set; }

        /// <summary>
        /// Type of additional income earner data by National Incomer Register classification . If several types apply, all of them should be selected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irIncomeEarnerTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IncomeEarnerType> IrIncomeEarnerTypes { get; set; }

        /// <summary>
        /// Sub organization code for the Incomes Registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subOrgCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubOrgCode { get; set; }

        /// <summary>
        /// Employment registration code for Incomes Registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentRegCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentRegCode { get; set; }

        /// <summary>
        /// Tax and social security payments are paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAndSocialSecuritySelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TaxAndSocialSecuritySelfPayment { get; set; }

        /// <summary>
        /// Worker salary and expense payments are paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkerSelfPayment { get; set; }

        /// <summary>
        /// Pension payments are paid directly by the Employer - not by Palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionSelfPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PensionSelfPayment { get; set; }

        /// <summary>
        /// Pension insurance contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionContractNumber { get; set; }

        /// <summary>
        /// Status for indicating whether the total amount of paid salaries exceeds the thresold for higher unemployment insurance percent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unemploymentPayrollLimitStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public UnemploymentPayrollLimitStatus? UnemploymentPayrollLimitStatus { get; set; }

        /// <summary>
        /// Options for the delivery of the payslip to the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salarySlipDeliveryMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<WorkerSalarySlipDeliveryMethod> SalarySlipDeliveryMethods { get; set; }

    }

    /// <summary>
    /// ApiValidationErrorType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiValidationErrorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"required")]
        Required = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 3,

    }

    /// <summary>
    /// Validation errors used in API output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiValidationError
    {
        /// <summary>
        /// Full path to Name of the property / field (Member name in JSON).
        /// <br/>This may be null/empty for type General.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// High level type: Specifies the relation to object and its Member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ApiValidationErrorType Type { get; set; }

        /// <summary>
        /// Validation error message in the requested language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }

        /// <summary>
        /// Validation error long description in the requested language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Some error providers may have a unique technical code for error or validator
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Common base class / interface for data validation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiValidation
    {
        /// <summary>
        /// If true, the data is valid - no errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// If true, has required fields missing data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasAllRequiredFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAllRequiredFields { get; set; }

        /// <summary>
        /// Validation errors on invalid field values.
        /// <br/>Note that required fields missing error messages are not here. Only the invalid values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiValidationError> Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationResult
    {
        /// <summary>
        /// Calculation totals that are common to both Worker and Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalCalculationDTO Totals { get; set; }

        /// <summary>
        /// Rows that are compatible with Incomes Register (tulorekisteri) process.
        /// <br/>These are available only for calculations paid after 7.2.2019 (TODO: estimation as of writing).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irRows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IrRow> IrRows { get; set; }

        /// <summary>
        /// The calculation from the Employer point-of-view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployerCalculationDTO EmployerCalc { get; set; }

        /// <summary>
        /// The calculation from the Worker point-of-view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerCalc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkerCalculationDTO WorkerCalc { get; set; }

        /// <summary>
        /// The result rows. Note that this collection also contains the main Salary entry as one of the rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResultRow> Rows { get; set; }

        /// <summary>
        /// Responsibilities of Employer and parameters that affect those responsibilities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsibilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IEmployerResponsibilities Responsibilities { get; set; }

        /// <summary>
        /// The validation result for the current calculation.
        /// <br/>Please note that this is not serialized into the data storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

    }

    /// <summary>
    /// PaymentChannel enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentChannel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"zeroPayment")]
        ZeroPayment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"external")]
        External = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausManual")]
        PalkkausManual = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausWS")]
        PalkkausWS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausPersonal")]
        PalkkausPersonal = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausInvoices")]
        PalkkausInvoices = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausCfaPaytrail")]
        PalkkausCfaPaytrail = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausCfaReference")]
        PalkkausCfaReference = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausCfaFinvoice")]
        PalkkausCfaFinvoice = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausEcfaPaytrail")]
        PalkkausEcfaPaytrail = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausEcfaReference")]
        PalkkausEcfaReference = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausEcfaFinvoice")]
        PalkkausEcfaFinvoice = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"palkkausCfaTest")]
        PalkkausCfaTest = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"accountorGo")]
        AccountorGo = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"talenomOnline")]
        TalenomOnline = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"talenomCfa")]
        TalenomCfa = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"holviCfa")]
        HolviCfa = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"finagoSolo")]
        FinagoSolo = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"procountor")]
        Procountor = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"kevytyrittaja")]
        Kevytyrittaja = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"vismaNetvisor")]
        VismaNetvisor = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"askelma")]
        Askelma = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"briox")]
        Briox = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"lemonaid")]
        Lemonaid = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"laskupiste")]
        Laskupiste = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"passeliMerit")]
        PasseliMerit = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"odoo")]
        Odoo = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"ecom")]
        Ecom = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"holvi")]
        Holvi = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"kompassi")]
        Kompassi = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"domus")]
        Domus = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"kitsas")]
        Kitsas = 33,

    }

    /// <summary>
    /// Informational object that stores data about the salary calculation / payment that is not directly related to calculating the salary.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcInfo
    {
        /// <summary>
        /// Start date of the work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkStartDate { get; set; }

        /// <summary>
        /// End date of the work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkEndDate { get; set; }

        /// <summary>
        /// Description of the work for reporting purposes. Max 32 chars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkDescription { get; set; }

        /// <summary>
        /// Message from worker to employer - when worker sends the salary calculation to the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerMessage { get; set; }

        /// <summary>
        /// Message which will be displayed in the payslip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salarySlipMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalarySlipMessage { get; set; }

        /// <summary>
        /// Payment reference number in payment service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Original Payment reference number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalPaymentId { get; set; }

        /// <summary>
        /// Channel that is used for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? PaymentChannel { get; set; }

        /// <summary>
        /// Application id for invoicing etc. purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The MessageThread Id, if this calculation is referred in a message thread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageThreadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageThreadId { get; set; }

        /// <summary>
        /// Assumed earnings payment report date for the report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Notes related to the payment and other backoffice operations:
        /// <br/>For example the justification why the sum is in calculation vs. Paytrail payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backofficeNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackofficeNotes { get; set; }

        /// <summary>
        /// Occupation classification, used at least for Accident insurance purposes, but may be used for other reporting.
        /// <br/>For Finnish Salaries use the Statistics Finland
        /// <br/>"Classification of Occupations 2010" (TK10): https://www.stat.fi/meta/luokitukset/ammatti/017-2018-05-15/index_en.html
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode { get; set; }

        /// <summary>
        /// Secondary occupation classification. Some earnings payment reports may require two occupation codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode2 { get; set; }

        /// <summary>
        /// Calculated pension insurance payment date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionPaymentDate { get; set; }

        /// <summary>
        /// Pension insurance reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPaymentRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionPaymentRef { get; set; }

        /// <summary>
        /// Pension insurance payment specifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPaymentSpecifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionPaymentSpecifier { get; set; }

        /// <summary>
        /// The Payroll Id, if this calculation is part of a Payroll list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrollId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayrollId { get; set; }

        /// <summary>
        /// Cost center for reporting purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costCenter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CostCenter { get; set; }

        /// <summary>
        /// Identifier of the worker in a source system. Used in imports etc.
        /// <br/>This is automatically set from the source id of the employment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerSourceId { get; set; }

        /// <summary>
        /// Identifier of the calculation in a source system. Used in imports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

    }

    /// <summary>
    /// SharingUriType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SharingUriType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"url")]
        Url = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"employer")]
        Employer = 2,

    }

    /// <summary>
    /// Defines the properties related to sharing and sending of the calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationSharing
    {
        /// <summary>
        /// Type of sharing for this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SharingUriType? Type { get; set; }

        /// <summary>
        /// Sharing uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Email address to which the calculation was shared last time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastSharedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastSharedTo { get; set; }

        /// <summary>
        /// Email address which the calculation was shared as cc last time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastSharedCc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastSharedCc { get; set; }

        /// <summary>
        /// Last shared message to the employer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastSharedMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastSharedMessage { get; set; }

    }

    /// <summary>
    /// Contains calculation specific data for accounting (both cost and financial accounting).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationAccounting
    {
        /// <summary>
        /// Special flags for account number mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AccountNumberFlags { get; set; }

        /// <summary>
        /// Values for cost accounting dimensions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CostAccountingDimension> Dimensions { get; set; }

    }

    /// <summary>
    /// WageBasis enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WageBasis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"monthly")]
        Monthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hourly")]
        Hourly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"performanceBased")]
        PerformanceBased = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 4,

    }

    /// <summary>
    /// HolidayCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HolidayCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"permanent14Days")]
        Permanent14Days = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"permanent35Hours")]
        Permanent35Hours = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"temporaryTimeOff")]
        TemporaryTimeOff = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayCompensation")]
        HolidayCompensation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"holidayCompensationIncluded")]
        HolidayCompensationIncluded = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"noHolidays")]
        NoHolidays = 6,

    }

    /// <summary>
    /// HolidayBonusPaymentMethod enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HolidayBonusPaymentMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"payForHolidaySalary")]
        PayForHolidaySalary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"paySummerBonus")]
        PaySummerBonus = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"pay24Days")]
        Pay24Days = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"payAllBonus")]
        PayAllBonus = 4,

    }

    /// <summary>
    /// Extends the Holiday specification with the properties of employment relation that are required for a specific year.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidaySpecificationForYear
    {
        /// <summary>
        /// Wage basis for a Holiday Year.
        /// <br/>When this is changed, you need to make a rerun to the previous calculations in the holiday year.
        /// <br/>NOTE: This is not in HolidaySpecification because, the same value is stored in Employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WageBasis? WageBasis { get; set; }

        /// <summary>
        /// Employment period for the purposes of holiday calculation (annual leave accrual).
        /// <br/>When this is changed, you need to make a rerun to the previous calculations in the holiday year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange EmploymentPeriod { get; set; }

        /// <summary>
        /// Defines how the holidays are handled for the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayCode? Code { get; set; }

        /// <summary>
        /// Defines the number of holidays that the worker is entitled per month worked.
        /// <br/>If the value is set to 0 (default), the number is 2 for first year and 2,5 thereafter as defined in the law.
        /// <br/>To actually se the daysPerMonth to zero, use code value other than Permanent14Days or Permanent35Hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accrualFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AccrualFixed { get; set; }

        /// <summary>
        /// Holiday compensation as percent of salary (11.5% is 0.115)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Compensation { get; set; }

        /// <summary>
        /// Method for paying holiday bonus in this salary calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayBonusPaymentMethod? BonusMethod { get; set; }

        /// <summary>
        /// Holiday bonus for the worker (lomaraha, lomaltapaluuraha).
        /// <br/>Typically 0.5 for 50%.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bonus { get; set; }

    }

    /// <summary>
    /// Period recalculation parameters that are related to Monthly salary. Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcMonthlyData
    {
        /// <summary>
        /// If true the Monthly (weekly) calculation is being applied to absences and holidays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMonthly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMonthly { get; set; }

        /// <summary>
        /// Monthly salary in holiday and absences calculation.
        /// <br/>Typically, the same as the actual monthly calculation, but may be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monthlySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MonthlySalary { get; set; }

        /// <summary>
        /// Price for a single absence day. Typically based on MonthlySalary, but may be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absencesDaySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsencesDaySalary { get; set; }

    }

    /// <summary>
    /// Holiday calculation based on hourly salary OR performance based salaries. May also contain other data related to working hours.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcHourlyData
    {
        /// <summary>
        /// If true, the hourly / performance based calculation is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHourly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHourly { get; set; }

    }

    /// <summary>
    /// Holiday Bonus data that is stored into a Salary calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcHolidayBonus
    {
        /// <summary>
        /// Number of yearly leave days. This is for the purposes of calculating the Bonus,
        /// <br/>so this is yearly salary days, not the complete saldo (including StartSaldo).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("yearlyLeaveDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? YearlyLeaveDays { get; set; }

        /// <summary>
        /// Total yearly holiday salary for the purposes of holiday bonus.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalHolidaySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalHolidaySalary { get; set; }

        /// <summary>
        /// The sum of holiday bonus that has already been paid this year.
        /// <br/>The payment is never so big that this would become more than BonusTotalHolidaySalary
        /// <br/>(by this calculation - the limit can be exceeded manually).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alreadyPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AlreadyPaid { get; set; }

    }

    /// <summary>
    /// AbsenceCauseCode enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AbsenceCauseCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unpaidLeave")]
        UnpaidLeave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"personalReason")]
        PersonalReason = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"illness")]
        Illness = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"partTimeSickLeave")]
        PartTimeSickLeave = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"parentalLeave")]
        ParentalLeave = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"specialMaternityLeave")]
        SpecialMaternityLeave = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"rehabilitation")]
        Rehabilitation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"childIllness")]
        ChildIllness = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"partTimeChildCareLeave")]
        PartTimeChildCareLeave = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"training")]
        Training = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"jobAlternationLeave")]
        JobAlternationLeave = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"studyLeave")]
        StudyLeave = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"industrialAction")]
        IndustrialAction = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"interruptionInWorkProvision")]
        InterruptionInWorkProvision = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"leaveOfAbsence")]
        LeaveOfAbsence = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"militaryRefresherTraining")]
        MilitaryRefresherTraining = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"militaryService")]
        MilitaryService = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"layOff")]
        LayOff = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"childCareLeave")]
        ChildCareLeave = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"midWeekHoliday")]
        MidWeekHoliday = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"accruedHoliday")]
        AccruedHoliday = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"occupationalAccident")]
        OccupationalAccident = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"annualLeave")]
        AnnualLeave = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"partTimeAbsenceDueToRehabilitation")]
        PartTimeAbsenceDueToRehabilitation = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 25,

    }

    /// <summary>
    /// Period of absence
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbsencePeriod
    {
        /// <summary>
        /// Period for the absance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Cause / type of the absence
        /// </summary>
        [Newtonsoft.Json.JsonProperty("causeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AbsenceCauseCode? CauseCode { get; set; }

        /// <summary>
        /// If true, the absence is paid by the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPaid { get; set; }

        /// <summary>
        /// If true, annual leaves are accrued from the absence. If false, these days are deducted from the accrual.
        /// <br/>By default, you may leave this null and it always follows the IsPaid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHolidayAccrual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHolidayAccrual { get; set; }

        /// <summary>
        /// Amount of salary that is paid for the absense.
        /// <br/>Currently not in use: Would be used in Incomes Register integration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This is a pass-through string that is passed to the result calculations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

    }

    /// <summary>
    /// Holiday Accrual for a calendar month in releation to a calculation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonthlyHolidayAccrual
    {
        /// <summary>
        /// First day of month for the holiday month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Month { get; set; }

        /// <summary>
        /// Holiday accrual for this month.
        /// <br/>Note that -1 is indication that accrual should not be updated for this particylar month.
        /// <br/>There is no possiblity for negative accrual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daysAccrued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DaysAccrued { get; set; }

        /// <summary>
        /// Number of absence days used in the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absencesDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsencesDays { get; set; }

        /// <summary>
        /// Work days in determining the accrual for the month in 14 days rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WorkDays { get; set; }

        /// <summary>
        /// Work hours in determining the accrual fot the month in 35 hour rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WorkHours { get; set; }

    }

    /// <summary>
    /// Worktime data that is stored as part of Salary calculation: work days, absences, holidays and holiday accrual. In the future may also contain relevant part of timesheet data (work hours).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalcWorktime
    {
        /// <summary>
        /// Specification for the holiday calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidaySpec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidaySpecificationForYear HolidaySpec { get; set; }

        /// <summary>
        /// Employment period that is updated from employment at each recalculation (as opposed to holiday specification).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange EmploymentPeriod { get; set; }

        /// <summary>
        /// Parameters related to Monthly salary.
        /// <br/>Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monthly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcMonthlyData Monthly { get; set; }

        /// <summary>
        /// Parameters related to Hourly or Performance based salary.
        /// <br/>Could theoretically be used for other long periods, namely Weekly salary, but that is not actively supported or tested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hourly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcHourlyData Hourly { get; set; }

        /// <summary>
        /// Parameters related to Holiday Bonus.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcHolidayBonus Bonus { get; set; }

        /// <summary>
        /// Number of days of non-paid absences.
        /// <br/>These are deducted from the Monthly salary, not from Hourly salary at the moment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absencesDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AbsencesDays { get; set; }

        /// <summary>
        /// Number of days of paid absences,  e.g. paid sick leave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paidAbsencesDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PaidAbsencesDays { get; set; }

        /// <summary>
        /// Periods of 'absences' which are paid, e.g. paid sick leave.
        /// <br/>These are deducted from the Monthly salary, not from Hourly salary at the moment.
        /// <br/>Additionally corresponding row type e.g. MonthlySickLeave is added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paidAbsencesPeriods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AbsencePeriod> PaidAbsencesPeriods { get; set; }

        /// <summary>
        /// Accruals for each calendar month in this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accruals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MonthlyHolidayAccrual> Accruals { get; set; }

        /// <summary>
        /// Number of paid Leave days that is paid in this salary calculation / for this period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leavesDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LeavesDays { get; set; }

        /// <summary>
        /// Price for a single holiday day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leavesDailySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LeavesDailySalary { get; set; }

        /// <summary>
        /// Describes the working days in the period.
        /// <br/>Currently, uses the DaysCount, but later the full days array will be taken to use.
        /// <br/>This includes the absence days (divider in AbsencesDaySalary).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange WorkDays { get; set; }

    }

    /// <summary>
    /// BootstrapStyle enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BootstrapStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"success")]
        Success = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"info")]
        Info = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"danger")]
        Danger = 5,

    }

    /// <summary>
    /// WorkflowEventFeatures enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkflowEventFeatures
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"isActive")]
        IsActive = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"isEditable")]
        IsEditable = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"isRemovable")]
        IsRemovable = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"isOnHold")]
        IsOnHold = 4,

    }

    /// <summary>
    /// Event in the workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowEvent
    {
        /// <summary>
        /// Event-provider specific identifier for the event.
        /// <br/>For deletable events, this should identify , but do NOT trust this to be 100% unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Type of the event. This typically maps to parent-object specific enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Message for backoffice purposes from the User or system that created the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// User Interface styling of the event: Indicates the severity for the end-user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ui", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public BootstrapStyle? Ui { get; set; }

        /// <summary>
        /// Features for this event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<WorkflowEventFeatures> Features { get; set; }

        /// <summary>
        /// UTC time for when the event occured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>
        /// User or system that created the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        /// <summary>
        /// Credential of the user which is responsible of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssignedTo { get; set; }

        /// <summary>
        /// Record attached to this event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("record", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Record { get; set; }

    }

    /// <summary>
    /// Defines the data that IWorkflowItem must provide.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowData
    {
        /// <summary>
        /// Workflow events for the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowEvent> Events { get; set; }

    }

    /// <summary>
    /// Calculation is the most important model in the Palkkaus.fi API. We suggest you open the separately provided documentation and especially the class diagram to understand the whole model in detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Calculation
    {
        /// <summary>
        /// The employer object for this calculation.
        /// <br/>Typically, you do not need to set this before the actual payment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcEmployer Employer { get; set; }

        /// <summary>
        /// The Worker (employee) that has performed the work.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorker Worker { get; set; }

        /// <summary>
        /// Information about the workflow and state of the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorkflow Workflow { get; set; }

        /// <summary>
        /// The main salary element.
        /// <br/>Alternatively the salary can be set in the Rows object - this will be the only way to set multiple salary rows (not yet supported).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Salary Salary { get; set; }

        /// <summary>
        /// Set of rows that make up the salary calculation:
        /// <br/>Expenses, Benefits, deductions etc. Note that side costs are not rows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDefinedRow> Rows { get; set; }

        /// <summary>
        /// DEPRECIATED: Usecase will be replacing this functionality in a next major release.
        /// <br/>The Framework Agreement (TES) parameters that affect the framework based side costs etc. of this calculation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("framework", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TesParameters Framework { get; set; }

        /// <summary>
        /// A usecase for creating and editing salary calculations.
        /// <br/>In practice, a usecase is either a user interface or a microservice that provides a salary calculation
        /// <br/>and it may be implemented outside Salaxy.
        /// <br/>Provides the possibility to store useacase specific data as part of calculation.
        /// <br/>NOTE: This functionality will replace Framework property in a next major release.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// The results of the calculation. In the API, this is a read-only object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationResult Result { get; set; }

        /// <summary>
        /// Information about the work that is not directly related to calculating salary and expenses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcInfo Info { get; set; }

        /// <summary>
        /// Sharing of the calculation. This object cannot be modified directly,
        /// <br/>use specialized methods in Calculations service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationSharing Sharing { get; set; }

        /// <summary>
        /// Contains calculation specific data for accounting (both cost and financial accounting).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationAccounting Accounting { get; set; }

        /// <summary>
        /// Worktime data that is stored as part of Salary calculation:
        /// <br/>work days, absences, holidays and holiday accrual.
        /// <br/>In the future may also contain relevant part of timesheet data (work hours).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worktime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalcWorktime Worktime { get; set; }

        /// <summary>
        /// Readonly workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// ApiValidation object that is specialized for list items. Provides if and index properties for connecting a validation to a specific item in the list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiListItemValidation
    {
        /// <summary>
        /// Identifier of the item this validation is for.
        /// <br/>Identifiers are not always available (if the item has not been saved), so index is a more generic approach.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Zero based index of the item this validation is for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Index { get; set; }

        /// <summary>
        /// If true, the data is valid - no errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// If true, has required fields missing data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasAllRequiredFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAllRequiredFields { get; set; }

        /// <summary>
        /// Validation errors on invalid field values.
        /// <br/>Note that required fields missing error messages are not here. Only the invalid values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiValidationError> Errors { get; set; }

    }

    /// <summary>
    /// CalendarActionType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CalendarActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"display")]
        Display = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"createItem")]
        CreateItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"script")]
        Script = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentDate")]
        PaymentDate = 6,

    }

    /// <summary>
    /// Describes the calendar attendees in an avatar-visualization compatible way.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarAttendee
    {
        /// <summary>
        /// Account or Credentials uri IF the attendee is a Palkkaus.fi account. Otherwise null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// The display name of the attendee (CN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The E-mail address of the person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Entity type: person/company. In calendar attendees, defaults to Person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public LegalEntityType? EntityType { get; set; }

        /// <summary>
        /// Type of the Avatar picture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pictureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AvatarPictureType? PictureType { get; set; }

        /// <summary>
        /// Color - currently only used by type Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Initials - used by PictureType Icon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Initials { get; set; }

        /// <summary>
        /// URL of the picture if specified as picture (null in a case of type Icon)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Attachment for calendar event or Action/Alarm.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarAttachment
    {
        /// <summary>
        /// URI of the attachment. This is the default way of specifying attachments.
        /// <br/>TODO: Check if the Uri data type works in API. If not, switch to string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Attachment as inline data. Encoded with ValueEncoding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The file format type / mime type (e.g. "text/plain").
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formatType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatType { get; set; }

        /// <summary>
        /// Encoding for the inline data.
        /// <br/>TODO: Consider making read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueEncoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueEncoding { get; set; }

    }

    /// <summary>
    /// Salaxy calendar action is an extension to iCalendar Alarms: It supports the standard alarms: Display, Email and Audio, but also salaxy action scripts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarAction
    {
        /// <summary>
        /// Unique identifier in the Salaxy context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Action type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalendarActionType? Type { get; set; }

        /// <summary>
        /// Summary text for the action. Subject for E-mail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// Description text for the action. Body text for Email, Notification message for Display.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Attendees are E-mail receivers for Email Alert and potentially Display notifications in the future.
        /// <br/>Script actions may also later use them when credentials, accounts or similar are needed fro execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attendees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalendarAttendee> Attendees { get; set; }

        /// <summary>
        /// Attachment files for the action. Attachments for E-mail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalendarAttachment> Attachments { get; set; }

        /// <summary>
        /// The duration trigger. Either this or TriggerDateTime must specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggerDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TriggerDuration { get; set; }

        /// <summary>
        /// The fixed date-time trigger. Only used if, Duration is not available.
        /// <br/>NOTE that Salaxy implements this feature a bit differently than rfc-5545: The spec says that for a repeating event,
        /// <br/>the alarm should trigger only once (+repeat), but current Salaxy implementation would trigger the alarm the amount of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggerDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TriggerDateTime { get; set; }

        /// <summary>
        /// If specified, the action repeats number of times (in addition to the initial trigger) specified in this parameter with RepeatDuration values.
        /// <br/>If Repeat is more than 0, also RepeatDuration must be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repeat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Repeat { get; set; }

        /// <summary>
        /// Time between the repeats aftern the initial repeat.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repeatDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepeatDuration { get; set; }

    }

    /// <summary>
    /// Defines the automation aspect of API objects: Recurrence / Scheduling and Actions (Alarms in ICalendar).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiAutomation
    {
        /// <summary>
        /// Returns true, if the item is recurring
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRecurring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRecurring { get; set; }

        /// <summary>
        /// Identifier of a template (potentially a recurring item) that this object is occurence of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occurenceOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccurenceOf { get; set; }

        /// <summary>
        /// Gets or sets the recurrence rules to set the recurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recurrenceRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RecurrenceRules { get; set; }

        /// <summary>
        /// For a recurring event, gets or sets the rules for the recurring actions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalendarAction> ActionRules { get; set; }

    }

    /// <summary>
    /// Input that user defines about the Payroll
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayrollInput
    {
        /// <summary>
        /// Title that can be specified by the end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The Default Salary period for the Payroll.
        /// <br/>This may be overriden for an individual calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// The requested date for the SalaryDate from the employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalaryDate { get; set; }

        /// <summary>
        /// Defines the re-setting of the salary date in the calculation re-calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDateKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public SalaryDateKind? SalaryDateKind { get; set; }

        /// <summary>
        /// Channel that is used for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? PaymentChannel { get; set; }

        /// <summary>
        /// What types of wages are paid with this payroll.
        /// <br/>May affect the rendering of the user interface (e.g. for holidays, hours and absences).
        /// <br/>Also affects which Workers are show in the add / link dialog by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WageBasis? WageBasis { get; set; }

        /// <summary>
        /// If true, the calculation rows are not updated from employment when the Payroll is copied.
        /// <br/>Default is that the rows and other data is updated in copy / create new etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noUpdateFromEmployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoUpdateFromEmployment { get; set; }

        /// <summary>
        /// If the Payroll is based on a template, this is the identifier of the template.
        /// <br/>The field can be manually set to null / ID to break / reconnect that connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        /// <summary>
        /// List of calculations that are attached to this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Calculations { get; set; }

        /// <summary>
        /// Identifier of the payroll in a source system. Used in imports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

    }

    /// <summary>
    /// PayrollStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PayrollStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentStarted")]
        PaymentStarted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentSucceeded")]
        PaymentSucceeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentCanceled")]
        PaymentCanceled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"paymentError")]
        PaymentError = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"waitingApproval")]
        WaitingApproval = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"handled")]
        Handled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"template")]
        Template = 7,

    }

    /// <summary>
    /// Provides Read-only information about the Payroll In the case of non-paid Payrolls, this is the latest save/validation. In the case of paid Payrolls, this is the status of the Payroll when it was paid.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payroll03Info
    {
        /// <summary>
        /// Date that the Info was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// Count of calculations in this Payroll
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CalcCount { get; set; }

        /// <summary>
        /// Total gross salary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalGrossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalGrossSalary { get; set; }

        /// <summary>
        /// Total payment for the Payroll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPayment { get; set; }

        /// <summary>
        /// Total Palkkaus.fi fees for the Payroll
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fees { get; set; }

        /// <summary>
        /// If true, all calculations have been validated and they are valid for payment.
        /// <br/>If false, validation has not been done or some calculations are not valid for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadyForPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadyForPayment { get; set; }

        /// <summary>
        /// Status for the payroll and its calculations in the payment Workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PayrollStatus? Status { get; set; }

        /// <summary>
        /// Due date for the payroll. Date when the payment should be made to achieve SalaryDate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DueDate { get; set; }

        /// <summary>
        /// Paid at date for the payroll. (Date of the employer's payment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentDate { get; set; }

        /// <summary>
        /// The estimated date when the salary is withdrawable by the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalaryDate { get; set; }

        /// <summary>
        /// The reference number of the payment after payment is made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Original Payment reference number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalPaymentId { get; set; }

        /// <summary>
        /// Application id for invoicing etc. purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The MessageThread Id, if this payroll is referred in a message thread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageThreadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageThreadId { get; set; }

    }

    /// <summary>
    /// New version 03 of Payroll. Payroll (Palkkalista) is a list of employees who receive salary or wages from a particular organization. Typical usecase is that a a company has e.g. a monthly salary list that is paid at the end of month. For next month, a copy is then made from the latest list and the copy is potentially modified with the changes of that particular month.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayrollDetails
    {
        /// <summary>
        /// Snapshots of the calculations based on the ID's specified in Info
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Calculation> Calcs { get; set; }

        /// <summary>
        /// When saved or validated, provides a validation object for each calculation:
        /// <br/>Whether the calculations are ready for payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiListItemValidation> Validations { get; set; }

        /// <summary>
        /// A usecase for creating and editing Payroll lists.
        /// <br/>In practice, a usecase is either a user interface or a microservice that provides a Payroll processing
        /// <br/>and it may be implemented outside Salaxy.
        /// <br/>Provides the possibility to store useacase specific data as part of the Payroll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// The workflow data for manual editing and approval purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Stores the data for automation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiAutomation Automation { get; set; }

        /// <summary>
        /// Input that defines the Payroll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayrollInput Input { get; set; }

        /// <summary>
        /// General summary information about the Payroll and when it was las processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payroll03Info Info { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// WorktimeImportStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorktimeImportStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"uploaded")]
        Uploaded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"parsed")]
        Parsed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"processing")]
        Processing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"processed")]
        Processed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 5,

    }

    /// <summary>
    /// For Worktime information, general data about how the import should be performed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorktimeImportHeader
    {
        /// <summary>
        /// Status of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WorktimeImportStatus? Status { get; set; }

        /// <summary>
        /// Title of the import, also used as title in the target Payroll
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Defines the identifier for Payroll into which the data should be added (as calculations).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrollId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayrollId { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This may be used by the parsing or processing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// Target salary date for the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalaryDate { get; set; }

        /// <summary>
        /// The period for the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

    }

    /// <summary>
    /// Worktime import row extends User defined row with employment relation basic info: EmploymentId or PersonalId/EmploymentType combination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorktimeImportRow
    {
        /// <summary>
        /// Identifier for the employment relation. Either Employment ID or Personal ID is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Personal ID is an alternative way of defining the Employment relation.
        /// <br/>Either Employment ID or Personal ID should is required. If both are provided, Employment ID is used.
        /// <br/>Fetching employment relation also checks for Employment type if provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Type of employment relation. Used if Personal ID is provided without Employment ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationType? EmploymentType { get; set; }

        /// <summary>
        /// Validation information for the object (after validation / preview / import, before that it is null).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

        /// <summary>
        /// Zero based row index that can be used to match the row to result rows or when deleting.
        /// <br/>NOTE: The Row ID is given values on the fly so setting this will not have any effect at the moment.
        /// <br/>It may reorder the entries in later implementations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RowIndex { get; set; }

        /// <summary>
        /// Logical type of the row.
        /// <br/>This is preferably a value from enum CalculationRowType, but mey be some other parseable string that the import logic handles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowType { get; set; }

        /// <summary>
        /// Status of the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WorktimeImportRowStatus? Status { get; set; }

        /// <summary>
        /// Description text of the row that is shown in reports. If null, will be set according to type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Count for the row - default is one
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Count { get; set; }

        /// <summary>
        /// Price for the row
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Unit for the row. Guessed based on the RowType and count, but you are better off setting it to be sure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowUnit? Unit { get; set; }

        /// <summary>
        /// Source of the calculation row - affects how the row is handled in editing / recalculation scenarios.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationRowSource? Source { get; set; }

        /// <summary>
        /// Identifier in the source system is a key defined by a source system / partner system.
        /// <br/>This is a pass-through string that is passed to the result calculations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// Accounting related data for the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RowAccounting Accounting { get; set; }

        /// <summary>
        /// Period for the calculation row. This is mainly used for absences (AbsencePeriod row type), leaves and holidays (HolidaySalary, HolidayBonus and HolidayCompensation).
        /// <br/>Note that this property may be (and by default is) null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Usecase specific data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

    }

    /// <summary>
    /// Language enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Language
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 3,

    }

    /// <summary>
    /// Contains values that are needed when creating an employment, but where changing is restricted in the future: E.g. names and personalId are required when creating a new employment, but once a calculation is created (or at least paid), editing of theses is no longer possible. See the editing rules for individual properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentIdentity
    {
        /// <summary>
        /// First name of the Worker. Value is required when creating a new employment, it cannot be modified after initial create:
        /// <br/>Instead you should just delete the Worker (only allowed if no paid salaries etc.) and create a new one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of the worker. Editing rules are the same as with FirstName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// Personal ID (hetu) of the worker (currently required). Editing rules are the same as with FirstName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalId { get; set; }

        /// <summary>
        /// Avatar picture. If set, this is used in avatar instead of Initials (automatic FirstName/LastName) and color.
        /// <br/>May be changed until the Worker registers to the service. After this, the Worker can upload their own image or choose to remove the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarImg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvatarImg { get; set; }

        /// <summary>
        /// Avatar color for visual icon together with initials. Use web compatible rgb values, e.g. "#FF00FF" or "rgb(255, 0, 255)".
        /// <br/>Editing rules are the same as with AvatarImg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Language of the user in user interfaces and print-outs (most significantly the salary slip).
        /// <br/>Editing rules are the same as with AvatarImg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Language? Language { get; set; }

    }

    /// <summary>
    /// Describes the work that is being performed - mainly for Employment relation purposes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkDescription
    {
        /// <summary>
        /// Free text description of the work that is being performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Occupation classification, used at least for Accident insurance purposes, but may be used for other reporting.
        /// <br/>For Finnish Salaries use the Statistics Finland
        /// <br/>"Classification of Occupations 2010" (TK10): https://www.stat.fi/meta/luokitukset/ammatti/017-2018-05-15/index_en.html
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode { get; set; }

        /// <summary>
        /// Secondary occupation classification. Some earnings payment reports may require two occupation codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupationCode2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OccupationCode2 { get; set; }

        /// <summary>
        /// Contains default calculation rows for the worker.
        /// <br/>Typically used for setting for example monthly salary or hourly salary price for workers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDefaults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDefinedRow> SalaryDefaults { get; set; }

        /// <summary>
        /// Default bases for wage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wageBasis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public WageBasis? WageBasis { get; set; }

        /// <summary>
        /// Number of hours per month defined in the employment contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monthlyHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MonthlyHours { get; set; }

        /// <summary>
        /// Contains calculation specific data for accounting (both cost and financial accounting).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationAccounting Accounting { get; set; }

    }

    /// <summary>
    /// EmploymentRelationStatus enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmploymentRelationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"secondaryCurrent")]
        SecondaryCurrent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 3,

    }

    /// <summary>
    /// General information about the Employment relation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentRelationInfo
    {
        /// <summary>
        /// The Account ID of the Worker if Worker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerAccountId { get; set; }

        /// <summary>
        /// Identifier in a source system. Used in imports etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }

        /// <summary>
        /// User friendly employment relation type that is used to set other more technical types and Incomes Registry properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationType? Type { get; set; }

        /// <summary>
        /// The bank account number for salary payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

        /// <summary>
        /// Type of additional income earner data by National Incomer Register classification . If several types apply, all of them should be selected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("irIncomeEarnerTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<IncomeEarnerType> IrIncomeEarnerTypes { get; set; }

        /// <summary>
        /// Type for the pension insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCalculation? PensionCalculation { get; set; }

        /// <summary>
        /// Rules (e.g. effect of monthly lower limit) for pension calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionRule? PensionRule { get; set; }

        /// <summary>
        /// The id of the pension company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCompany? PensionCompany { get; set; }

        /// <summary>
        /// The pension contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PensionContractNumber { get; set; }

        /// <summary>
        /// The id of the insurance company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InsuranceCompany? InsuranceCompany { get; set; }

        /// <summary>
        /// The accident insurance contract number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceContractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceContractNumber { get; set; }

        /// <summary>
        /// Taxcard type from the employment point of view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationTaxcard? Taxcard { get; set; }

        /// <summary>
        /// Status of this employment relationship
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationStatus? Status { get; set; }

        /// <summary>
        /// Worker's preferred salary payment method: bank account, external etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationSalaryPaymentMethod? SalaryPaymentMethod { get; set; }

        /// <summary>
        /// Start date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartDate { get; set; }

        /// <summary>
        /// End date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndDate { get; set; }

        /// <summary>
        /// Duration of the employment. If true, the employment relation is for a fixed term.
        /// <br/>Otherwise (which is the default) the employment relation continues until further notice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFixedTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixedTerm { get; set; }

        /// <summary>
        /// Indicates that the employment relation has been terminated.
        /// <br/>Saving with this status also makes the employment relation Archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTerminated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTerminated { get; set; }

        /// <summary>
        /// Employment registration code for Incomes Registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentRegCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentRegCode { get; set; }

    }

    /// <summary>
    /// ContactType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContactType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"workerAccount")]
        WorkerAccount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"employerOverride")]
        EmployerOverride = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"foreign")]
        Foreign = 3,

    }

    /// <summary>
    /// Country enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ae")]
        Ae = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"at")]
        At = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ba")]
        Ba = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"by")]
        By = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"cn")]
        Cn = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"eg")]
        Eg = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"gg")]
        Gg = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ie")]
        Ie = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"in")]
        In = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"je")]
        Je = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"kr")]
        Kr = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"lk")]
        Lk = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"lv")]
        Lv = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"me")]
        Me = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"mx")]
        Mx = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"no")]
        No = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"pk")]
        Pk = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"rs")]
        Rs = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"sg")]
        Sg = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"th")]
        Th = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"us")]
        Us = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"vg")]
        Vg = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"zm")]
        Zm = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"am")]
        Am = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"au")]
        Au = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"bb")]
        Bb = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"bm")]
        Bm = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"cy")]
        Cy = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"dk")]
        Dk = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"gb")]
        Gb = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"gr")]
        Gr = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"il")]
        Il = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"jp")]
        Jp = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"ky")]
        Ky = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"lt")]
        Lt = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"ma")]
        Ma = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"mk")]
        Mk = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"nz")]
        Nz = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"si")]
        Si = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"tj")]
        Tj = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"tz")]
        Tz = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"uy")]
        Uy = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"vn")]
        Vn = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"br")]
        Br = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"ch")]
        Ch = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"cz")]
        Cz = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"ee")]
        Ee = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"ge")]
        Ge = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"hk")]
        Hk = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"im")]
        Im = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"kg")]
        Kg = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"kz")]
        Kz = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"lu")]
        Lu = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"md")]
        Md = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"mt")]
        Mt = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"ph")]
        Ph = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"se")]
        Se = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"tm")]
        Tm = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"ua")]
        Ua = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"uz")]
        Uz = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"za")]
        Za = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 82,

    }

    /// <summary>
    /// Advanced contact information with strongly typed country and type information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAdvanced
    {
        /// <summary>
        /// Type of contact when specification allows several contacts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public ContactType? Type { get; set; }

        /// <summary>
        /// Contact e-mail address. Always lower invariant, trimmed and empty string set to null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Street address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        /// <summary>
        /// City or community (postitoimipaikka)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Country as defined as
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Country? Country { get; set; }

        /// <summary>
        /// Name of the country as free text if Country is Other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOtherName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryOtherName { get; set; }

    }

    /// <summary>
    /// Employment information that may be coming in as part of Worktime import. Typically, these would be used only when creating a new employment. Perhaps some contact information is updated later depending on the import logic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorktimeImportEmployment
    {
        /// <summary>
        /// Contains values that are needed when creating an employment, but where changing is restricted in the future:
        /// <br/>E.g. names and personalId are required when creating a new employment, but once a calculation is created (or at least paid),
        /// <br/>editing of theses is no longer possible. See the editing rules for individual properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentIdentity Identity { get; set; }

        /// <summary>
        /// Describes the work that is being performed in this Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("work", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkDescription Work { get; set; }

        /// <summary>
        /// General information about the Employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentRelationInfo Info { get; set; }

        /// <summary>
        /// Contacts for the employment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactAdvanced> Contacts { get; set; }

        /// <summary>
        /// After server-side resolving, this will contain the resolved ID of the employment or may be "new:n" if the employment is new (n is 1 based counter).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolvedId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResolvedId { get; set; }

        /// <summary>
        /// Validation information for the object (after validation / preview / import, before that it is null).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiValidation Validation { get; set; }

    }

    /// <summary>
    /// Represents a file that is to be imported as worktime data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorktimeImportFile
    {
        /// <summary>
        /// File name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// MimeType of the file.
        /// <br/>May be used by the import logic to support multiple file formats (e.g. CSV, Excel) and then determine the file format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        /// <summary>
        /// Usecase Uri defines a custom handling for the import and data may contain additional parameters for the import logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// Actual data of the file (CSV, Excel, JSON etc.): source of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

    }

    /// <summary>
    /// Object that represents a Salaxy account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountInIndex
    {
        /// <summary>
        /// Avatar for the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar Avatar { get; set; }

        /// <summary>
        /// Official id of the person or company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficialId { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Telephone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Bank account number (IBAN)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ibanNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IbanNumber { get; set; }

    }

    /// <summary>
    /// Employment specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentData
    {
        /// <summary>
        /// Type for the pension insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PensionCalculation? PensionCalculation { get; set; }

        /// <summary>
        /// Taxcard type from the employment point of view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationTaxcard? Taxcard { get; set; }

        /// <summary>
        /// Type of the employment relation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationType? Type { get; set; }

        /// <summary>
        /// Start date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartDate { get; set; }

        /// <summary>
        /// End date of the Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndDate { get; set; }

        /// <summary>
        /// Duration of the employment. If true, the employment relation is for a fixed term.
        /// <br/>Otherwise (which is the default) the employment relation continues until further notice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFixedTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFixedTerm { get; set; }

        /// <summary>
        /// Indicates that the employment relation has been terminated.
        /// <br/>This is the value stored in the database as opposed to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTerminated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTerminated { get; set; }

        /// <summary>
        /// The search logic returns the active state of the employment here in relation to queried date (or today).
        /// <br/>Note that you cannot query based on this dynamic parameter: All values in the search index are null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of employment relations in the user interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public EmploymentRelationStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// InternationalIdentifier enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InternationalIdentifier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"taxIdentificationNumber")]
        TaxIdentificationNumber = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"foreignPersonalIdentificationNumber")]
        ForeignPersonalIdentificationNumber = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 3,

    }

    /// <summary>
    /// The information about tax at source, typically from  non-resident taxcard (lähdeverokortti) for non-residents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxAtSource
    {
        /// <summary>
        /// Tax percent. As of writing, this is 35% by default and 15% for athletes and performingg artists,
        /// <br/>but the percentage may change and bust be checked from the taxcard (or legistlattion if there is no card available).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

        /// <summary>
        /// Monthly deduction (e.g. 510 €/month) if one can be used for this card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionMonthly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionMonthly { get; set; }

        /// <summary>
        /// Daily deduction (e.g. 17 €/day) if one can be used for this card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deductionDaily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeductionDaily { get; set; }

    }

    /// <summary>
    /// InternationalSocialSecurityType enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InternationalSocialSecurityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"foreign")]
        Foreign = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mixed")]
        Mixed = 2,

    }

    /// <summary>
    /// InternationalSocialSecurityException enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InternationalSocialSecurityException
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSubjectToEarningsRelatedPensionInsurance")]
        NotSubjectToEarningsRelatedPensionInsurance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"notSubjectToAccidentAndOccupationalDiseaseInsurance")]
        NotSubjectToAccidentAndOccupationalDiseaseInsurance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"notSubjectToUnemploymentInsurance")]
        NotSubjectToUnemploymentInsurance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"notSubjectToHealthInsurance")]
        NotSubjectToHealthInsurance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"voluntaryEarningsRelatedPensionInsurance")]
        VoluntaryEarningsRelatedPensionInsurance = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"noObligationToHealthInsuranceDailyAllowanceContribution")]
        NoObligationToHealthInsuranceDailyAllowanceContribution = 5,

    }

    /// <summary>
    /// Properties of the employment for international situations: Working abroad or foreign worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmploymentRelationInternational
    {
        /// <summary>
        /// Country of residence for non-recident of Finland (rajatusti verovelvollinen)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Country? Country { get; set; }

        /// <summary>
        /// Identifier for non-recident of Finland in the country of residence.
        /// <br/>Type of the identifier is specified in IdType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForeignId { get; set; }

        /// <summary>
        /// Type of ForeignId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InternationalIdentifier? IdType { get; set; }

        /// <summary>
        /// The non-resident taxcard (or percent without taxcard) that is used if the taxcard in Employment.Info.Taxcard is set to TaxAtSource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxAtSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxAtSource TaxAtSource { get; set; }

        /// <summary>
        /// Types of social security for international situations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public InternationalSocialSecurityType? SocialSecurity { get; set; }

        /// <summary>
        /// Exceptions to standard social security cases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Salaxy.Client.SafeEnumConverter))]
        public System.Collections.Generic.ICollection<InternationalSocialSecurityException> SocialSecurityExceptions { get; set; }

    }

    /// <summary>
    /// Specifies how the holidays are handled for this Worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidaySpecification
    {
        /// <summary>
        /// Defines how the holidays are handled for the worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayCode? Code { get; set; }

        /// <summary>
        /// Defines the number of holidays that the worker is entitled per month worked.
        /// <br/>If the value is set to 0 (default), the number is 2 for first year and 2,5 thereafter as defined in the law.
        /// <br/>To actually se the daysPerMonth to zero, use code value other than Permanent14Days or Permanent35Hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accrualFixed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AccrualFixed { get; set; }

        /// <summary>
        /// Holiday compensation as percent of salary (11.5% is 0.115)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Compensation { get; set; }

        /// <summary>
        /// Method for paying holiday bonus in this salary calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayBonusPaymentMethod? BonusMethod { get; set; }

        /// <summary>
        /// Holiday bonus for the worker (lomaraha, lomaltapaluuraha).
        /// <br/>Typically 0.5 for 50%.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Bonus { get; set; }

    }

    /// <summary>
    /// Employment relation: The relation between Employer and Worker as well as the personal info of the worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Employment
    {
        /// <summary>
        /// General information about the Employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentRelationInfo Info { get; set; }

        /// <summary>
        /// Describes the work that is being performed in this Employment Relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("work", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkDescription Work { get; set; }

        /// <summary>
        /// Contains values that are needed when creating an employment, but where changing is restricted in the future:
        /// <br/>E.g. names and personalId are required when creating a new employment, but once a calculation is created (or at least paid),
        /// <br/>editing of theses is no longer possible. See the editing rules for individual properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentIdentity Identity { get; set; }

        /// <summary>
        /// Properties of the employment for international situations: Working abroad or foreign worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("international", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmploymentRelationInternational International { get; set; }

        /// <summary>
        /// Contacts stored in the employment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactAdvanced> Contacts { get; set; }

        /// <summary>
        /// Usecase is data related to the source and processing of the Employment data outside the Salaxy backend service / system.
        /// <br/>Typically, Usecase data would be processed by an external system that has originally created the
        /// <br/>Employment Relation (Worker / Employee in many systems). E.g. expenses system, hourly reporting system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// Defines how the holidays are specified to this Worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidaySpecification Holidays { get; set; }

        /// <summary>
        /// Contains read-only personal information for the worker typically managed by the Worker account:
        /// <br/>Names, personal ID and contact. Currently, this data is edited in Person or WorkerAccount containers, not in the employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex PersonalInfo { get; set; }

        /// <summary>
        /// If true, the Worker has registered and maintains his / her own personal info.
        /// <br/>If false, the Worker account is created and still maintained by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRegistered { get; set; }

        /// <summary>
        /// Workflow data, which is exposed to API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Absences for a single Worker.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerAbsences
    {
        /// <summary>
        /// Account ID for the worker whose absences are recorded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerId { get; set; }

        /// <summary>
        /// The employment relation id for the worker whose absences are recorded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Collection of absence periods.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AbsencePeriod> Periods { get; set; }

        /// <summary>
        /// Basic information for the Worker.
        /// <br/>Automatically updated upon save based on WorkerId.
        /// <br/>Mainly for the listings etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSnapshot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar WorkerSnapshot { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// HolidayAccrualSource enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HolidayAccrualSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"initial")]
        Initial = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"calcDraft")]
        CalcDraft = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"calcPaid")]
        CalcPaid = 3,

    }

    /// <summary>
    /// Entry in the Yearly Holiday Accrual list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayAccrualEntry
    {
        /// <summary>
        /// Index of the month from 0-11 for easier iteration.
        /// <br/>This is also the real identifier of the month when editing the entries through API.
        /// <br/>Months 4-12 are index 0-8 and month 1-3 are index 9-11
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Index { get; set; }

        /// <summary>
        /// First day of month for the holiday month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Month { get; set; }

        /// <summary>
        /// Days added to holiday Accrual: Typically days per month.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daysAccrued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DaysAccrued { get; set; }

        /// <summary>
        /// Source of the holiday accrual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public HolidayAccrualSource? Source { get; set; }

        /// <summary>
        /// Identier of the calculation if Kind
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalcId { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    /// <summary>
    /// Yearly log for Holiday accrual.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayAccrual
    {
        /// <summary>
        /// Holiday accrual entries during the period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("months", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HolidayAccrualEntry> Months { get; set; }

        /// <summary>
        /// The period for holiday accrual.
        /// <br/>This is also the period of the holiday year that the Worker is Employed,
        /// <br/>i.e. it may be shorter than HolidayYear Period if the employment relation
        /// <br/>begins or ends within the holiday year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Default accrual for months where the Accrual occurs.
        /// <br/>When Holiday year is recalculated, this is determined either from Employment Period or AccrualFixed if set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultAccrual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DefaultAccrual { get; set; }

        /// <summary>
        /// Start saldo from the previous year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startSaldo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? StartSaldo { get; set; }

        /// <summary>
        /// Total for the current year. This does not include Start saldo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Total { get; set; }

        /// <summary>
        /// End saldo from the previous year. This is Total + Start Saldo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endSaldo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EndSaldo { get; set; }

    }

    /// <summary>
    /// A planned annual Leave - not sure whether it will kept or is it just planned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnualLeave
    {
        /// <summary>
        /// Identifies a single leave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The planned holiday period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    /// <summary>
    /// AnnualLeavePaymentKind enumeration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnnualLeavePaymentKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"planned")]
        Planned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manualSalary")]
        ManualSalary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"manualCompensation")]
        ManualCompensation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"manualBonus")]
        ManualBonus = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"paidCalc")]
        PaidCalc = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"draftCalc")]
        DraftCalc = 6,

    }

    /// <summary>
    /// Payment related to annual leave: holiday salary, bonus and compensation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnualLeavePayment
    {
        /// <summary>
        /// Type of the payment entry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public AnnualLeavePaymentKind? Kind { get; set; }

        /// <summary>
        /// The reference date: Typically the Paid at date.
        /// <br/>The items are typically sorted based on this.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        /// <summary>
        /// Days of holidays that are paid or compensated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HolidayDays { get; set; }

        /// <summary>
        /// Salary that is paid for holidays
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidaySalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HolidaySalary { get; set; }

        /// <summary>
        /// Compensation that is paid for holidays not kept.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayCompensation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HolidayCompensation { get; set; }

        /// <summary>
        /// Bonus for either Holiday Salary or Compensation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayBonus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HolidayBonus { get; set; }

        /// <summary>
        /// If the payment is defined by a calculation, stores the calculation ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalcId { get; set; }

        /// <summary>
        /// Identifies a single leave.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The planned holiday period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Additional information as recorded by the Employer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

    }

    /// <summary>
    /// Data about the annual leaves planned and used during the holiday year.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnualLeaves
    {
        /// <summary>
        /// Planned annual leaves.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("planned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnnualLeave> Planned { get; set; }

        /// <summary>
        /// Paid or otherwise handled annual leaves.
        /// <br/>PRELIMINARY: This property is under revision - it may be moved or renamed without being a breaking change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnnualLeavePayment> Paid { get; set; }

    }

    /// <summary>
    /// Holiday year is in Finland from April to end of march. This is the time from which the holidays for the following summer and year are determined.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HolidayYear
    {
        /// <summary>
        /// Year as integer. This value is required when inserting and cannot be edited later.
        /// <br/>Period will be set accordingly, or adjusted in case it is set below.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public double Year { get; set; }

        /// <summary>
        /// Salaxy ID of the worker. This value is required when inserting and cannot be edited later.
        /// <br/>WorkerSnapshot is automatically updated upon save.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerId { get; set; }

        /// <summary>
        /// The employment relation for the worker whose holidays are managed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// The holiday period for the year: Should always be 2.5.[Year]-30.4.[Year+1]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Period { get; set; }

        /// <summary>
        /// Specifies how the holidays are handled.
        /// <br/>If the Spec.Code is Undefined in Save, the contents is fetched from the current employment relation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidaySpecificationForYear Spec { get; set; }

        /// <summary>
        /// Accrual of holidays (lomakirjanpito).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accrual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HolidayAccrual Accrual { get; set; }

        /// <summary>
        /// Payments related to Annual Leaves (holidays).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leaves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnualLeaves Leaves { get; set; }

        /// <summary>
        /// Basic information for the Worker.
        /// <br/>Automatically updated upon save based on WorkerId.
        /// <br/>Mainly for the listings etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerSnapshot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Avatar WorkerSnapshot { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Contains a Preview of objects that would be created / updated in the import.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorktimeImportPreview
    {
        /// <summary>
        /// List of all employments that are part of the import.
        /// <br/>This list is populated already as part of the Validations phase to check that all rows have a valid employment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allEmployments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmploymentListItem> AllEmployments { get; set; }

        /// <summary>
        /// Employments that will be updated (created or changed) in the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Employment> Employments { get; set; }

        /// <summary>
        /// Payrolls that will be updated (created or changed) in the import.
        /// <br/>These also contain the Calculations that are part of the Payroll.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrolls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PayrollDetails> Payrolls { get; set; }

        /// <summary>
        /// Calculations that will be updated (created or changed) in the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Calculation> Calculations { get; set; }

        /// <summary>
        /// WorkerAbsences that will be updated (created or changed) in the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkerAbsences> Absences { get; set; }

        /// <summary>
        /// Holiday years that will be updated (created or changed) in the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holidayYears", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HolidayYear> HolidayYears { get; set; }

    }

    /// <summary>
    /// Worktime Import is a shortcut to import worktime data from external sources to Payroll, Calculations, Ebsences and Holidays.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorktimeImport
    {
        /// <summary>
        /// General data about how the import should be performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorktimeImportHeader Header { get; set; }

        /// <summary>
        /// The Worktime import rows that are added / merged in this import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorktimeImportRow> Rows { get; set; }

        /// <summary>
        /// Employment information that may be coming in as part of Worktime import.
        /// <br/>Typically, these would be used only when creating a new employment. Perhaps some contact information is updated later depending on the import logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorktimeImportEmployment> Employments { get; set; }

        /// <summary>
        /// Potential files (CSV, Excel, JSON etc.) that may be the source of the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorktimeImportFile> Files { get; set; }

        /// <summary>
        /// Usecase Uri defines a custom handling for the import and data may contain additional parameters for the import logic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsecaseData Usecase { get; set; }

        /// <summary>
        /// The workflow data for manual editing and approval purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }

        /// <summary>
        /// Preview of the objects that would be created / updated in the import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorktimeImportPreview Preview { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Calculation specific business data for index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationData
    {
        /// <summary>
        /// A flag indicating if the requested date for the SalaryDate has been set.
        /// <br/>If the date has been set, the value of the flag is 'SALA'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedSalaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestedSalaryDate { get; set; }

        /// <summary>
        /// The sum that is at the end paid to the Worker:
        /// <br/>Salary payment + expenses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workerPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WorkerPayment { get; set; }

        /// <summary>
        /// The total pension payment for this calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PensionPayment { get; set; }

        /// <summary>
        /// The taxes that were deducted from the worker salary a paid as part of taxation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxPayment { get; set; }

        /// <summary>
        /// The social security payment- paid as part of taxation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SocialSecurityPayment { get; set; }

        /// <summary>
        /// Status of the calculation from the end-user point-of-view.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationStatus? Status { get; set; }

        /// <summary>
        /// Payroll id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payrollId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayrollId { get; set; }

        /// <summary>
        /// Employment id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmploymentId { get; set; }

        /// <summary>
        /// Use case uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usecaseUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsecaseUri { get; set; }

        /// <summary>
        /// The MessageThread Id, if this calculation is referred in a message thread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageThreadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageThreadId { get; set; }

        /// <summary>
        /// Contains the email or id of the responsible for the partner workflow event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerMessageAssignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerMessageAssignedTo { get; set; }

        /// <summary>
        /// Work start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkStartDate { get; set; }

        /// <summary>
        /// Work end date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkEndDate { get; set; }

        /// <summary>
        /// Payment channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public PaymentChannel? PaymentChannel { get; set; }

        /// <summary>
        /// Taxable salary is the salary from the taxation point of view - includes some benefits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxable { get; set; }

    }

    /// <summary>
    /// Represents a single item in a list of calculations in the user interface. It contains all essential information of the calculation and is basis for searching, filtering and sorting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalculationListItem
    {
        /// <summary>
        /// The date when the object was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The time when the object was last updated.
        /// <br/>Typically this should be a logical update by user (UserUpdatedAt in DTO), not technical updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Person GUID for the owner of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Metadata for the owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OwnerInfo { get; set; }

        /// <summary>
        /// The main status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public CalculationStatus? Status { get; set; }

        /// <summary>
        /// The back office status depending on the type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backOfficeStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BackOfficeStatus { get; set; }

        /// <summary>
        /// When the event started. Typically, this is the CreatedAt date, but it may be something else.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartAt { get; set; }

        /// <summary>
        /// This is the end date of the event.
        /// <br/>Typically, it is the UserUpdatedAt date, but it may be something else - e.g PaidAt for the calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndAt { get; set; }

        /// <summary>
        /// Gross salary if that is relevant to the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossSalary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossSalary { get; set; }

        /// <summary>
        /// This is the payment from the Owner point-of-view:
        /// <br/>Total payment for the Employer and Net salary for the Worker in the case of a calculation.
        /// <br/>Only add here the payment, if the payment is really made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Payment { get; set; }

        /// <summary>
        /// Estimated fee of the transaction to Palkkaus.fi.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Fee { get; set; }

        /// <summary>
        /// The GUID for the other party. Currently, this is always the PersonID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherId { get; set; }

        /// <summary>
        /// The other party (usually a Person) that is involved in the event (e.g Worker if this is a Salary payment by Employer).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherPartyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInIndex OtherPartyInfo { get; set; }

        /// <summary>
        /// A very short description describing the object as an event. E.g. "Paid salary"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortText { get; set; }

        /// <summary>
        /// Business object ids related to this object. E.g. calculations and payrolls in the payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessObjects { get; set; }

        /// <summary>
        /// This is valid for calculations only. The estimated date of salary in worker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalaryDate { get; set; }

        /// <summary>
        /// Business data to include further information of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CalculationData Data { get; set; }

        /// <summary>
        /// Version number. May be used in conflicts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VersionNumber { get; set; }

        /// <summary>
        /// Salaxy uri of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// Workflow flags for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Flags { get; set; }

        /// <summary>
        /// Workflow messages for the object.
        /// <br/>Only workflow events with API supported message types are listed.
        /// <br/>Shown in format "[MessageType]:[Message] ([User] at [UTC-time])"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        /// <summary>
        /// Sub category for the payload. E.g. Payment Category, MoneyTransfer Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }

        /// <summary>
        /// The date for the actual period for which this object is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logicalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogicalDate { get; set; }

        /// <summary>
        /// Reference information. E.g. Payment or MoneyTransfer reference number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }

        /// <summary>
        /// External id for the object in 3rd party system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Owner ID for this data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Indication that for the currently logged-in account, the data is generally read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReadOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Primary partner information. Automatically updated from the storage container Partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Partner { get; set; }

    }

    /// <summary>
    /// Result from OData query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataResult_CalculationListItem_
    {
        /// <summary>
        /// The result / payload of the query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CalculationListItem> Value { get; set; } = new System.Collections.ObjectModel.Collection<CalculationListItem>();

        /// <summary>
        /// Total count of the items in storage if the count was requested and if it supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Count { get; set; }

        /// <summary>
        /// Next page link
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

    }

    /// <summary>
    /// Construct a type with a set of properties K of type T
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class String_ : System.Collections.Generic.Dictionary<string, string>
    {

    }

    /// <summary>
    /// Defines a list item in Blob storages
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlobListItem
    {
        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the owner of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// ISO datetime (utc) for when the item was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// ISO datetime (utc) for when the item was last updated by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Full path in the storage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>
        /// Metadata is the properties related to the blob that are passsed in the headers.
        /// <br/>Not usable in searches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Tags are indexed and may be used in list searches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public String_ Tags { get; set; }

        /// <summary>
        /// Identifier of the current version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }

        /// <summary>
        /// The Content-Length http header indicates the size of the message body, in bytes, sent to the recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ContentLength { get; set; }

        /// <summary>
        /// The Content-Type (http header) indicates the original media type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        /// <summary>
        /// The Content-Language (http header) describes the language(s) intended for the audience.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentLanguage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentLanguage { get; set; }

    }

    /// <summary>
    /// Result from OData query
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataResult_BlobListItem_
    {
        /// <summary>
        /// The result / payload of the query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BlobListItem> Value { get; set; } = new System.Collections.ObjectModel.Collection<BlobListItem>();

        /// <summary>
        /// Total count of the items in storage if the count was requested and if it supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Count { get; set; }

        /// <summary>
        /// Next page link
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageLink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageLink { get; set; }

    }

    /// <summary>
    /// Describes an ApiCrudItem that is stored in Azure blob storage.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlobDetailsItem
    {
        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the owner of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// ISO datetime (utc) for when the item was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// ISO datetime (utc) for when the item was last updated by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Metadata is the properties related to the blob that are passsed in the headers.
        /// <br/>Not usable in searches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Tags are indexed and may be used in list searches.
        /// <br/>A blob can have up to 10 tags (note that "owner" is automatically added, so only 9 are usable in implementation).
        /// <br/>Tag keys must be between 1 and 128 characters. Tag values must be between 0 and 256 characters.
        /// <br/>Valid tag key and value characters include lower and upper case letters, digits (0-9),
        /// <br/>space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public String_ Tags { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorktimeImportApiItem : WorktimeImport
    {
        /// <summary>
        /// Unique identifier of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the owner of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// ISO datetime (utc) for when the item was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// ISO datetime (utc) for when the item was last updated by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Metadata is the properties related to the blob that are passsed in the headers.
        /// <br/>Not usable in searches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Tags are indexed and may be used in list searches.
        /// <br/>A blob can have up to 10 tags (note that "owner" is automatically added, so only 9 are usable in implementation).
        /// <br/>Tag keys must be between 1 and 128 characters. Tag values must be between 0 and 256 characters.
        /// <br/>Valid tag key and value characters include lower and upper case letters, digits (0-9),
        /// <br/>space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public String_ Tags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Environment specific configuration for Salaxy API's and JavaScript in general.
    /// <br/>Raw object as stored in the env file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Config
    {
        /// <summary>
        /// The base address of the Salaxy http API server, e.g. https://secure.salaxy.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apiServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiServer { get; set; }

        /// <summary>
        /// The base address of the Palkkaus web site, e.g. https://www.palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wwwServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WwwServer { get; set; }

        /// <summary>
        /// A flag indicating if the current configuration is for test environment only. If true, the site is for testing only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isTestData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTestData { get; set; }

        /// <summary>
        /// A flag indicating if the site sets a Salaxy cookie which persists over web sessions. If true, the cookie will be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useCookie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseCookie { get; set; }

        /// <summary>
        /// A flag indicating if the API site uses credentials. If true, the credentials will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useCredentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseCredentials { get; set; }

        /// <summary>
        /// InstrumentationKey for Application Insight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instrumentationKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstrumentationKey { get; set; }

        /// <summary>
        /// Partner id for site. This is required for example for onboarding with partner specific style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerSite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerSite { get; set; }

        /// <summary>
        /// Pro server site address. e.g. https://pro.palkkaus.fi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProServer { get; set; }

        /// <summary>
        /// Report server url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportServer { get; set; }

        /// <summary>
        /// Application id for invoicing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The base address of the integrations server, e.g. https://integrations.salaxy.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("integrationsServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IntegrationsServer { get; set; }

    }

    /// <summary>
    /// Oprtional properties managing the commit process.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        /// <summary>
        /// Only commit selected employments: collection of employment IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Employments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The payload containing the rows to mark and the new status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// The new status to set.
        /// <br/>Status "new" is essentially reverting the state from "ignored" =&gt; final state may be "preview", "new" or "error" depending on other properties of the row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Salaxy.Client.SafeEnumConverter))]
        public Body2Status Status { get; set; }

        /// <summary>
        /// The rows to mark.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorktimeImportRow> Rows { get; set; } = new System.Collections.ObjectModel.Collection<WorktimeImportRow>();

        /// <summary>
        /// Worktime ID / employment ID where the changes are updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"preview")]
        Preview = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"committed")]
        Committed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"distinct")]
        Distinct = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorktimeImportRowStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"preview")]
        Preview = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"committed")]
        Committed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ignored")]
        Ignored = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"edited")]
        Edited = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body2Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ignored")]
        Ignored = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625